<!-- views/chatlist.ejs -->
<div class="chat-list-container">
  <div class="chat-list-header">
    <h2>Chat</h2>
    <div class="chat-list-controls">
      <!-- Dropdown Filter -->
      <select id="chatFilter" onchange="filterChats(this.value)">
        <option value="all">All Chats</option>
        <option value="unread">Unread</option>
        <option value="a-z">A-Z</option>
        <option value="highest-tips">Highest Tips</option>
        <option value="online">Online</option>
      </select>
      <!-- Search Bar -->
      <div class="search-container">
        <input type="text" id="searchInput" placeholder="Search users">
      </div>
    </div>
  </div>

  <% if (chats.length > 0) { %>
    <% chats.forEach(function(chat) { 
         let otherParticipant = chat.participants.find(p => p._id.toString() !== currentUser._id.toString());
         let hasUnread = chat.hasUnread; // Computed in chatlist.js
    %>
      <div class="chat-item <%= hasUnread ? 'unread' : '' %>" 
           data-username="<%= otherParticipant ? otherParticipant.username : 'Group Chat' %>" 
           data-tip="<%= chat.tipAmount || 0 %>" 
           data-online="<%= otherParticipant && otherParticipant.isOnline ? 'true' : 'false' %>"
           data-chat-id="<%= chat._id %>">
        <a href="/chat/<%= chat._id %>">
          <div class="chat-item-content">
            <!-- Profile Picture -->
            <img src="<%= otherParticipant && otherParticipant.profilePicture ? otherParticipant.profilePicture : '/images/default-profile.png' %>" 
                 alt="Profile Picture" 
                 class="chat-profile-pic">
            <div class="chat-details">
              <div class="chat-item-header">
                <h3>
                  <% if (otherParticipant) { %>
                    <%= otherParticipant.username %>
                  <% } else { %>
                    Group Chat
                  <% } %>
                </h3>
                <span class="chat-timestamp"><%= chat.lastMessageTime || '' %></span>
              </div>
              <div class="chat-preview-wrapper">
                <% if (chat.mediaType && !chat.previewText) { %>
                  <p class="chat-preview <%= chat.isTip ? 'tip-preview' : '' %>">
                    <% if (chat.mediaType === 'image') { %>
                      sent a photo
                    <% } else if (chat.mediaType === 'video') { %>
                      sent a video
                    <% } %>
                    <% if (chat.isTip) { %>
                      <span class="tip-indicator">
                        <i class="fa fa-gift"></i> ₦<%= chat.tipAmount %>
                      </span>
                    <% } %>
                  </p>
                <% } else { %>
                  <p class="chat-preview <%= chat.isTip ? 'tip-preview' : '' %>">
                    <%= chat.previewText %>
                    <% if (chat.isTip) { %>
                      <span class="tip-indicator">
                        <i class="fa fa-gift"></i> ₦<%= chat.tipAmount %>
                      </span>
                    <% } %>
                  </p>
                <% } %>
              </div>
            </div>
            <% if (hasUnread) { %>
              <span class="unread-dot"></span>
            <% } %>
          </div>
        </a>
      </div>
    <% }); %>
  <% } else { %>
    <p>You have no conversations yet.</p>
  <% } %>
</div>

<!-- Client-side JavaScript for Filtering, Searching, and Heartbeat -->
<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();

  socket.on('connect', () => {
    console.log('Connected to Socket.io server for chat list');
    setInterval(() => {
      socket.emit('heartbeat');
    }, 15000);
  });

  socket.on('connect_error', (error) => {
    console.error('Socket.io connection error:', error);
    alert('Failed to connect to the chat server. Please try refreshing the page.');
  });

  function filterChats(filter) {
    const chatItems = document.querySelectorAll('.chat-item');
    chatItems.forEach(item => {
      const username = item.getAttribute('data-username')?.toLowerCase() || '';
      const tipAmount = parseFloat(item.getAttribute('data-tip')) || 0;
      const isOnline = item.getAttribute('data-online') === 'true';
      const isUnread = item.classList.contains('unread');

      let shouldShow = true;
      if (filter === 'unread' && !isUnread) shouldShow = false;
      if (filter === 'online' && !isOnline) shouldShow = false;
      if (filter === 'highest-tips' && tipAmount === 0) shouldShow = false;

      item.style.display = shouldShow ? 'block' : 'none';
    });

    if (filter === 'a-z' || filter === 'highest-tips') {
      const sortedItems = Array.from(chatItems).sort((a, b) => {
        if (filter === 'a-z') {
          const nameA = a.getAttribute('data-username')?.toLowerCase() || '';
          const nameB = b.getAttribute('data-username')?.toLowerCase() || '';
          return nameA.localeCompare(nameB);
        } else if (filter === 'highest-tips') {
          const tipA = parseFloat(a.getAttribute('data-tip')) || 0;
          const tipB = parseFloat(b.getAttribute('data-tip')) || 0;
          return tipB - tipA;
        }
      });
      const container = document.querySelector('.chat-list-container');
      sortedItems.forEach(item => container.appendChild(item));
    }
  }

  function searchChats() {
    const searchInput = document.getElementById('searchInput');
    if (!searchInput) {
      console.error('searchInput element not found');
      return;
    }
    const searchTerm = searchInput.value.toLowerCase().trim();
    const chatItems = document.querySelectorAll('.chat-item');
    chatItems.forEach(item => {
      const username = item.getAttribute('data-username')?.toLowerCase() || '';
      item.style.display = username.includes(searchTerm) ? 'block' : 'none';
    });
  }

  // Debounced search event listener
  document.getElementById('searchInput')?.addEventListener('input', () => {
    clearTimeout(window.searchChatsTimeout);
    window.searchChatsTimeout = setTimeout(searchChats, 300);
  });
</script>