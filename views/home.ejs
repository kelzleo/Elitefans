<div class="home-container" data-env="<%= env %>">
  <!-- Search Icon and Hidden Search Container -->
  <div class="search-section">
    <div class="search-icon-container">
      <i class="fa-solid fa-magnifying-glass search-icon"></i>
    </div>
    <div class="search-container" style="display: none;">
      <form class="search-input-form" onsubmit="return false;">
        <input
          type="text"
          name="query"
          placeholder="Search creators..."
          autocomplete="off"
        />
        <button type="submit" class="search-submit-btn"></button>
      </form>
      <div class="suggestions-container" style="display: none;"></div>
    </div>
  </div>

  <!-- Container for Search Results -->
  <div class="search-results-container"></div>

  <!-- Feed Mode Container -->
  <div class="feed-mode-container">
    <!-- Trending Creators Section -->
    <% if (featuredCreators && featuredCreators.length > 0) { %>
      <div class="trending-creators-container">
        <h2>Trending Creators</h2>
        <div class="slider-nav left-nav" id="prevCreators">
          <i class="fa-solid fa-chevron-left"></i>
        </div>
        <div class="slider-nav right-nav" id="nextCreators">
          <i class="fa-solid fa-chevron-right"></i>
        </div>
        <div class="trending-creators-list">
          <% featuredCreators.forEach((creator, index) => { %>
            <% let bgImage = creator.coverPhoto ? `${creator.coverPhoto}` : '/Uploads/default-cover.jpg'; %>
            <div class="featured-creator-card" data-index="<%= index %>">
              <div class="creator-card-background" style="background-image: url('<%= bgImage %>');">
                <div class="subscriber-count">
                  <p><%= creator.subscriberCount %> subscriber(s)</p>
                </div>
                <div class="profile-picture-container">
                  <img
                    src="<%= creator.profilePicture || '/Uploads/default-profile-picture.jpg' %>"
                    alt="<%= creator.username %> profile"
                    class="profile-picture"
                  />
                </div>
                <div class="creator-info">
                  <a href="/profile/view/<%= creator._id %>">
                    <strong><%= creator.username %></strong>
                  </a>
                  <% if (creator.profileName) { %>
                    <p><%= creator.profileName %></p>
                  <% } %>
                </div>
              </div>
            </div>
          <% }); %>
        </div>
      </div>
    <% } %>

    <!-- Feed: Show Subscribed Posts -->
    <div class="feed-container">
      <% if (posts && posts.length > 0) { %>
        <% posts.forEach(post => { %>
          <% if (post.creator) { %>
            <div class="post-card">
              <div class="post-header">
                <img
                  src="<%= post.creator.profilePicture || '/Uploads/default-profile-picture.jpg' %>"
                  alt="<%= post.creator.username %> profile"
                  class="creator-profile-pic"
                />
                <a href="/profile/view/<%= post.creator._id %>" class="creator-name">
                  <%= post.creator.username %>
                </a>
                <span class="post-timestamp">
                  <%= new Date(post.createdAt).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric', hour12: true }) %>
                </span>
              </div>
              <div class="post-body">
                <!-- Handle Posts with mediaItems (New Schema) -->
                <% if (post.mediaItems && post.mediaItems.length > 0) { %>
                  <% if (post.special && post.locked) { %>
                    <div class="locked-media-container" style="position: relative;">
                      <img
                        src="https://placehold.co/300x200/ff69b4/ffffff?text=Locked+Content"
                        alt="Locked Media"
                        class="post-image"
                      />
                      <div class="unlock-overlay">
                        <div>Pay to unlock</div>
                        <button
                          class="unlock-button"
                          data-content-id="<%= post._id %>"
                          data-creator-id="<%= post.creator._id %>"
                        >
                          Unlock
                        </button>
                      </div>
                    </div>
                  <% } else { %>
                    <div class="media-carousel-container">
                      <div class="media-carousel" id="carousel-<%= post._id %>">
                        <% post.mediaItems.forEach((item, index) => { %>
                          <div class="carousel-item <%= index === 0 ? 'active' : '' %>">
                            <% if (item.type === 'image') { %>
                              <img
                                src="<%= item.url %>"
                                alt="Post Image"
                                class="post-image fullscreenable"
                                data-fullscreen-src="<%= item.url %>"
                              />
                            <% } else if (item.type === 'video') { %>
                              <video controls class="post-video">
                                <source src="<%= item.url %>" type="<%= item.contentType %>">
                                Your browser does not support the video tag.
                              </video>
                            <% } %>
                          </div>
                        <% }); %>
                      </div>
                      <% if (post.mediaItems.length > 1) { %>
                        <div class="carousel-nav">
                          <button class="carousel-prev" data-post-id="<%= post._id %>"><i class="fa-solid fa-chevron-left"></i></button>
                          <div class="carousel-indicators">
                            <% post.mediaItems.forEach((_, index) => { %>
                              <span class="carousel-dot <%= index === 0 ? 'active' : '' %>" data-index="<%= index %>" data-post-id="<%= post._id %>"></span>
                            <% }); %>
                          </div>
                          <button class="carousel-next" data-post-id="<%= post._id %>"><i class="fa-solid fa-chevron-right"></i></button>
                        </div>
                      <% } %>
                    </div>
                  <% } %>
                <!-- Handle Legacy Posts (contentUrl) -->
                <% } else if (post.type === 'image') { %>
                  <% if (post.special && post.locked) { %>
                    <div class="locked-image-container" style="position: relative;">
                      <img
                        src="https://placehold.co/300x200/ff69b4/ffffff?text=Locked+Content"
                        alt="Locked Image"
                        class="post-image"
                      />
                      <div class="unlock-overlay">
                        <div>Pay to unlock</div>
                        <button
                          class="unlock-button"
                          data-content-id="<%= post._id %>"
                          data-creator-id="<%= post.creator._id %>"
                        >
                          Unlock
                        </button>
                      </div>
                    </div>
                  <% } else { %>
                    <img
                      src="<%= post.contentUrl %>"
                      alt="Post Image"
                      class="post-image fullscreenable"
                      data-fullscreen-src="<%= post.contentUrl %>"
                    />
                  <% } %>
                <% } else if (post.type === 'video') { %>
                  <% if (post.special && post.locked) { %>
                    <div class="locked-video-container" style="position: relative;">
                      <img
                        src="https://placehold.co/300x200/ff69b4/ffffff?text=Locked+Video"
                        alt="Locked Video"
                        class="post-image"
                      />
                      <div class="unlock-overlay">
                        <div>Pay to unlock</div>
                        <button
                          class="unlock-button"
                          data-content-id="<%= post._id %>"
                          data-creator-id="<%= post.creator._id %>"
                        >
                          Unlock
                        </button>
                      </div>
                    </div>
                  <% } else { %>
                    <video controls class="post-video">
                      <source src="<%= post.contentUrl %>" type="video/mp4">
                      Your browser does not support the video tag.
                    </video>
                  <% } %>
                <% } else if (post.type === 'text') { %>
                  <p class="post-text"><%= post.writeUp %></p>
                <% } %>
                <% if (post.writeUp && post.type !== 'text') { %>
                  <p class="post-text" style="margin-top: 10px;"><%= post.writeUp %></p>
                <% } %>
              </div>
              <div class="post-actions">
                <button class="like-button" data-post-id="<%= post._id %>">
                  <i class="fa-solid fa-heart <%= post.likes.includes(currentUser._id) ? 'liked' : '' %>"></i>
                  <span class="like-count"><%= post.likes ? post.likes.length : 0 %></span>
                </button>
                <button class="comment-icon" data-post-id="<%= post._id %>">
                  <i class="fa-solid fa-comment"></i>
                  <span class="comment-count"><%= post.comments ? post.comments.length : 0 %></span>
                </button>
                <% if (currentUser._id.toString() !== post.creator._id.toString()) { %>
                  <button class="tip-button" data-post-id="<%= post._id %>" data-creator-id="<%= post.creator._id %>">
                    <i class="fa-solid fa-gift"></i>
                    Tip (<span class="tip-count"><%= post.totalTips || 0 %></span>)
                  </button>
                <% } %>
                <button class="bookmark-button" data-post-id="<%= post._id %>">
                  <i class="fa-solid fa-bookmark <%= currentUser.bookmarks && currentUser.bookmarks.some(b => b.toString() === post._id.toString()) ? 'bookmarked' : '' %>"></i>
                </button>
              </div>
              <div class="comments">
                <% if (post.comments && post.comments.length > 0) { %>
                  <% post.comments.forEach(comment => { %>
                    <div class="comment">
                      <strong><%= comment.user ? comment.user.username : 'Deleted User' %>:</strong> <%= comment.text %>
                    </div>
                  <% }); %>
                <% } %>
              </div>
              <div class="comment-form-container" style="display: none;">
                <form class="comment-form" data-post-id="<%= post._id %>">
                  <input type="text" name="comment" placeholder="Write your comment...">
                  <button type="submit">Comment</button>
                </form>
              </div>
            </div>
          <% } else { %>
            <p>Post creator not found.</p>
          <% } %>
        <% }); %>
      <% } else { %>
        <p>No posts available.</p>
      <% } %>
    </div>
  </div>

  <!-- JavaScript for Like, Comment, Unlock, Tip, Bookmark, Trending Creators Navigation, Full-Screen Images, Search, and Carousel -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const container = document.querySelector('.home-container');
      const isDevEnv = container && container.dataset.env === 'development';

      // Search Functionality
      const searchIcon = document.querySelector('.search-icon');
      const searchIconContainer = document.querySelector('.search-icon-container');
      const searchContainer = document.querySelector('.search-container');
      const searchInput = document.querySelector('.search-input-form input[name="query"]');
      const searchForm = document.querySelector('.search-input-form');
      const suggestionsContainer = document.querySelector('.suggestions-container');
      const searchResultsContainer = document.querySelector('.search-results-container');
      const feedModeContainer = document.querySelector('.feed-mode-container');
      let debounceTimeout;

      searchIcon.addEventListener('click', function () {
        if (searchContainer.style.display === 'none') {
          searchContainer.style.display = 'block';
          searchIconContainer.style.display = 'none';
          searchInput.focus();
        } else {
          searchContainer.style.display = 'none';
          searchIconContainer.style.display = 'block';
          suggestionsContainer.style.display = 'none';
        }
      });

      document.addEventListener('click', function (e) {
        if (
          !searchContainer.contains(e.target) &&
          !searchIcon.contains(e.target) &&
          searchContainer.style.display === 'block'
        ) {
          searchContainer.style.display = 'none';
          searchIconContainer.style.display = 'block';
          suggestionsContainer.style.display = 'none';
        }
      });

      async function fetchSearchResults(query) {
        try {
          const response = await fetch(`/home/search-creators?query=${encodeURIComponent(query)}`, {
            credentials: 'include'
          });
          if (!response.ok) throw new Error(`Failed to fetch search results: ${response.status}`);
          const data = await response.json();
          feedModeContainer.style.display = 'none';
          searchResultsContainer.style.display = 'block';
          searchResultsContainer.innerHTML = data.creators && data.creators.length > 0
            ? `<h1>Search Results for "${query}"</h1>
               ${data.creators.map(creator => `
                 <div class="creator-result">
                   <img src="${creator.profilePicture || '/Uploads/default-profile-picture.jpg'}" alt="${creator.username}" class="creator-profile-pic" style="width: 40px; height: 40px; border-radius: 50%; object-fit: cover;" />
                   <div class="creator-info">
                     <a href="/profile/view/${creator._id}"><strong>${creator.username}</strong></a>
                     ${creator.profileName ? `<p>${creator.profileName}</p>` : ''}
                     <p>${creator.subscriberCount || 0} subscriber(s)</p>
                   </div>
                 </div>
               `).join('')}`
            : `<h1>Search Results for "${query}"</h1><p>No matching creators found.</p>`;
        } catch (error) {
          if (isDevEnv) console.error('Error fetching search results:', error.message);
          searchResultsContainer.innerHTML = `<p>Error fetching search results. Please try again.</p>`;
        }
      }

      searchInput.addEventListener('input', function () {
        clearTimeout(debounceTimeout);
        const query = this.value.trim();
        if (query.length === 0) {
          suggestionsContainer.style.display = 'none';
          suggestionsContainer.innerHTML = '';
          feedModeContainer.style.display = 'block';
          searchResultsContainer.style.display = 'none';
          return;
        }
        debounceTimeout = setTimeout(async () => {
          try {
            const response = await fetch(`/home/search-suggestions?query=${encodeURIComponent(query)}`, {
              credentials: 'include'
            });
            if (!response.ok) throw new Error(`Failed to fetch suggestions: ${response.status}`);
            const data = await response.json();
            suggestionsContainer.style.display = 'block';
            suggestionsContainer.innerHTML = data.creators && data.creators.length > 0
              ? data.creators.map(creator => `
                  <div class="creator-result suggestion-item" data-user-id="${creator._id}">
                    <img src="${creator.profilePicture || '/Uploads/default-profile-picture.jpg'}" alt="${creator.username}" class="creator-profile-pic" style="width: 30px; height: 30px; border-radius: 50%; object-fit: cover;" />
                    <div class="creator-info">
                      <a href="/profile/view/${creator._id}" class="suggestion-link"><strong>${creator.username}</strong></a>
                      ${creator.profileName ? `<p>${creator.profileName}</p>` : ''}
                      <p>${creator.subscriberCount || 0} subscriber(s)</p>
                    </div>
                  </div>
                `).join('')
              : '<div class="no-suggestions">No suggestion result</div>';
            document.querySelectorAll('.suggestion-item').forEach(item => {
              item.addEventListener('click', function (e) {
                e.preventDefault();
                const userId = this.dataset.userId;
                window.location.href = `/profile/view/${userId}`;
                suggestionsContainer.style.display = 'none';
                searchContainer.style.display = 'none';
                searchIconContainer.style.display = 'block';
              });
            });
          } catch (error) {
            if (isDevEnv) console.error('Error fetching suggestions:', error.message);
            suggestionsContainer.style.display = 'block';
            suggestionsContainer.innerHTML = '<div class="no-suggestions">Error fetching suggestions.</div>';
          }
        }, 300);
      });

      searchForm.addEventListener('submit', function (e) {
        e.preventDefault();
        const query = searchInput.value.trim();
        if (query.length > 0) {
          fetchSearchResults(query);
          searchContainer.style.display = 'none';
          searchIconContainer.style.display = 'block';
          suggestionsContainer.style.display = 'none';
        }
      });

      // Like Button
      document.querySelectorAll('.like-button').forEach(button => {
        button.addEventListener('click', async function() {
          const postId = this.dataset.postId;
          const likeIcon = this.querySelector('i');
          const likeCountSpan = this.querySelector('.like-count');
          try {
            const res = await fetch(`/profile/posts/${postId}/like`, { method: 'POST' });
            const data = await res.json();
            if (res.ok) {
              likeCountSpan.textContent = data.likes;
              likeIcon.classList.toggle('liked', data.userLiked);
            } else {
              if (isDevEnv) console.error('Like failed:', data.message || `Status: ${res.status}`);
              alert(data.message || 'Could not like post.');
            }
          } catch (error) {
            if (isDevEnv) console.error('Error liking post:', error.message);
            alert('Error liking post.');
          }
        });
      });

      // Comment Icon: Toggle comment form
      document.querySelectorAll('.comment-icon').forEach(button => {
        button.addEventListener('click', function() {
          const postId = this.dataset.postId;
          const postCard = this.closest('.post-card');
          if (!postCard) {
            if (isDevEnv) console.warn('Missing post-card for comment toggle');
            return;
          }
          const commentContainer = postCard.querySelector('.comment-form-container');
          if (!commentContainer) {
            if (isDevEnv) console.warn('Missing comment-form-container in post-card');
            return;
          }
          commentContainer.style.display = commentContainer.style.display === 'block' ? 'none' : 'block';
          if (commentContainer.style.display === 'block') {
            const input = commentContainer.querySelector('input[name="comment"]');
            if (input) input.focus();
          }
        });
      });

      // Comment Form
      document.querySelectorAll('.comment-form').forEach(form => {
        form.addEventListener('submit', async function(e) {
          e.preventDefault();
          const postId = this.dataset.postId;
          const commentInput = this.querySelector('input[name="comment"]');
          const commentText = commentInput.value.trim();
          const submitButton = this.querySelector('button[type="submit"]');
          if (!commentText) return;
          const originalButtonText = submitButton.textContent;
          submitButton.textContent = 'Posting...';
          submitButton.disabled = true;
          try {
            const res = await fetch(`/profile/posts/${postId}/comment`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ text: commentText })
            });
            if (res.ok) {
              const data = await res.json();
              const commentsDiv = this.closest('.post-card').querySelector('.comments');
              const newCommentDiv = document.createElement('div');
              newCommentDiv.classList.add('comment');
              const username = data.comment && data.comment.user ? data.comment.user.username : 'You';
              newCommentDiv.innerHTML = `<strong>${username}:</strong> ${data.comment.text}`;
              commentsDiv.appendChild(newCommentDiv);
              const commentCountSpan = this.closest('.post-card').querySelector('.comment-count');
              if (commentCountSpan && data.commentCount !== undefined) commentCountSpan.textContent = data.commentCount;
              commentInput.value = '';
              this.closest('.comment-form-container').style.display = 'none';
            } else {
              const data = await res.json();
              if (isDevEnv) console.error('Comment failed:', data.message || `Status: ${res.status}`);
              alert(data.message || 'Failed to post comment.');
            }
          } catch (error) {
            if (isDevEnv) console.error('Error posting comment:', error.message);
            alert('Error posting comment.');
          } finally {
            submitButton.textContent = originalButtonText;
            submitButton.disabled = false;
          }
        });
      });

      // Bookmark Button
      document.querySelectorAll('.bookmark-button').forEach(button => {
        button.addEventListener('click', async function() {
          const postId = this.dataset.postId;
          const bookmarkIcon = this.querySelector('i');
          try {
            const res = await fetch(`/profile/posts/${postId}/bookmark`, { method: 'POST' });
            const data = await res.json();
            if (res.ok) {
              bookmarkIcon.classList.toggle('bookmarked', data.isBookmarked);
            } else {
              if (isDevEnv) console.error('Bookmark failed:', data.message || `Status: ${res.status}`);
              alert(data.message || 'Could not bookmark post.');
            }
          } catch (error) {
            if (isDevEnv) console.error('Error bookmarking post:', error.message);
            alert('Error bookmarking post.');
          }
        });
      });

      // Sync bookmark states
      document.querySelectorAll('.bookmark-button').forEach(async button => {
        const postId = button.dataset.postId;
        const bookmarkIcon = button.querySelector('i');
        try {
          const res = await fetch(`/profile/posts/${postId}/bookmark-status`, { method: 'GET' });
          const data = await res.json();
          if (res.ok) {
            bookmarkIcon.classList.toggle('bookmarked', data.isBookmarked);
          }
        } catch (error) {
          if (isDevEnv) console.error('Error syncing bookmark status:', error.message);
        }
      });

      // Unlock Button
      document.querySelectorAll('.unlock-button').forEach(button => {
        button.addEventListener('click', async function() {
          const contentId = this.dataset.contentId;
          const creatorId = this.dataset.creatorId;
          const originalText = this.textContent;
          this.textContent = 'Processing...';
          this.disabled = true;
          try {
            const response = await fetch('/profile/unlock-special-content', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ contentId, creatorId })
            });
            const result = await response.json();
            if (response.ok && result.status === 'success' && result.data.paymentLink) {
              window.location.href = result.data.paymentLink;
            } else {
              if (isDevEnv) console.error('Unlock failed:', result.message || 'No payment link');
              alert(result.message || 'Failed to initialize payment');
              this.textContent = originalText;
              this.disabled = false;
            }
          } catch (error) {
            if (isDevEnv) console.error('Error unlocking content:', error.message);
            alert('An error occurred while processing your request');
            this.textContent = originalText;
            this.disabled = false;
          }
        });
      });

      // Tip Button
      document.querySelectorAll('.tip-button').forEach(button => {
        button.addEventListener('click', async function() {
          const postId = this.dataset.postId;
          const creatorId = this.dataset.creatorId;
          let tipAmountNum = NaN;
          while (isNaN(tipAmountNum) || tipAmountNum <= 0) {
            const tipAmountStr = prompt("Enter tip amount in NGN (e.g., 500):");
            if (tipAmountStr === null) return;
            tipAmountNum = parseFloat(tipAmountStr);
            if (isNaN(tipAmountNum) || tipAmountNum <= 0) alert("Please enter a valid positive number.");
          }
          const originalHtml = this.innerHTML;
          this.innerHTML = 'Processing...';
          this.disabled = true;
          try {
            const response = await fetch(`/profile/posts/${postId}/tip`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ tipAmount: tipAmountNum, creatorId })
            });
            const result = await response.json();
            if (response.ok && result.status === 'success' && result.data.paymentLink) {
              this.innerHTML = 'Redirecting...';
              window.location.href = result.data.paymentLink;
            } else {
              if (isDevEnv) console.error('Tip failed:', result.message || 'No payment link');
              alert(result.message || 'Failed to initialize tip payment');
              this.innerHTML = originalHtml;
              this.disabled = false;
            }
          } catch (error) {
            if (isDevEnv) console.error('Error processing tip:', error.message);
            alert('An error occurred while processing your tip');
            this.innerHTML = originalHtml;
            this.disabled = false;
          }
        });
      });

      // Full-screen image functionality
      const fullscreenOverlay = document.createElement('div');
      fullscreenOverlay.classList.add('fullscreen-overlay');
      document.body.appendChild(fullscreenOverlay);
      const fullscreenImg = document.createElement('img');
      fullscreenOverlay.appendChild(fullscreenImg);
      const closeButton = document.createElement('button');
      closeButton.classList.add('close-fullscreen');
      closeButton.innerHTML = '×';
      fullscreenOverlay.appendChild(closeButton);

      document.querySelectorAll('.fullscreenable').forEach(img => {
        img.addEventListener('click', function() {
          const src = this.dataset.fullscreenSrc;
          fullscreenImg.src = src;
          fullscreenOverlay.classList.add('active');
        });
      });

      fullscreenOverlay.addEventListener('click', function(e) {
        if (e.target === fullscreenOverlay) {
          fullscreenOverlay.classList.remove('active');
        }
      });

      closeButton.addEventListener('click', function() {
        fullscreenOverlay.classList.remove('active');
      });

      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && fullscreenOverlay.classList.contains('active')) {
          fullscreenOverlay.classList.remove('active');
        }
      });

      // Carousel Navigation
      document.querySelectorAll('.media-carousel-container').forEach(container => {
        const postId = container.querySelector('.media-carousel').id.replace('carousel-', '');
        const items = container.querySelectorAll('.carousel-item');
        const prevButton = container.querySelector('.carousel-prev');
        const nextButton = container.querySelector('.carousel-next');
        const dots = container.querySelectorAll('.carousel-dot');
        let currentIndex = 0;

        function updateCarousel() {
          items.forEach((item, index) => {
            item.classList.toggle('active', index === currentIndex);
          });
          dots.forEach((dot, index) => {
            dot.classList.toggle('active', index === currentIndex);
          });
          if (prevButton && nextButton) {
            prevButton.disabled = currentIndex === 0;
            nextButton.disabled = currentIndex === items.length - 1;
          }
        }

        if (prevButton) {
          prevButton.addEventListener('click', () => {
            if (currentIndex > 0) {
              currentIndex--;
              updateCarousel();
            }
          });
        }

        if (nextButton) {
          nextButton.addEventListener('click', () => {
            if (currentIndex < items.length - 1) {
              currentIndex++;
              updateCarousel();
            }
          });
        }

        dots.forEach(dot => {
          dot.addEventListener('click', () => {
            currentIndex = parseInt(dot.dataset.index);
            updateCarousel();
          });
        });

        updateCarousel();
      });

      // Trending Creators Navigation
      const creatorCards = document.querySelectorAll('.featured-creator-card');
      const totalCreators = creatorCards.length;
      const creatorsPerPage = 3;
      let currentPage = 0;

      function updateCreatorsDisplay() {
        const startIndex = currentPage * creatorsPerPage;
        const endIndex = startIndex + creatorsPerPage;
        creatorCards.forEach((card, index) => {
          card.style.display = (index >= startIndex && index < endIndex) ? 'block' : 'none';
        });
        document.getElementById('prevCreators').style.opacity = currentPage === 0 ? '0.5' : '1';
        document.getElementById('prevCreators').style.pointerEvents = currentPage === 0 ? 'none' : 'auto';
        document.getElementById('nextCreators').style.opacity = endIndex >= totalCreators ? '0.5' : '1';
        document.getElementById('nextCreators').style.pointerEvents = endIndex >= totalCreators ? 'none' : 'auto';
      }

      document.getElementById('prevCreators').addEventListener('click', function() {
        if (currentPage > 0) {
          currentPage--;
          updateCreatorsDisplay();
        }
      });

      document.getElementById('nextCreators').addEventListener('click', function() {
        if ((currentPage + 1) * creatorsPerPage < totalCreators) {
          currentPage++;
          updateCreatorsDisplay();
        }
      });

      updateCreatorsDisplay();
    });
  </script>
</div>