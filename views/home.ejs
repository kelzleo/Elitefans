<!-- views/home.ejs -->
<div class="home-container"
     data-current-user="<%= currentUser ? 'true' : 'false' %>"
     data-env="<%= env %>">
  <!-- Logo Header -->
  <header class="logo-header">
    <a href="/home" class="logo-link">
      <img src="https://storage.googleapis.com/my-public-profile-pictures/logos/elitefans-logo.PNG" alt="EliteFans Logo" class="site-logo">
      <span class="logo-text">EliteFans</span>
    </a>
  </header>

  <!-- Search Section -->
  <div class="search-section">
    <div class="search-icon-container">
      <i class="fa-solid fa-magnifying-glass search-icon"></i>
    </div>
    <div class="search-container" style="display: none;">
      <form class="search-input-form" onsubmit="return false;">
        <input
          type="text"
          name="query"
          placeholder="Search creators..."
          autocomplete="off"
        />
        <button type="submit" class="search-submit-btn"></button>
      </form>
      <div class="suggestions-container" style="display: none;"></div>
    </div>
  </div>

  <!-- Search Results Container -->
  <div class="search-results-container"></div>

  <!-- Feed Mode Container -->
  <div class="feed-mode-container">
    <!-- Trending Creators Section -->
    <% if (featuredCreators && featuredCreators.length > 0) { %>
      <div class="trending-creators-container">
        <h2>Trending Creators</h2>
        <div class="slider-nav left-nav" id="prevCreators">
          <i class="fa-solid fa-chevron-left"></i>
        </div>
        <div class="slider-nav right-nav" id="nextCreators">
          <i class="fa-solid fa-chevron-right"></i>
        </div>
        <div class="trending-creators-list">
          <% featuredCreators.forEach((creator, index) => { %>
            <% let bgImage = creator.coverPhoto ? `${creator.coverPhoto}` : '/Uploads/default-cover.jpg'; %>
            <div class="featured-creator-card" data-index="<%= index %>">
              <div class="creator-card-background" style="background-image: url('<%= bgImage %>');">
                <div class="subscriber-count">
                  <p><%= creator.subscriberCount %> subscriber(s)</p>
                </div>
                <div class="profile-picture-container">
                  <img
                    src="<%= creator.profilePicture || '/Uploads/default-profile-picture.jpg' %>"
                    alt="<%= creator.username %> profile"
                    class="profile-picture"
                  />
                </div>
                <div class="creator-info">
                  <a href="/profile/view/<%= creator._id %>">
                    <strong><%= creator.username %></strong>
                  </a>
                  <% if (creator.profileName) { %>
                    <p><%= creator.profileName %></p>
                  <% } %>
                </div>
              </div>
            </div>
          <% }); %>
        </div>
      </div>
    <% } %>

<!-- Feed: Show Subscribed Posts -->
<div class="feed-container">
  <% if (posts && posts.length > 0) { %>
    <% posts.forEach(post => { %>
      <% if (post.creator) { %>
        <div class="post-card" id="post-<%= post._id %>" data-category="<%= post.category || 'none' %>">
          <% 
            const hasPurchased = currentUser && Array.isArray(currentUser.purchasedContent) && 
              currentUser.purchasedContent.some(function(p) { return p.contentId.toString() === post._id.toString(); });
            const showLocked = post.special && !hasPurchased;
          %>

          <!-- Creator Header (Shown for all posts) -->
          <div class="profile-post-header">
            <div class="profile-creator-info">
              <a href="/profile/<%= post.creator.username %>">
                <img src="<%= post.creator.profilePicture || '/images/default-profile.png' %>" alt="<%= post.creator.username %>'s profile picture" class="creator-profile-pic">
                <div class="profile-name-container">
                  <span class="profile-creator-name">
                    <%= post.creator.profileName || post.creator.username %>
                    <% if (post.creator.role === 'creator') { %>
                      <span class="verified-badge"><i class="fa fa-check-circle"></i></span>
                    <% } %>
                  </span>
                  <span class="profile-username">@<%= post.creator.username %></span>
                </div>
              </a>
            </div>
            <div class="post-menu">
              <button class="post-menu-button" data-post-id="<%= post._id %>" data-username="<%= post.creator.username %>" aria-label="Post options">
                <i class="fa-solid fa-ellipsis"></i>
              </button>
            </div>
          </div>

          <!-- Post Content (Unified for locked and unlocked) -->
          <div class="post-content">
            <% if (post.type === 'text') { %>
              <p class="post-text <%= showLocked ? 'preview-text' : '' %>">
                <%- showLocked ? post.renderedWriteUp.substring(0, 100) + (post.renderedWriteUp.length > 100 ? '...' : '') : post.renderedWriteUp %>
              </p>
            <% } else { %>
              <div class="media-carousel-container <%= showLocked ? 'locked' : '' %>">
                <div class="media-carousel" id="carousel-<%= post._id %>">
                  <% 
                    const mediaItems = post.mediaItems && post.mediaItems.length > 0 ? 
                      post.mediaItems : 
                      (post.contentUrl ? [{ type: post.type, url: post.contentUrl, contentType: post.contentType || 'video/mp4' }] : []);
                  %>
                  <% mediaItems.forEach((media, index) => { %>
                    <div class="carousel-item <%= index === 0 ? 'active' : '' %>">
                      <% if (media.type === 'image') { %>
                        <img src="<%= media.url %>"
                             alt="Post Image"
                             class="post-image <%= showLocked ? 'blurred' : 'fullscreenable' %>"
                             data-fullscreen-src="<%= media.url %>"
                             draggable="false"
                             oncontextmenu="return false;">
                      <% } else if (media.type === 'video') { %>
                        <video
                          class="post-video <%= showLocked ? 'blurred' : '' %> fullscreenable"
                          controlsList="nodownload"
                          data-fullscreen-src="<%= media.url %>"
                          disablePictureInPicture
                          draggable="false"
                          oncontextmenu="return false;"
                          <%= showLocked ? '' : 'controls' %>>
                          <source src="<%= media.url %>" type="<%= media.contentType || 'video/mp4' %>">
                          Your browser does not support the video tag.
                        </video>
                      <% } %>
                    </div>
                  <% }); %>
                </div>
                <% if (mediaItems.length > 1) { %>
                  <div class="carousel-nav">
                    <button class="carousel-prev" data-post-id="<%= post._id %>"><i class="fa-solid fa-chevron-left"></i></button>
                    <div class="carousel-indicators">
                      <% mediaItems.forEach((_, index) => { %>
                        <span class="carousel-dot <%= index === 0 ? 'active' : '' %>" data-index="<%= index %>" data-post-id="<%= post._id %>"></span>
                      <% }); %>
                    </div>
                    <button class="carousel-next" data-post-id="<%= post._id %>"><i class="fa-solid fa-chevron-right"></i></button>
                  </div>
                <% } %>
              </div>
              <% if (post.writeUp) { %>
                <p class="post-writeUp <%= showLocked ? 'preview-text' : '' %>">
                  <%- showLocked ? post.renderedWriteUp.substring(0, 100) + (post.renderedWriteUp.length > 100 ? '...' : '') : post.renderedWriteUp %>
                </p>
              <% } %>
            <% } %>
          </div>

          <!-- Unlock Info (Shown only for locked content) -->
          <% if (showLocked) { %>
            <div class="unlock-info">
              <i class="fa fa-lock"></i>
              <span>Unlock for ₦<%= post.unlockPrice %></span>
              <button class="unlock-button" data-content-id="<%= post._id %>" data-creator-id="<%= post.creator._id %>">Unlock Post</button>
            </div>
          <% } %>

          <!-- Post Metadata and Actions -->
          <% if (post.special) { %>
            <p class="special-indicator">Special Content - Unlock Price: ₦<%= post.unlockPrice %></p>
          <% } %>
          <span class="post-timestamp">
            <%= post.createdAt ? formatRelativeTime(post.createdAt) : 'Unknown time' %>
          </span>
          <div class="post-actions">
            <button class="like-button" data-post-id="<%= post._id %>">
              <i class="fa-solid fa-heart <%= post.likes.includes(currentUser._id) ? 'liked' : '' %>"></i>
              <span class="like-count"><%= post.likes ? post.likes.length : 0 %></span>
            </button>
            <button class="comment-icon" data-post-id="<%= post._id %>">
              <i class="fa-solid fa-comment"></i>
              <span class="comment-count"><%= post.comments ? post.comments.length : 0 %></span>
            </button>
            <% if (currentUser._id.toString() !== post.creator._id.toString()) { %>
              <button class="tip-button" data-post-id="<%= post._id %>" data-creator-id="<%= post.creator._id %>">
                <i class="fa-solid fa-gift"></i>
                Tip (<span class="tip-count"><%= post.totalTips || 0 %></span>)
              </button>
            <% } %>
            <button class="bookmark-button" data-post-id="<%= post._id %>">
              <i class="fa-solid fa-bookmark <%= currentUser.bookmarks && currentUser.bookmarks.some(b => b.toString() === post._id.toString()) ? 'bookmarked' : '' %>"></i>
            </button>
          </div>
          <div class="comments">
            <% if (post.comments && post.comments.length > 0) { %>
              <% post.comments.slice(0, 2).forEach(comment => { %>
                <div class="comment">
                  <strong><%= comment.user ? comment.user.username : 'Deleted User' %>:</strong> <%= comment.text %>
                </div>
              <% }); %>
              <% if (post.comments.length > 2) { %>
                <a href="#" class="view-all-comments">View all <%= post.comments.length %> comments</a>
              <% } %>
            <% } %>
          </div>
          <div class="comment-form-container hidden">
            <form class="comment-form" data-post-id="<%= post._id %>">
              <input type="text" name="comment" placeholder="Write a comment...">
              <button type="submit">Post</button>
            </form>
          </div>
          <% if (currentUser && currentUser._id.toString() === post.creator._id.toString()) { %>
            <form action="/profile/delete-post/<%= post._id %>" method="POST" onsubmit="return confirm('Are you sure you want to delete this post?');" class="delete-post-form">
              <button type="submit" class="delete-post-btn">Delete Post</button>
            </form>
          <% } %>
          <% if (currentUser && currentUser.role === 'admin') { %>
            <form action="/profile/admin-delete-post/<%= post._id %>" method="POST" onsubmit="return confirm('Are you sure you want to delete this post?');" class="delete-post-form">
              <label for="reason-<%= post._id %>">Reason for deletion:</label>
              <input type="text" name="reason" id="reason-<%= post._id %>" required class="form-input">
              <button type="submit" class="delete-post-btn">Delete Post</button>
            </form>
          <% } %>
        </div>
      <% } else { %>
        <p>Post creator not found.</p>
      <% } %>
    <% }); %>
  <% } else { %>
    <p>No posts available.</p>
  <% } %>
</div>

  <!-- Lightbox HTML with custom controls -->
  <div id="lightbox" class="hidden">
    <div id="lb-backdrop"></div>
    <div id="lb-content">
      <button id="lb-close" aria-label="Close fullscreen">×</button>
      <img id="lb-img" class="lb-media" alt="">
      <video id="lb-vid" class="lb-media" controlsList="nodownload noremoteplayback" disablePictureInPicture></video>
      
      <!-- Custom video controls -->
      <div class="custom-controls" id="custom-controls">
        <button class="control-btn" id="play-pause">▶</button>
        <div class="progress-container" id="progress-container">
          <div class="progress-bar" id="progress-bar"></div>
        </div>
        <button class="control-btn" id="mute-unmute">🔊</button>
      </div>
    </div>
  </div>

  <!-- Post Action Modal -->
  <div id="postActionModal" class="post-action-modal hidden">
    <div class="post-action-modal-content">
      <span id="closePostActionModal" class="close-post-action-modal">×</span>
      <ul class="post-action-options">
        <li>
          <button id="sharePostButton" class="post-action-button" data-post-id="">Share Post</button>
        </li>
        <li>
          <button id="reportPostButton" class="post-action-button" data-post-id="">Report Post</button>
        </li>
      </ul>
    </div>
  </div>

  <!-- Post Share Modal -->
  <div id="postShareModal" class="post-share-modal hidden">
    <div class="post-share-modal-content">
      <span id="closePostShareModal" class="close-post-share-modal">×</span>
      <h3>Share Post</h3>
      <div class="post-share-options">
        <button id="copyPostLinkButton" class="post-share-option-button" data-link="">
          <i class="fa fa-copy"></i> Copy Link
        </button>
        <a href="#" id="sharePostTwitter" class="post-share-option-button" target="_blank">
          <i class="fa fa-twitter"></i> Share on Twitter/X
        </a>
        <a href="#" id="sharePostWhatsApp" class="post-share-option-button" target="_blank">
          <i class="fa fa-whatsapp"></i> Share on WhatsApp
        </a>
        <a href="#" id="sharePostTelegram" class="post-share-option-button" target="_blank">
          <i class="fa fa-telegram"></i> Share on Telegram
        </a>
        <a href="#" id="sharePostFacebook" class="post-share-option-button" target="_blank">
          <i class="fa fa-facebook"></i> Share on Facebook
        </a>
        <button id="sharePostNativeButton" class="post-share-option-button hidden">
          <i class="fa fa-share"></i> Share via...
        </button>
      </div>
    </div>
  </div>

  <!-- Report Post Modal -->
  <div id="reportPostModal" class="report-post-modal hidden">
    <div class="report-post-modal-content">
      <span id="closeReportPostModal" class="close-report-post-modal">×</span>
      <h3>Report Post</h3>
      <form id="reportPostForm">
        <label for="reportReason">Reason for Report:</label>
        <select id="reportReason" name="reason" required class="form-select">
          <option value="" disabled selected>Select a reason</option>
          <option value="Violates Elitefans Terms of Service">Violates Elitefans Terms of Service</option>
          <option value="Contains Copyrighted Material (DMCA)">Contains Copyrighted Material (DMCA)</option>
          <option value="Child Sexual Abuse Material (CSAM)">Child Sexual Abuse Material (CSAM)</option>
          <option value="Report Spam">Report Spam</option>
          <option value="Report Abuse">Report Abuse</option>
        </select>
        <label for="reportDetails">Additional Details (optional):</label>
        <textarea id="reportDetails" name="details" placeholder="Provide more details..." class="form-textarea"></textarea>
        <button type="submit" class="report-submit-button">Submit Report</button>
      </form>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const container = document.querySelector('.home-container');
      const isDevEnv = container && container.dataset.env === 'development';
      const isLoggedIn = container && container.dataset.currentUser === 'true';

      const lightbox = document.getElementById('lightbox');
      const lbBackdrop = document.getElementById('lb-backdrop');
      const lbContent = document.getElementById('lb-content');
      const lbClose = document.getElementById('lb-close');
      const lbImg = document.getElementById('lb-img');
      const lbVid = document.getElementById('lb-vid');
      const customControls = document.getElementById('custom-controls');
      const playPauseBtn = document.getElementById('play-pause');
      const progressContainer = document.getElementById('progress-container');
      const progressBar = document.getElementById('progress-bar');
      const muteUnmuteBtn = document.getElementById('mute-unmute');

      // Prevent right-click context menu on the entire lightbox
      lightbox.addEventListener('contextmenu', e => {
        e.preventDefault();
        return false;
      });

      function openLightbox(src, isVideo, time = 0) {
        if (isVideo) {
          lbImg.style.display = 'none';
          lbVid.src = src;
          lbVid.currentTime = time;
          lbVid.style.display = 'block';
          customControls.style.display = 'flex';
          
          // Remove default controls and add our custom attributes
          lbVid.removeAttribute('controls');
          lbVid.setAttribute('controlsList', 'nodownload noremoteplayback');
          lbVid.setAttribute('disablePictureInPicture', '');
          
          // Start with paused state
          updatePlayPauseButton();
          
          // Setup video event listeners
          setupVideoListeners();
          
          // Auto-play if desired
          lbVid.play().catch(e => {
            console.log('Autoplay prevented:', e);
            updatePlayPauseButton();
          });
        } else {
          lbVid.pause();
          lbVid.removeAttribute('src');
          lbVid.style.display = 'none';
          customControls.style.display = 'none';
          lbImg.src = src;
          lbImg.style.display = 'block';
        }
        lightbox.classList.remove('hidden');
        
        // Prevent scrolling on the body when lightbox is open
        document.body.style.overflow = 'hidden';
      }

      function setupVideoListeners() {
        // Update progress bar as video plays
        lbVid.addEventListener('timeupdate', updateProgressBar);
        
        // Update button state on play/pause
        lbVid.addEventListener('play', updatePlayPauseButton);
        lbVid.addEventListener('pause', updatePlayPauseButton);
        
        // Update mute button state
        lbVid.addEventListener('volumechange', updateMuteButton);
      }

      function updateProgressBar() {
        const percentage = (lbVid.currentTime / lbVid.duration) * 100;
        progressBar.style.width = `${percentage}%`;
      }

      function updatePlayPauseButton() {
        playPauseBtn.textContent = lbVid.paused ? '▶' : '⏸';
      }

      function updateMuteButton() {
        muteUnmuteBtn.textContent = lbVid.muted ? '🔇' : '🔊';
      }

      // Play/Pause button functionality
      playPauseBtn.addEventListener('click', () => {
        if (lbVid.paused) {
          lbVid.play();
        } else {
          lbVid.pause();
        }
        updatePlayPauseButton();
      });

      // Progress bar click functionality
      progressContainer.addEventListener('click', (e) => {
        const rect = progressContainer.getBoundingClientRect();
        const pos = (e.clientX - rect.left) / rect.width;
        lbVid.currentTime = pos * lbVid.duration;
      });

      // Mute/Unmute button functionality
      muteUnmuteBtn.addEventListener('click', () => {
        lbVid.muted = !lbVid.muted;
        updateMuteButton();
      });

      // Attach to every fullscreenable media
      document.querySelectorAll('.fullscreenable').forEach(el => {
        el.style.cursor = 'zoom-in';
        el.addEventListener('click', e => {
          e.preventDefault();
          e.stopPropagation();
          const src = el.dataset.fullscreenSrc || el.src || el.currentSrc;
          if (!src) return;
          const isVideo = el.tagName.toLowerCase() === 'video';
          const time = isVideo ? el.currentTime : 0;
          openLightbox(src, isVideo, time);
        });
      });

      // Close handlers
      function close() {
        lightbox.classList.add('hidden');
        lbVid.pause();
        lbVid.removeAttribute('src');
        lbImg.removeAttribute('src');
        
        // Re-enable scrolling on the body
        document.body.style.overflow = '';
        
        // Remove video event listeners to prevent memory leaks
        lbVid.removeEventListener('timeupdate', updateProgressBar);
        lbVid.removeEventListener('play', updatePlayPauseButton);
        lbVid.removeEventListener('pause', updatePlayPauseButton);
        lbVid.removeEventListener('volumechange', updateMuteButton);
      }
      
      lbClose.addEventListener('click', close);
      lbBackdrop.addEventListener('click', close);
      document.addEventListener('keydown', e => {
        if (e.key === 'Escape') close();
      });

      // Prevent keyboard shortcuts that might enable download or control features
      lightbox.addEventListener('keydown', e => {
        // Prevent common keyboard shortcuts
        if (e.ctrlKey || e.metaKey) {
          // Prevent Ctrl+S, Ctrl+P, etc.
          e.preventDefault();
          return false;
        }
      });

      // --- Search Functionality ---
      const searchIcon = document.querySelector('.search-icon');
      const searchIconContainer = document.querySelector('.search-icon-container');
      const searchContainer = document.querySelector('.search-container');
      const searchInput = document.querySelector('.search-input-form input[name="query"]');
      const searchForm = document.querySelector('.search-input-form');
      const suggestionsContainer = document.querySelector('.suggestions-container');
      const searchResultsContainer = document.querySelector('.search-results-container');
      const feedModeContainer = document.querySelector('.feed-mode-container');
      let debounceTimeout;

      searchIcon.addEventListener('click', function () {
        if (searchContainer.style.display === 'none') {
          searchContainer.style.display = 'block';
          searchIconContainer.style.display = 'none';
          searchInput.focus();
        } else {
          searchContainer.style.display = 'none';
          searchIconContainer.style.display = 'block';
          suggestionsContainer.style.display = 'none';
        }
      });

      document.addEventListener('click', function (e) {
        if (
          !searchContainer.contains(e.target) &&
          !searchIcon.contains(e.target) &&
          searchContainer.style.display === 'block'
        ) {
          searchContainer.style.display = 'none';
          searchIconContainer.style.display = 'block';
          suggestionsContainer.style.display = 'none';
        }
      });

      async function fetchSearchResults(query) {
        try {
          const response = await fetch(`/home/search-creators?query=${encodeURIComponent(query)}`, {
            credentials: 'include'
          });
          if (!response.ok) throw new Error(`Failed to fetch search results: ${response.status}`);
          const data = await response.json();
          feedModeContainer.style.display = 'none';
          searchResultsContainer.style.display = 'block';
          searchResultsContainer.innerHTML = data.creators && data.creators.length > 0
            ? `<h1>Search Results for "${query}"</h1>
               ${data.creators.map(creator => `
                 <div class="creator-result">
                   <img src="${creator.profilePicture || '/Uploads/default-profile-picture.jpg'}" alt="${creator.username}" class="creator-profile-pic" style="width: 40px; height: 40px; border-radius: 50%; object-fit: cover;" />
                   <div class="creator-info">
                     <a href="/profile/view/${creator._id}"><strong>${creator.username}</strong></a>
                     ${creator.profileName ? `<p>${creator.profileName}</p>` : ''}
                     <p>${creator.subscriberCount || 0} subscriber(s)</p>
                   </div>
                 </div>
               `).join('')}`
            : `<h1>Search Results for "${query}"</h1><p>No matching creators found.</p>`;
        } catch (error) {
          if (isDevEnv) console.error('Error fetching search results:', error.message);
          searchResultsContainer.innerHTML = `<p>Error fetching search results. Please try again.</p>`;
        }
      }

      searchInput.addEventListener('input', function () {
        clearTimeout(debounceTimeout);
        const query = this.value.trim();
        if (query.length === 0) {
          suggestionsContainer.style.display = 'none';
          suggestionsContainer.innerHTML = '';
          feedModeContainer.style.display = 'block';
          searchResultsContainer.style.display = 'none';
          return;
        }
        debounceTimeout = setTimeout(async () => {
          try {
            const response = await fetch(`/home/search-suggestions?query=${encodeURIComponent(query)}`, {
              credentials: 'include'
            });
            if (!response.ok) throw new Error(`Failed to fetch suggestions: ${response.status}`);
            const data = await response.json();
            suggestionsContainer.style.display = 'block';
            suggestionsContainer.innerHTML = data.creators && data.creators.length > 0
              ? data.creators.map(creator => `
                  <div class="creator-result suggestion-item" data-user-id="${creator._id}">
                    <img src="${creator.profilePicture || '/Uploads/default-profile-picture.jpg'}" alt="${creator.username}" class="creator-profile-pic" style="width: 30px; height: 30px; border-radius: 50%; object-fit: cover;" />
                    <div class="creator-info">
                      <a href="/profile/view/${creator._id}" class="suggestion-link"><strong>${creator.username}</strong></a>
                      ${creator.profileName ? `<p>${creator.profileName}</p>` : ''}
                      <p>${creator.subscriberCount || 0} subscriber(s)</p>
                    </div>
                  </div>
                `).join('')
              : '<div class="no-suggestions">No suggestion result</div>';
            document.querySelectorAll('.suggestion-item').forEach(item => {
              item.addEventListener('click', function (e) {
                e.preventDefault();
                const userId = this.dataset.userId;
                window.location.href = `/profile/view/${userId}`;
                suggestionsContainer.style.display = 'none';
                searchContainer.style.display = 'none';
                searchIconContainer.style.display = 'block';
              });
            });
          } catch (error) {
            if (isDevEnv) console.error('Error fetching suggestions:', error.message);
            suggestionsContainer.style.display = 'block';
            suggestionsContainer.innerHTML = '<div class="no-suggestions">Error fetching suggestions.</div>';
          }
        }, 300);
      });

      searchForm.addEventListener('submit', function (e) {
        e.preventDefault();
        const query = searchInput.value.trim();
        if (query.length > 0) {
          fetchSearchResults(query);
          searchContainer.style.display = 'none';
          searchIconContainer.style.display = 'block';
          suggestionsContainer.style.display = 'none';
        }
      });

      // --- Unlock Special Content ---
      document.querySelectorAll('.unlock-button').forEach(button => {
        button.addEventListener('click', async function(e) {
          e.preventDefault();
          e.stopPropagation();
          const contentId = this.dataset.contentId;
          const creatorId = this.dataset.creatorId;
          const originalText = this.textContent;
          this.textContent = 'Processing...';
          this.disabled = true;
          try {
            const response = await fetch('/profile/unlock-special-content', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ contentId, creatorId })
            });
            const result = await response.json();
            if (response.ok && result.status === 'success' && result.data.paymentLink) {
              this.textContent = 'Redirecting...';
              window.location.href = result.data.paymentLink;
            } else {
              alert(result.message || 'Failed to initialize payment.');
              this.textContent = originalText;
              this.disabled = false;
            }
          } catch (error) {
            if (isDevEnv) console.error('Error unlocking content:', error.message);
            alert('Error unlocking.');
            this.textContent = originalText;
            this.disabled = false;
          }
        });
      });

      // --- Like Button ---
      document.querySelectorAll('.like-button').forEach(button => {
        button.addEventListener('click', async function() {
          const postId = this.dataset.postId;
          const likeIcon = this.querySelector('i');
          const likeCountSpan = this.querySelector('.like-count');
          try {
            const res = await fetch('/profile/posts/' + postId + '/like', { method: 'POST' });
            const data = await res.json();
            if (res.ok) {
              likeCountSpan.textContent = data.likes;
              likeIcon.classList.toggle('liked', data.userLiked);
            } else {
              alert(data.message || 'Could not like post.');
            }
          } catch (error) {
            if (isDevEnv) console.error('Error liking post:', error.message);
            alert('Error liking post.');
          }
        });
      });

      // --- Comment Icon Toggle ---
      document.querySelectorAll('.comment-icon').forEach(button => {
        button.addEventListener('click', function() {
          const parentElement = this.closest('.post-card');
          if (!parentElement) {
            if (isDevEnv) console.warn('Parent element not found for comment icon');
            return;
          }
          const commentContainer = parentElement.querySelector('.comment-form-container');
          if (!commentContainer) {
            if (isDevEnv) console.warn('Comment form container not found');
            return;
          }
          const isHidden = commentContainer.classList.contains('hidden');
          commentContainer.classList.toggle('hidden');
          if (isHidden) {
            const input = commentContainer.querySelector('input[name="comment"]');
            if (input) input.focus();
          }
        });
      });

      // --- Comment Form Submit ---
      document.querySelectorAll('.comment-form').forEach(form => {
        form.addEventListener('submit', async function(e) {
          e.preventDefault();
          const postId = this.dataset.postId;
          const commentInput = this.querySelector('input[name="comment"]');
          const commentText = commentInput.value.trim();
          const submitButton = this.querySelector('button[type="submit"]');
          if (!commentText) return;
          const originalButtonText = submitButton.textContent;
          submitButton.textContent = 'Posting...';
          submitButton.disabled = true;
          try {
            const res = await fetch('/profile/posts/' + postId + '/comment', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ text: commentText })
            });
            if (res.ok) {
              const data = await res.json();
              const parentElement = this.closest('.post-card');
              const commentsDiv = parentElement.querySelector('.comments');
              const newCommentDiv = document.createElement('div');
              newCommentDiv.classList.add('comment');
              const username = data.comment && data.comment.user ? data.comment.user.username : 'You';
              newCommentDiv.innerHTML = `<strong>${username}:</strong> ${data.comment.text}`;
              const viewAllLink = commentsDiv.querySelector('.view-all-comments');
              if (viewAllLink) {
                commentsDiv.insertBefore(newCommentDiv, viewAllLink);
              } else {
                commentsDiv.appendChild(newCommentDiv);
              }
              const commentCountSpan = parentElement.querySelector('.comment-count');
              if (commentCountSpan && data.commentCount !== undefined) commentCountSpan.textContent = data.commentCount;
              commentInput.value = '';
              this.closest('.comment-form-container').classList.add('hidden');
            } else {
              const data = await res.json();
              alert(data.message || 'Failed to post comment.');
            }
          } catch (error) {
            if (isDevEnv) console.error('Error posting comment:', error.message);
            alert('Error posting comment.');
          } finally {
            submitButton.textContent = originalButtonText;
            submitButton.disabled = false;
          }
        });
      });

      // --- Bookmark Button ---
      document.querySelectorAll('.bookmark-button').forEach(button => {
        button.addEventListener('click', async function() {
          const postId = this.dataset.postId;
          const bookmarkIcon = this.querySelector('i');
          try {
            const res = await fetch('/profile/posts/' + postId + '/bookmark', { method: 'POST' });
            const data = await res.json();
            if (res.ok) {
              bookmarkIcon.classList.toggle('bookmarked', data.isBookmarked);
            } else {
              alert(data.message || 'Could not bookmark post.');
            }
          } catch (error) {
            if (isDevEnv) console.error('Error bookmarking post:', error.message);
            alert('Error bookmarking post.');
          }
        });
      });

      // --- Tip Button ---
      document.querySelectorAll('.tip-button').forEach(button => {
        button.addEventListener('click', async function() {
          const postId = this.dataset.postId;
          const creatorId = this.dataset.creatorId;
          let tipAmountNum = NaN;
          while (isNaN(tipAmountNum) || tipAmountNum <= 0) {
            const tipAmountStr = prompt("Enter tip amount in NGN (e.g., 500):");
            if (tipAmountStr === null) return;
            tipAmountNum = parseFloat(tipAmountStr);
            if (isNaN(tipAmountNum) || tipAmountNum <= 0) alert("Please enter a valid positive number.");
          }
          const originalHtml = this.innerHTML;
          this.innerHTML = 'Processing...';
          this.disabled = true;
          try {
            const response = await fetch('/profile/posts/' + postId + '/tip', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ tipAmount: tipAmountNum, creatorId })
            });
            const result = await response.json();
            if (response.ok && result.status === 'success' && result.data.paymentLink) {
              this.innerHTML = 'Redirecting...';
              window.location.href = result.data.paymentLink;
            } else {
              alert(result.message || 'Failed to initialize tip payment.');
              this.innerHTML = originalHtml;
              this.disabled = false;
            }
          } catch (error) {
            if (isDevEnv) console.error('Error processing tip:', error.message);
            alert('Error processing tip.');
            this.innerHTML = originalHtml;
            this.disabled = false;
          }
        });
      });

      // --- Post Action Modal ---
      const postMenuButtons = document.querySelectorAll('.post-menu-button');
      const postActionModal = document.getElementById('postActionModal');
      const closePostActionModal = document.getElementById('closePostActionModal');
      const sharePostButton = document.getElementById('sharePostButton');
      const reportPostButton = document.getElementById('reportPostButton');
      const postShareModal = document.getElementById('postShareModal');
      const closePostShareModal = document.getElementById('closePostShareModal');
      const copyPostLinkButton = document.getElementById('copyPostLinkButton');
      const sharePostTwitter = document.getElementById('sharePostTwitter');
      const sharePostWhatsApp = document.getElementById('sharePostWhatsApp');
      const sharePostTelegram = document.getElementById('sharePostTelegram');
      const sharePostFacebook = document.getElementById('sharePostFacebook');
      const sharePostNativeButton = document.getElementById('sharePostNativeButton');
      const reportPostModal = document.getElementById('reportPostModal');
      const closeReportPostModal = document.getElementById('closeReportPostModal');
      const reportForm = document.getElementById('reportPostForm');

      postMenuButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          const postId = button.dataset.postId;
          const username = button.dataset.username;
          sharePostButton.dataset.postId = postId;
          sharePostButton.dataset.username = username;
          reportPostButton.dataset.postId = postId;
          postActionModal.classList.remove('hidden');
        });
      });

      closePostActionModal.addEventListener('click', () => {
        postActionModal.classList.add('hidden');
      });

      postActionModal.addEventListener('click', (e) => {
        if (e.target === postActionModal) {
          postActionModal.classList.add('hidden');
        }
      });

      sharePostButton.addEventListener('click', function() {
        const postId = this.dataset.postId;
        const username = this.dataset.username;
        const shareLink = `${window.location.origin}/profile/${encodeURIComponent(username)}/post/${postId}`;
        copyPostLinkButton.dataset.link = shareLink;
        sharePostTwitter.href = `https://twitter.com/intent/tweet?url=${encodeURIComponent(shareLink)}&text=Check out this post!`;
        sharePostWhatsApp.href = `https://api.whatsapp.com/send?text=Check out this post: ${encodeURIComponent(shareLink)}`;
        sharePostTelegram.href = `https://t.me/share/url?url=${encodeURIComponent(shareLink)}&text=Check out this post!`;
        sharePostFacebook.href = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareLink)}`;
        sharePostNativeButton.dataset.link = shareLink;
        postActionModal.classList.add('hidden');
        postShareModal.classList.remove('hidden');
      });

      closePostShareModal.addEventListener('click', () => {
        postShareModal.classList.add('hidden');
      });

      postShareModal.addEventListener('click', (e) => {
        if (e.target === postShareModal) {
          postShareModal.classList.add('hidden');
        }
      });

      copyPostLinkButton.addEventListener('click', function() {
        const link = this.dataset.link;
        navigator.clipboard.writeText(link).then(() => {
          alert('Link copied to clipboard!');
        }).catch(err => {
          if (isDevEnv) console.error('Error copying link:', err);
          alert('Failed to copy link.');
        });
      });

      sharePostNativeButton.addEventListener('click', async function() {
        const shareData = {
          title: 'Check out this post!',
          url: this.dataset.link
        };
        try {
          await navigator.share(shareData);
        } catch (err) {
          if (isDevEnv) console.error('Error sharing:', err);
        }
      });

      reportPostButton.addEventListener('click', function() {
        const postId = this.dataset.postId;
        reportForm.dataset.postId = postId;
        postActionModal.classList.add('hidden');
        reportPostModal.classList.remove('hidden');
      });

      closeReportPostModal.addEventListener('click', () => {
        reportPostModal.classList.add('hidden');
      });

      reportPostModal.addEventListener('click', (e) => {
        if (e.target === reportPostModal) {
          reportPostModal.classList.add('hidden');
        }
      });

      reportForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        const postId = this.dataset.postId;
        const reason = document.getElementById('reportReason').value;
        const details = document.getElementById('reportDetails').value;
        const submitButton = this.querySelector('.report-submit-button');
        const originalText = submitButton.textContent;
        submitButton.textContent = 'Submitting...';
        submitButton.disabled = true;
        try {
          const response = await fetch('/profile/report-post', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ postId, reason, details })
          });
          const result = await response.json();
          if (response.ok) {
            alert('Report submitted successfully.');
            reportPostModal.classList.add('hidden');
            this.reset();
          } else {
            alert(result.message || 'Failed to submit report.');
          }
        } catch (error) {
          if (isDevEnv) console.error('Error submitting report:', error.message);
          alert('Error submitting report.');
        } finally {
          submitButton.textContent = originalText;
          submitButton.disabled = false;
        }
      });

      // --- Delete Post Forms ---
      document.querySelectorAll('.delete-post-form').forEach(form => {
        form.addEventListener('submit', async function(e) {
          e.preventDefault();
          const postId = this.action.match(/\/delete-post\/(.+)$/)?.[1] || this.action.match(/\/admin-delete-post\/(.+)$/)?.[1];
          const isAdmin = this.action.includes('admin-delete-post');
          let reason = '';
          if (isAdmin) {
            reason = this.querySelector('input[name="reason"]').value.trim();
            if (!reason) {
              alert('Reason is required for deletion.');
              return;
            }
          }
          if (confirm('Are you sure you want to delete this post?')) {
            try {
              const response = await fetch(this.action, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(isAdmin ? { reason } : {})
              });
              if (response.ok) {
                const postCard = this.closest('.post-card');
                postCard.remove();
                alert('Post deleted successfully.');
              } else {
                const result = await response.json();
                alert(result.message || 'Failed to delete post.');
              }
            } catch (error) {
              if (isDevEnv) console.error('Error deleting post:', error.message);
              alert('Error deleting post.');
            }
          }
        });
      });

      // --- Carousel Navigation ---
      document.querySelectorAll('.media-carousel-container').forEach(container => {
        const postId = container.querySelector('.media-carousel').id.replace('carousel-', '');
        const items = container.querySelectorAll('.carousel-item');
        const prevButton = container.querySelector('.carousel-prev');
        const nextButton = container.querySelector('.carousel-next');
        const dots = container.querySelectorAll('.carousel-dot');
        let currentIndex = 0;

        function updateCarousel() {
          items.forEach((item, index) => {
            item.classList.toggle('active', index === currentIndex);
          });
          dots.forEach((dot, index) => {
            dot.classList.toggle('active', index === currentIndex);
          });
          if (prevButton && nextButton) {
            prevButton.disabled = currentIndex === 0;
            nextButton.disabled = currentIndex === items.length - 1;
          }
        }

        if (prevButton) {
          prevButton.addEventListener('click', () => {
            if (currentIndex > 0) {
              currentIndex--;
              updateCarousel();
            }
          });
        }

        if (nextButton) {
          nextButton.addEventListener('click', () => {
            if (currentIndex < items.length - 1) {
              currentIndex++;
              updateCarousel();
            }
          });
        }

        dots.forEach(dot => {
          dot.addEventListener('click', () => {
            currentIndex = parseInt(dot.dataset.index);
            updateCarousel();
          });
        });

        updateCarousel();
      });

      // --- Trending Creators Navigation ---
      const creatorCards = document.querySelectorAll('.featured-creator-card');
      const totalCreators = creatorCards.length;
      const creatorsPerPage = 3;
      let currentPage = 0;

      function updateCreatorsDisplay() {
        const startIndex = currentPage * creatorsPerPage;
        const endIndex = startIndex + creatorsPerPage;
        creatorCards.forEach((card, index) => {
          card.style.display = (index >= startIndex && index < endIndex) ? 'block' : 'none';
        });
        document.getElementById('prevCreators').style.opacity = currentPage === 0 ? '0.5' : '1';
        document.getElementById('prevCreators').style.pointerEvents = currentPage === 0 ? 'none' : 'auto';
        document.getElementById('nextCreators').style.opacity = endIndex >= totalCreators ? '0.5' : '1';
        document.getElementById('nextCreators').style.pointerEvents = endIndex >= totalCreators ? 'none' : 'auto';
      }

      document.getElementById('prevCreators').addEventListener('click', function() {
        if (currentPage > 0) {
          currentPage--;
          updateCreatorsDisplay();
        }
      });

      document.getElementById('nextCreators').addEventListener('click', function() {
        if ((currentPage + 1) * creatorsPerPage < totalCreators) {
          currentPage++;
          updateCreatorsDisplay();
        }
      });

      updateCreatorsDisplay();
    });
  </script>
</div>