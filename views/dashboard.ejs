<!-- views/dashboard.ejs -->
<div class="dashboard-container">
  <h1>Dashboard</h1>

  <% if (role === 'creator') { %>
    <h2>Creator Dashboard</h2>

    <!-- Aggregated Stats -->
    <div class="stats-container">
      <p class="stat-item">Total Subscription Revenue: ₦<%= totalSubscription %></p>
      <p class="stat-item">Total Special Content Revenue: ₦<%= totalSpecial %></p>
      <p class="stat-item">Total Tips Received: ₦<%= totalTips %></p>
      <p class="stat-item" style="margin-top: 10px;">
        <strong>Total Revenue (aggregated):</strong> ₦<%= totalSubscription + totalSpecial + totalTips %>
      </p>
    </div>
    

    <!-- Real Available Balance -->
    <p><strong>Your Available Balance:</strong> ₦<span id="availableBalance"><%= totalEarnings %></span></p>

    <!-- Saved Banks -->
    <div class="saved-banks-section">
      <h3>Your Saved Banks</h3>
      <% if (user.banks && user.banks.length > 0) { %>
        <ul>
          <% user.banks.forEach((bank, idx) => { %>
            <li>
              <strong><%= bank.bankName %></strong> (Acct: <%= bank.accountNumber %>)
              <!-- If you want a remove button, do it here -->
            </li>
          <% }); %>
        </ul>
      <% } else { %>
        <p>No banks saved yet.</p>
      <% } %>
    </div>

    <!-- Add Bank Form -->
    <div class="bank-details-form">
      <h3>Add a New Bank</h3>
      <form id="add-bank-form">
        <label for="bankName">Bank Name:</label>
        <select id="bankName" name="bankName" required>
          <option value="">-- Select Bank --</option>
          <option value="Access Bank">Access Bank</option>
          <option value="ALAT by Wema">ALAT by Wema</option>
          <option value="Citibank Nigeria">Citibank Nigeria</option>
          <option value="Ecobank Nigeria">Ecobank Nigeria</option>
          <option value="Fidelity Bank">Fidelity Bank</option>
          <option value="First Bank of Nigeria">First Bank of Nigeria</option>
          <option value="First City Monument Bank (FCMB)">First City Monument Bank (FCMB)</option>
          <option value="Globus Bank">Globus Bank</option>
          <option value="Guaranty Trust Bank (GTBank)">Guaranty Trust Bank (GTBank)</option>
          <option value="Heritage Bank">Heritage Bank</option>
          <option value="Jaiz Bank">Jaiz Bank</option>
          <option value="Keystone Bank">Keystone Bank</option>
          <option value="Kuda Bank">Kuda Bank</option>
          <option value="Moniepoint Microfinance Bank">Moniepoint Microfinance Bank</option>
          <option value="OPay">OPay</option>
          <option value="Palmpay">Palmpay</option>
          <option value="Parallex Bank">Parallex Bank</option>
          <option value="Polaris Bank">Polaris Bank</option>
          <option value="PremiumTrust Bank">PremiumTrust Bank</option>
          <option value="Providus Bank">Providus Bank</option>
          <option value="Stanbic IBTC Bank">Stanbic IBTC Bank</option>
          <option value="Standard Chartered Bank">Standard Chartered Bank</option>
          <option value="Sterling Bank">Sterling Bank</option>
          <option value="SunTrust Bank">SunTrust Bank</option>
          <option value="Titan Trust Bank">Titan Trust Bank</option>
          <option value="Union Bank of Nigeria">Union Bank of Nigeria</option>
          <option value="United Bank for Africa (UBA)">United Bank for Africa (UBA)</option>
          <option value="Unity Bank">Unity Bank</option>
          <option value="Wema Bank">Wema Bank</option>
          <option value="Zenith Bank">Zenith Bank</option>
          <!-- Add more if needed -->
        </select>

        <label for="accountNumber">Account Number:</label>
        <input type="text" id="accountNumber" name="accountNumber" placeholder="1234567890" required>

        <button type="submit">Add Bank</button>
      </form>
      <p id="add-bank-msg"></p>
    </div>

    <!-- Withdraw Section -->
    <div class="withdraw-section" style="margin-top: 30px;">
      <h3>Withdraw</h3>
      <p>Minimum withdrawable balance: ₦1000</p>

      <!-- If user has banks, let them pick one to withdraw to -->
      <% if (user.banks && user.banks.length > 0) { %>
        <label for="withdrawBank">Choose a Bank:</label>
        <select id="withdrawBank">
          <% user.banks.forEach((bank) => { %>
            <!-- Using the array subdoc _id as the value -->
            <option value="<%= bank._id %>">
              <%= bank.bankName %> (Acct: <%= bank.accountNumber %>)
            </option>
          <% }); %>
        </select>
      <% } else { %>
        <p>You have no saved banks. Please add one first.</p>
      <% } %>

      <br><br>

      <label for="withdrawAmount">Withdrawal Amount (NGN):</label>
      <input type="number" id="withdrawAmount" min="1000" step="100" />

      <button id="withdraw-btn" disabled>Withdraw Now</button>
      <p id="withdraw-msg"></p>
    </div>

    <!-- Transaction History -->
    <h3 class="transaction-history-title">Transaction History</h3>
    <ul class="transactions-list">
      <% transactions.forEach(tx => { %>
        <li>
          <div class="transaction-date">
            Date: <%= tx.createdAt.toLocaleString() %>
          </div>
          <p>From (User): <%= tx.user?.username || 'Unknown' %></p>
          <p>Type: <%= tx.type %></p>
          <p class="transaction-amount">Amount: ₦<%= tx.amount %></p>
          <% if (tx.type === 'special') { %>
            <p>Post: <%= tx.post?.writeUp || '(No caption)' %></p>
          <% } else { %>
            <p>Subscription Bundle: <%= tx.subscriptionBundle?.description || 'No description' %></p>
          <% } %>
        </li>
      <% }); %>
    </ul>

  <% } else { %>
    <!-- USER DASHBOARD (non-creator) -->
    <h2>User Dashboard</h2>
    <div class="stats-container">
      <p class="stat-item">Total Spent on Subscriptions: ₦<%= totalSubscription %></p>
      <p class="stat-item">Total Spent on Special Content: ₦<%= totalSpecial %></p>
      <p class="stat-item" style="margin-top: 10px;">
        <strong>Total Spent:</strong> ₦<%= totalSubscription + totalSpecial %>
      </p>
    </div>

    <h3 class="transaction-history-title">Transaction History</h3>
    <ul class="transactions-list">
      <% transactions.forEach(tx => { %>
        <li>
          <div class="transaction-date">
            Date: <%= tx.createdAt.toLocaleString() %>
          </div>
          <p>To (Creator): <%= tx.creator?.username || 'Unknown' %></p>
          <p>Type: <%= tx.type %></p>
          <p class="transaction-amount">Amount: ₦<%= tx.amount %></p>
          <% if (tx.type === 'special') { %>
            <p>Post: <%= tx.post?.writeUp || '(No caption)' %></p>
          <% } else { %>
            <p>Subscription Bundle: <%= tx.subscriptionBundle?.description || 'No description' %></p>
          <% } %>
        </li>
      <% }); %>
    </ul>
  <% } %>
</div>

<script>
  // Enable or disable the Withdraw button based on availableBalance
  const availableBalance = parseFloat(document.getElementById('availableBalance')?.innerText || 0);
  const withdrawBtn = document.getElementById('withdraw-btn');
  if (withdrawBtn && availableBalance >= 1000) {
    withdrawBtn.disabled = false;
  }

  // Handle Add Bank Form
  const addBankForm = document.getElementById('add-bank-form');
  if (addBankForm) {
    addBankForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const bankName = document.getElementById('bankName').value;
      const accountNumber = document.getElementById('accountNumber').value;

      try {
        const res = await fetch('/dashboard/add-bank', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ bankName, accountNumber })
        });
        const data = await res.json();
        document.getElementById('add-bank-msg').innerText = data.message || 'Error';

        if (data.message === 'Bank added successfully!') {
          // Reload to see the new bank in the list
          setTimeout(() => location.reload(), 1500);
        }
      } catch (error) {
        console.error('Error adding bank:', error);
        document.getElementById('add-bank-msg').innerText = 'Error adding bank.';
      }
    });
  }

  // Handle Withdraw
  if (withdrawBtn) {
    withdrawBtn.addEventListener('click', async () => {
      const bankSelect = document.getElementById('withdrawBank');
      const bankId = bankSelect ? bankSelect.value : null;
      const amountInput = document.getElementById('withdrawAmount');
      const withdrawAmount = parseFloat(amountInput.value);

      try {
        const res = await fetch('/dashboard/withdraw', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ amount: withdrawAmount, bankId })
        });
        const data = await res.json();
        document.getElementById('withdraw-msg').innerText = data.message || 'Error';

        if (data.message === 'Withdrawal successful!') {
          setTimeout(() => location.reload(), 1500);
        }
      } catch (error) {
        console.error('Error withdrawing:', error);
        document.getElementById('withdraw-msg').innerText = 'Error withdrawing funds.';
      }
    });
  }
</script>
