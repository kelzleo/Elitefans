<!-- views/single-post.ejs -->
<div class="single-post-container" style="max-width: 600px; margin: auto; padding: 20px;">
  <!-- Header: Creator's profile pic and username -->
  <div class="post-header" style="display: flex; align-items: center; margin-bottom: 20px;">
    <img 
      src="<%= post.creator.profilePicture || '/uploads/default-profile-picture.jpg' %>" 
      alt="<%= post.creator.username %>'s profile picture" 
      class="creator-profile-pic" 
      style="width: 40px; height: 40px; border-radius: 50%; object-fit: cover; margin-right: 10px;"
    />
    <a href="/profile/view/<%= post.creator._id %>" class="creator-name" style="text-decoration: none; color: inherit;">
      <strong><%= post.creator.username %></strong>
    </a>
  </div>

  <!-- Post Content -->
  <div class="post-content">
    <% if (post.type === 'image') { %>
      <% if (post.special && post.locked) { %>
        <!-- Locked image display -->
        <div class="locked-image-container" style="position: relative;">
          <img src="https://placehold.co/300x200/ff69b4/ffffff?text=Locked+Content" alt="Locked Image" class="post-image" style="width: 100%;">
          <div class="unlock-overlay" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; display: flex; flex-direction: column; align-items: center; justify-content: center; background: rgba(0,0,0,0.5); color: white; font-size: 1.2em;">
            <div>Pay to unlock</div>
            <button class="unlock-button" data-content-id="<%= post._id %>" data-creator-id="<%= post.creator._id %>" style="margin-top: 10px; padding: 8px 16px;">Unlock</button>
          </div>
        </div>
      <% } else { %>
        <img src="<%= post.contentUrl %>" alt="Post Image" class="post-image" style="width: 100%;">
      <% } %>
    <% } else if (post.type === 'video') { %>
      <% if (post.special && post.locked) { %>
        <!-- Locked video display -->
        <div class="locked-video-container" style="position: relative;">
          <img src="https://placehold.co/300x200/ff69b4/ffffff?text=Locked+Video" alt="Locked Video" class="post-image" style="width: 100%;">
          <div class="unlock-overlay" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; display: flex; flex-direction: column; align-items: center; justify-content: center; background: rgba(0,0,0,0.5); color: white; font-size: 1.2em;">
            <div>Pay to unlock</div>
            <button class="unlock-button" data-content-id="<%= post._id %>" data-creator-id="<%= post.creator._id %>" style="margin-top: 10px; padding: 8px 16px;">Unlock</button>
          </div>
        </div>
      <% } else { %>
        <video controls class="post-video" style="width: 100%;">
          <source src="<%= post.contentUrl %>" type="video/mp4">
          Your browser does not support the video tag.
        </video>
      <% } %>
    <% } else if (post.type === 'text') { %>
      <p class="post-text"><%= post.writeUp %></p>
    <% } %>
    
    <!-- Optional write-up for non-text posts -->
    <% if (post.writeUp && post.type !== 'text') { %>
      <p class="post-writeUp" style="margin-top: 10px;"><%= post.writeUp %></p>
    <% } %>
  </div>

  <!-- Interactive Elements arranged in a flex row -->
  <div class="post-footer" style="margin-top: 20px; display: flex; flex-direction: row; align-items: center; justify-content: space-around;">
    <!-- Like Button -->
    <button class="like-button" data-post-id="<%= post._id %>" style="display: flex; align-items: center; gap: 5px;">
      <i class="fa-solid fa-heart"></i>
      <span class="like-count"><%= post.likes ? post.likes.length : 0 %></span>
    </button>

    <!-- Comment Icon (toggles comment form) -->
    <button class="comment-icon" data-post-id="<%= post._id %>" style="display: flex; align-items: center; gap: 5px;">
      <i class="fa-solid fa-comment"></i>
      <span class="comment-count"><%= post.comments ? post.comments.length : 0 %></span>
    </button>

    <!-- Tip Button: only display if currentUser exists and is not the creator -->
    <% if (typeof currentUser !== 'undefined' && currentUser._id.toString() !== post.creator._id.toString()) { %>
      <button class="tip-button" data-post-id="<%= post._id %>" data-creator-id="<%= post.creator._id %>" style="display: flex; align-items: center; gap: 5px;">
        <i class="fa-solid fa-gift"></i>
        Tip (<span class="tip-count"><%= post.totalTips || 0 %></span>)
      </button>
    <% } %>
  </div>

  <!-- Comments Section -->
  <div class="comments-section" style="margin-top: 20px;">
    <h4>Comments</h4>
    <div class="comments">
      <% if (post.comments && post.comments.length > 0) { %>
        <% post.comments.forEach(comment => { %>
          <div class="comment">
            <strong><%= comment.user.username %>:</strong> <%= comment.text %>
          </div>
        <% }); %>
      <% } else { %>
        <p>No comments yet.</p>
      <% } %>
    </div>
    <!-- Hidden Inline Comment Form Container -->
    <div class="comment-form-container" style="display: none; margin-top: 10px;">
      <form class="comment-form" data-post-id="<%= post._id %>">
        <input type="text" name="comment" placeholder="Write your comment..." style="width: 80%; padding: 5px;">
        <button type="submit" style="padding: 5px 10px;">Comment</button>
      </form>
    </div>
  </div>
</div>

<script>
  // Like button functionality
  document.querySelectorAll('.like-button').forEach(button => {
    button.addEventListener('click', async function () {
      const postId = this.dataset.postId;
      try {
        const res = await fetch('/profile/posts/' + postId + '/like', { method: 'POST' });
        const data = await res.json();
        if (res.ok) {
          this.querySelector('.like-count').textContent = data.likes;
        } else {
          alert(data.message);
        }
      } catch (error) {
        console.error('Error:', error);
        alert('An error occurred while liking the post.');
      }
    });
  });

  // Comment icon functionality: toggle the inline comment form
  document.querySelectorAll('.comment-icon').forEach(button => {
    button.addEventListener('click', function() {
      const postId = this.dataset.postId;
      const postContainer = this.closest('.single-post-container');
      if (!postContainer) {
        console.error("Could not find container for post:", postId);
        return;
      }
      const commentContainer = postContainer.querySelector('.comment-form-container');
      if (!commentContainer) {
        console.error("No comment-form-container found for post:", postId);
        return;
      }
      // Toggle display
      if (commentContainer.style.display === 'block') {
        commentContainer.style.display = 'none';
      } else {
        commentContainer.style.display = 'block';
        const input = commentContainer.querySelector('input[name="comment"]');
        if (input) input.focus();
      }
    });
  });

  // Comment form functionality
  document.querySelectorAll('.comment-form').forEach(form => {
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      const postId = this.dataset.postId;
      const commentText = this.comment.value.trim();
      if (!commentText) return;
      try {
        const res = await fetch('/profile/posts/' + postId + '/comment', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ text: commentText })
        });
        if (res.ok) {
          location.reload();
        } else {
          const data = await res.json();
          alert(data.message);
        }
      } catch (error) {
        console.error('Error:', error);
        alert('An error occurred while submitting your comment.');
      }
    });
  });

  // Unlock button functionality
  document.querySelectorAll('.unlock-button').forEach(button => {
    button.addEventListener('click', async function() {
      const contentId = this.dataset.contentId;
      const creatorId = this.dataset.creatorId;
      const originalText = this.textContent;
      this.textContent = 'Processing...';
      this.disabled = true;
      try {
        const response = await fetch('/profile/unlock-special-content', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ contentId, creatorId })
        });
        const result = await response.json();
        if (response.ok && result.status === 'success' && result.data.paymentLink) {
          window.location.href = result.data.paymentLink;
        } else {
          alert(result.message || 'Failed to initialize payment');
          this.textContent = originalText;
          this.disabled = false;
        }
      } catch (error) {
        console.error('Error:', error);
        alert('An error occurred while processing your request');
        this.textContent = originalText;
        this.disabled = false;
      }
    });
  });

  // Tip button functionality
  document.querySelectorAll('.tip-button').forEach(button => {
    button.addEventListener('click', async function() {
      const tipAmount = prompt("Enter tip amount in NGN:");
      if (!tipAmount) return;
      const postId = this.dataset.postId;
      const creatorId = this.dataset.creatorId;
      const originalText = this.textContent;
      this.textContent = 'Processing...';
      this.disabled = true;
      try {
        const response = await fetch('/profile/posts/' + postId + '/tip', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ tipAmount })
        });
        const result = await response.json();
        if (response.ok && result.status === 'success' && result.data.paymentLink) {
          window.location.href = result.data.paymentLink;
        } else {
          alert(result.message || 'Failed to initialize tip payment');
          this.textContent = originalText;
          this.disabled = false;
        }
      } catch (error) {
        console.error('Error:', error);
        alert('An error occurred while processing your tip');
        this.textContent = originalText;
        this.disabled = false;
      }
    });
  });
</script>
