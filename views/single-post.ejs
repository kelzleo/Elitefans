 <!-- Flash Messages -->
 <% if (flashMessages.success_msg) { %>
  <div class="flash-message success"><%= flashMessages.success_msg %></div>
<% } %>
<% if (flashMessages.error_msg) { %>
  <div class="flash-message error"><%= flashMessages.error_msg %></div>
<% } %>

<!-- Container -->
<div class="home-container" data-env="<%= env %>" data-username="<%= user.username %>">
  <!-- Single Post -->
  <div class="feed-container">
    <div class="post-card">
      <div class="post-header">
        <img
          src="<%= post.creator.profilePicture || '/Uploads/default-profile-picture.jpg' %>"
          alt="<%= post.creator.username %> profile"
          class="creator-profile-pic"
        />
        <a href="/profile/view/<%= post.creator._id %>" class="creator-name">
          <%= post.creator.username %>
        </a>
        <span class="post-timestamp">
          <%= new Date(post.createdAt).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric', hour12: true }) %>
        </span>
        <div class="post-menu">
          <button class="post-menu-button" data-post-id="<%= post._id %>">
            <i class="fa-solid fa-ellipsis"></i>
          </button>
        </div>
      </div>
      <div class="post-body">
        <!-- Handle Posts with mediaItems (New Schema) -->
        <% if (post.mediaItems && post.mediaItems.length > 0) { %>
          <% if (post.special && !isSubscribed && !currentUser?._id.equals(post.creator._id) && !adminView) { %>
            <div class="locked-media-container" style="position: relative;">
              <img
                src="https://placehold.co/300x200/ff69b4/ffffff?text=Locked+Content"
                alt="Locked Media"
                class="post-image"
              />
              <div class="unlock-overlay">
                <div>Pay to unlock</div>
                <button
                  class="unlock-button"
                  data-content-id="<%= post._id %>"
                  data-creator-id="<%= post.creator._id %>"
                >
                  Unlock
                </button>
              </div>
            </div>
          <% } else { %>
            <div class="media-carousel-container">
              <div class="media-carousel" id="carousel-<%= post._id %>">
                <% post.mediaItems.forEach((item, index) => { %>
                  <div class="carousel-item <%= index === 0 ? 'active' : '' %>">
                    <% if (item.type === 'image') { %>
                      <img
                        src="<%= item.url %>"
                        alt="Post Image"
                        class="post-image fullscreenable"
                        data-fullscreen-src="<%= item.url %>"
                      />
                    <% } else if (item.type === 'video') { %>
                      <video controls class="post-video">
                        <source src="<%= item.url %>" type="<%= item.contentType %>">
                        Your browser does not support the video tag.
                      </video>
                    <% } %>
                  </div>
                <% }); %>
              </div>
              <% if (post.mediaItems.length > 1) { %>
                <div class="carousel-nav">
                  <button class="carousel-prev" data-post-id="<%= post._id %>"><i class="fa-solid fa-chevron-left"></i></button>
                  <div class="carousel-indicators">
                    <% post.mediaItems.forEach((_, index) => { %>
                      <span class="carousel-dot <%= index === 0 ? 'active' : '' %>" data-index="<%= index %>" data-post-id="<%= post._id %>"></span>
                    <% }); %>
                  </div>
                  <button class="carousel-next" data-post-id="<%= post._id %>"><i class="fa-solid fa-chevron-right"></i></button>
                </div>
              <% } %>
            </div>
          <% } %>
        <!-- Handle Legacy Posts (contentUrl) -->
        <% } else if (post.type === 'image') { %>
          <% if (post.special && !isSubscribed && !currentUser?._id.equals(post.creator._id) && !adminView) { %>
            <div class="locked-image-container" style="position: relative;">
              <img
                src="https://placehold.co/300x200/ff69b4/ffffff?text=Locked+Content"
                alt="Locked Image"
                class="post-image"
              />
              <div class="unlock-overlay">
                <div>Pay to unlock</div>
                <button
                  class="unlock-button"
                  data-content-id="<%= post._id %>"
                  data-creator-id="<%= post.creator._id %>"
                >
                  Unlock
                </button>
              </div>
            </div>
          <% } else { %>
            <img
              src="<%= post.contentUrl %>"
              alt="Post Image"
              class="post-image fullscreenable"
              data-fullscreen-src="<%= post.contentUrl %>"
            />
          <% } %>
        <% } else if (post.type === 'video') { %>
          <% if (post.special && !isSubscribed && !currentUser?._id.equals(post.creator._id) && !adminView) { %>
            <div class="locked-video-container" style="position: relative;">
              <img
                src="https://placehold.co/300x200/ff69b4/ffffff?text=Locked+Video"
                alt="Locked Video"
                class="post-image"
              />
              <div class="unlock-overlay">
                <div>Pay to unlock</div>
                <button
                  class="unlock-button"
                  data-content-id="<%= post._id %>"
                  data-creator-id="<%= post.creator._id %>"
                >
                  Unlock
                </button>
              </div>
            </div>
          <% } else { %>
            <video controls class="post-video">
              <source src="<%= post.contentUrl %>" type="video/mp4">
              Your browser does not support the video tag.
            </video>
          <% } %>
        <% } else if (post.type === 'text') { %>
          <p class="post-text"><%= post.writeUp %></p>
        <% } %>
        <% if (post.writeUp && post.type !== 'text') { %>
          <p class="post-text" style="margin-top: 10px;"><%= post.writeUp %></p>
        <% } %>
      </div>
      <div class="post-actions">
        <button class="like-button" data-post-id="<%= post._id %>">
          <i class="fa-solid fa-heart <%= post.likes.includes(currentUser?._id) ? 'liked' : '' %>"></i>
          <span class="like-count"><%= post.likes ? post.likes.length : 0 %></span>
        </button>
        <button class="comment-icon" data-post-id="<%= post._id %>">
          <i class="fa-solid fa-comment"></i>
          <span class="comment-count"><%= post.comments ? post.comments.length : 0 %></span>
        </button>
        <% if (currentUser && currentUser._id.toString() !== post.creator._id.toString()) { %>
          <button class="tip-button" data-post-id="<%= post._id %>" data-creator-id="<%= post.creator._id %>">
            <i class="fa-solid fa-gift"></i>
            Tip (<span class="tip-count"><%= post.totalTips || 0 %></span>)
          </button>
        <% } %>
        <button class="bookmark-button" data-post-id="<%= post._id %>">
          <i class="fa-solid fa-bookmark <%= currentUser?.bookmarks?.some(b => b.toString() === post._id.toString()) ? 'bookmarked' : '' %>"></i>
        </button>
      </div>
      <div class="comments">
        <% if (post.comments && post.comments.length > 0) { %>
          <% post.comments.forEach(comment => { %>
            <div class="comment">
              <strong><%= comment.user ? comment.user.username : 'Deleted User' %>:</strong> <%= comment.text %>
            </div>
          <% }); %>
        <% } %>
      </div>
      <div class="comment-form-container" style="display: none;">
        <form class="comment-form" data-post-id="<%= post._id %>">
          <input type="text" name="comment" placeholder="Write your comment...">
          <button type="submit">Comment</button>
        </form>
      </div>
    </div>
  </div>

  <!-- Post Action Modal -->
  <div id="postActionModal" class="post-action-modal hidden">
    <div class="post-action-modal-content">
      <span id="closePostActionModal" class="close-post-action-modal">×</span>
      <h3>Post Actions</h3>
      <ul class="post-action-options">
        <li>
          <button id="sharePostButton" class="post-action-button">Share Post</button>
        </li>
        <li>
          <button id="reportPostButton" class="post-action-button">Report Post</button>
        </li>
        <% if (currentUser && currentUser._id.toString() === post.creator._id.toString()) { %>
          <li>
            <form action="/profile/delete-post/<%= post._id %>" method="POST">
              <button type="submit" class="post-action-button">Delete Post</button>
            </form>
          </li>
        <% } %>
        <% if (adminView) { %>
          <li>
            <button id="adminDeletePostButton" class="post-action-button" data-post-id="<%= post._id %>">Delete Post (Admin)</button>
          </li>
        <% } %>
      </ul>
    </div>
  </div>

  <!-- Post Share Modal -->
  <div id="postShareModal" class="post-share-modal hidden">
    <div class="post-share-modal-content">
      <span id="closePostShareModal" class="close-post-share-modal">×</span>
      <h3>Share Post</h3>
      <ul class="post-share-options">
        <li>
          <button id="copyPostLinkButton" class="post-share-button" data-link="">Copy Link</button>
        </li>
        <li>
          <a id="sharePostTwitter" href="#" target="_blank" class="post-share-button">Share on Twitter</a>
        </li>
        <li>
          <a id="sharePostWhatsApp" href="#" target="_blank" class="post-share-button">Share on WhatsApp</a>
        </li>
        <li>
          <a id="sharePostTelegram" href="#" target="_blank" class="post-share-button">Share on Telegram</a>
        </li>
        <li>
          <a id="sharePostFacebook" href="#" target="_blank" class="post-share-button">Share on Facebook</a>
        </li>
        <li>
          <button id="sharePostNativeButton" class="post-share-button hidden" data-link="">Share via...</button>
        </li>
      </ul>
    </div>
  </div>

  <!-- Report Post Modal -->
  <div id="reportPostModal" class="report-post-modal hidden">
    <div class="report-post-modal-content">
      <span id="closeReportPostModal" class="close-report-post-modal">×</span>
      <h3>Report Post</h3>
      <form id="reportPostForm" data-post-id="">
        <label for="reportReason">Reason for reporting:</label>
        <select id="reportReason" name="reason" required>
          <option value="" disabled selected>Select a reason</option>
          <option value="Inappropriate Content">Inappropriate Content</option>
          <option value="Spam">Spam</option>
          <option value="Harassment">Harassment</option>
          <option value="Other">Other</option>
        </select>
        <label for="reportDetails">Additional Details:</label>
        <textarea id="reportDetails" name="details" placeholder="Provide more information..."></textarea>
        <button type="submit" class="report-submit-button">Submit Report</button>
      </form>
    </div>
  </div>

  <!-- Tip Modal -->
  <div id="tipModal" class="tip-modal hidden">
    <div class="tip-modal-content">
      <span id="closeTipModal" class="close-tip-modal">×</span>
      <h3>Tip Creator</h3>
      <form id="tipForm" data-post-id="" data-creator-id="">
        <label for="tipAmount">Tip Amount (NGN):</label>
        <input type="number" id="tipAmount" name="tipAmount" min="1" required />
        <label for="tipMessage">Message (Optional):</label>
        <textarea id="tipMessage" name="tipMessage" placeholder="Add a message with your tip..."></textarea>
        <button type="submit" class="tip-submit-button">Send Tip</button>
      </form>
    </div>
  </div>

  <!-- Admin Delete Post Modal -->
  <% if (adminView) { %>
    <div id="adminDeletePostModal" class="admin-delete-post-modal hidden">
      <div class="admin-delete-post-modal-content">
        <span id="closeAdminDeletePostModal" class="close-admin-delete-post-modal">×</span>
        <h3>Delete Post (Admin)</h3>
        <form id="adminDeletePostForm" data-post-id="">
          <label for="adminDeleteReason">Reason for deletion:</label>
          <textarea id="adminDeleteReason" name="reason" required placeholder="Provide the reason for deleting this post..."></textarea>
          <button type="submit" class="admin-delete-submit-button">Delete Post</button>
        </form>
      </div>
    </div>
  <% } %>
</div>

<!-- JavaScript -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const container = document.querySelector('.home-container');
    const isDevEnv = container && container.dataset.env === 'development';
    const username = container.dataset.username;

    // Post Action Modal
    const initializePostActionModal = () => {
      const postMenuButtons = document.querySelectorAll('.post-menu-button');
      const postActionModal = document.getElementById('postActionModal');
      const closePostActionModal = document.getElementById('closePostActionModal');
      const sharePostButton = document.getElementById('sharePostButton');
      const reportPostButton = document.getElementById('reportPostButton');
      const postShareModal = document.getElementById('postShareModal');
      const closePostShareModal = document.getElementById('closePostShareModal');
      const copyPostLinkButton = document.getElementById('copyPostLinkButton');
      const sharePostTwitter = document.getElementById('sharePostTwitter');
      const sharePostWhatsApp = document.getElementById('sharePostWhatsApp');
      const sharePostTelegram = document.getElementById('sharePostTelegram');
      const sharePostFacebook = document.getElementById('sharePostFacebook');
      const sharePostNativeButton = document.getElementById('sharePostNativeButton');

      if (!postActionModal || postMenuButtons.length === 0) {
        if (isDevEnv) console.warn('Post action modal or menu buttons not found');
        return;
      }

      postMenuButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          const postId = button.dataset.postId;
          if (!postId) {
            if (isDevEnv) console.warn('Post ID not found on menu button');
            return;
          }
          sharePostButton.dataset.postId = postId;
          reportPostButton.dataset.postId = postId;
          postActionModal.classList.remove('hidden');
          if (isDevEnv) console.log(`Opening post action modal for post ID: ${postId}`);
        });
      });

      closePostActionModal.addEventListener('click', () => {
        postActionModal.classList.add('hidden');
      });

      postActionModal.addEventListener('click', (e) => {
        if (e.target === postActionModal) {
          postActionModal.classList.add('hidden');
        }
      });

      // Share Post Button
      sharePostButton.addEventListener('click', () => {
        const postId = sharePostButton.dataset.postId;
        const postLink = `${window.location.origin}/profile/${encodeURIComponent(username)}/post/${postId}`;
        const encodedLink = encodeURIComponent(postLink);
        const shareText = encodeURIComponent(`Check out this post by @${username}!`);

        copyPostLinkButton.dataset.link = postLink;
        sharePostTwitter.href = `https://twitter.com/intent/tweet?url=${encodedLink}&text=${shareText}`;
        sharePostWhatsApp.href = `https://api.whatsapp.com/send?text=${shareText}%20${encodedLink}`;
        sharePostTelegram.href = `https://t.me/share/url?url=${encodedLink}&text=${shareText}`;
        sharePostFacebook.href = `https://www.facebook.com/sharer/sharer.php?u=${encodedLink}`;
        sharePostNativeButton.dataset.link = postLink;

        if (navigator.share) {
          sharePostNativeButton.classList.remove('hidden');
        } else {
          sharePostNativeButton.classList.add('hidden');
        }

        postShareModal.classList.remove('hidden');
        postActionModal.classList.add('hidden');
      });

      // Copy Link
      copyPostLinkButton.addEventListener('click', async () => {
        const link = copyPostLinkButton.dataset.link;
        try {
          await navigator.clipboard.writeText(link);
          copyPostLinkButton.textContent = 'Link Copied!';
          copyPostLinkButton.disabled = true;
          setTimeout(() => {
            copyPostLinkButton.textContent = 'Copy Link';
            copyPostLinkButton.disabled = false;
          }, 2000);
        } catch (err) {
          if (isDevEnv) console.error('Error copying post link:', err.message);
          alert('Failed to copy link.');
        }
      });

      // Native Share
      sharePostNativeButton.addEventListener('click', async () => {
        const link = copyPostLinkButton.dataset.link;
        try {
          await navigator.share({
            title: `Post by @${username}`,
            text: `Check out this post by @${username}!`,
            url: link
          });
          postShareModal.classList.add('hidden');
        } catch (err) {
          if (isDevEnv) console.error('Error sharing post:', err.message);
          alert('Error sharing post.');
        }
      });

      // Close Share Modal
      closePostShareModal.addEventListener('click', () => {
        postShareModal.classList.add('hidden');
      });

      postShareModal.addEventListener('click', (e) => {
        if (e.target === postShareModal) {
          postShareModal.classList.add('hidden');
        }
      });

      // Report Post Button
      reportPostButton.addEventListener('click', () => {
        const postId = reportPostButton.dataset.postId;
        const reportPostModal = document.getElementById('reportPostModal');
        const reportForm = document.getElementById('reportPostForm');
        reportForm.dataset.postId = postId;
        reportPostModal.classList.remove('hidden');
        postActionModal.classList.add('hidden');
      });
    };

    // Report Post Form
    const reportPostForm = document.getElementById('reportPostForm');
    if (reportPostForm) {
      reportPostForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        const postId = this.dataset.postId;
        const reason = document.getElementById('reportReason').value;
        const details = document.getElementById('reportDetails').value.trim();
        const submitButton = this.querySelector('.report-submit-button');
        const originalText = submitButton.textContent;

        submitButton.textContent = 'Submitting...';
        submitButton.disabled = true;

        try {
          const response = await fetch('/profile/report-post', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ postId, reason, details })
          });
          const result = await response.json();
          if (response.ok && result.status === 'success') {
            alert(result.message || 'Report submitted successfully.');
            document.getElementById('reportPostModal').classList.add('hidden');
            this.reset();
          } else {
            alert(result.message || 'Failed to submit report.');
          }
        } catch (err) {
          if (isDevEnv) console.error('Error submitting report:', err.message);
          alert('Error submitting report.');
        } finally {
          submitButton.textContent = originalText;
          submitButton.disabled = false;
        }
      });

      document.getElementById('closeReportPostModal').addEventListener('click', () => {
        document.getElementById('reportPostModal').classList.add('hidden');
      });

      document.getElementById('reportPostModal').addEventListener('click', (e) => {
        if (e.target === document.getElementById('reportPostModal')) {
          document.getElementById('reportPostModal').classList.add('hidden');
        }
      });
    }

    // Like Button
    document.querySelectorAll('.like-button').forEach(button => {
      button.addEventListener('click', async function() {
        const postId = this.dataset.postId;
        const likeIcon = this.querySelector('i');
        const likeCountSpan = this.querySelector('.like-count');
        try {
          const res = await fetch(`/profile/posts/${postId}/like`, { method: 'POST' });
          const data = await res.json();
          if (res.ok) {
            likeCountSpan.textContent = data.likes;
            likeIcon.classList.toggle('liked', data.userLiked);
          } else {
            if (isDevEnv) console.error('Like failed:', data.message || `Status: ${res.status}`);
            alert(data.message || 'Could not like post.');
          }
        } catch (error) {
          if (isDevEnv) console.error('Error liking post:', error.message);
          alert('Error liking post.');
        }
      });
    });

    // Comment Icon: Toggle comment form
    document.querySelectorAll('.comment-icon').forEach(button => {
      button.addEventListener('click', function() {
        const postId = this.dataset.postId;
        const postCard = this.closest('.post-card');
        if (!postCard) {
          if (isDevEnv) console.warn('Missing post-card for comment toggle');
          return;
        }
        const commentContainer = postCard.querySelector('.comment-form-container');
        if (!commentContainer) {
          if (isDevEnv) console.warn('Missing comment-form-container in post-card');
          return;
        }
        commentContainer.style.display = commentContainer.style.display === 'block' ? 'none' : 'block';
        if (commentContainer.style.display === 'block') {
          const input = commentContainer.querySelector('input[name="comment"]');
          if (input) input.focus();
        }
      });
    });

    // Comment Form
    document.querySelectorAll('.comment-form').forEach(form => {
      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        const postId = this.dataset.postId;
        const commentInput = this.querySelector('input[name="comment"]');
        const commentText = commentInput.value.trim();
        const submitButton = this.querySelector('button[type="submit"]');
        if (!commentText) return;
        const originalButtonText = submitButton.textContent;
        submitButton.textContent = 'Posting...';
        submitButton.disabled = true;
        try {
          const res = await fetch(`/profile/posts/${postId}/comment`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ text: commentText })
          });
          if (res.ok) {
            const data = await res.json();
            const commentsDiv = this.closest('.post-card').querySelector('.comments');
            const newCommentDiv = document.createElement('div');
            newCommentDiv.classList.add('comment');
            const username = data.comment && data.comment.user ? data.comment.user.username : 'You';
            newCommentDiv.innerHTML = `<strong>${username}:</strong> ${data.comment.text}`;
            commentsDiv.appendChild(newCommentDiv);
            const commentCountSpan = this.closest('.post-card').querySelector('.comment-count');
            if (commentCountSpan && data.commentCount !== undefined) commentCountSpan.textContent = data.commentCount;
            commentInput.value = '';
            this.closest('.comment-form-container').style.display = 'none';
          } else {
            const data = await res.json();
            if (isDevEnv) console.error('Comment failed:', data.message || `Status: ${res.status}`);
            alert(data.message || 'Failed to post comment.');
          }
        } catch (error) {
          if (isDevEnv) console.error('Error posting comment:', error.message);
          alert('Error posting comment.');
        } finally {
          submitButton.textContent = originalButtonText;
          submitButton.disabled = false;
        }
      });
    });

    // Bookmark Button
    document.querySelectorAll('.bookmark-button').forEach(button => {
      button.addEventListener('click', async function() {
        const postId = this.dataset.postId;
        const bookmarkIcon = this.querySelector('i');
        try {
          const res = await fetch(`/profile/posts/${postId}/bookmark`, { method: 'POST' });
          const data = await res.json();
          if (res.ok) {
            bookmarkIcon.classList.toggle('bookmarked', data.isBookmarked);
          } else {
            if (isDevEnv) console.error('Bookmark failed:', data.message || `Status: ${res.status}`);
            alert(data.message || 'Could not bookmark post.');
          }
        } catch (error) {
          if (isDevEnv) console.error('Error bookmarking post:', error.message);
          alert('Error bookmarking post.');
        }
      });
    });

    // Sync bookmark states
    document.querySelectorAll('.bookmark-button').forEach(async button => {
      const postId = button.dataset.postId;
      const bookmarkIcon = button.querySelector('i');
      try {
        const res = await fetch(`/profile/posts/${postId}/bookmark-status`, { method: 'GET' });
        const data = await res.json();
        if (res.ok) {
          bookmarkIcon.classList.toggle('bookmarked', data.isBookmarked);
        }
      } catch (error) {
        if (isDevEnv) console.error('Error syncing bookmark status:', error.message);
      }
    });

    // Unlock Button
    document.querySelectorAll('.unlock-button').forEach(button => {
      button.addEventListener('click', async function() {
        const contentId = this.dataset.contentId;
        const creatorId = this.dataset.creatorId;
        const originalText = this.textContent;
        this.textContent = 'Processing...';
        this.disabled = true;
        try {
          const response = await fetch('/profile/unlock-special-content', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ contentId, creatorId })
          });
          const result = await response.json();
          if (response.ok && result.status === 'success' && result.data.paymentLink) {
            window.location.href = result.data.paymentLink;
          } else {
            if (isDevEnv) console.error('Unlock failed:', result.message || 'No payment link');
            alert(result.message || 'Failed to initialize payment');
            this.textContent = originalText;
            this.disabled = false;
          }
        } catch (error) {
          if (isDevEnv) console.error('Error unlocking content:', error.message);
          alert('An error occurred while processing your request');
          this.textContent = originalText;
          this.disabled = false;
        }
      });
    });

    // Tip Button and Modal
    document.querySelectorAll('.tip-button').forEach(button => {
      button.addEventListener('click', function() {
        const postId = this.dataset.postId;
        const creatorId = this.dataset.creatorId;
        const tipModal = document.getElementById('tipModal');
        const tipForm = document.getElementById('tipForm');
        tipForm.dataset.postId = postId;
        tipForm.dataset.creatorId = creatorId;
        tipModal.classList.remove('hidden');
      });
    });

    const tipForm = document.getElementById('tipForm');
    if (tipForm) {
      tipForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        const postId = this.dataset.postId;
        const creatorId = this.dataset.creatorId;
        const tipAmount = parseFloat(document.getElementById('tipAmount').value);
        const tipMessage = document.getElementById('tipMessage').value.trim();
        const submitButton = this.querySelector('.tip-submit-button');
        const originalText = submitButton.textContent;

        if (isNaN(tipAmount) || tipAmount <= 0) {
          alert('Please enter a valid tip amount.');
          return;
        }

        submitButton.textContent = 'Processing...';
        submitButton.disabled = true;

        try {
          const response = await fetch(`/profile/posts/${postId}/tip`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ tipAmount, tipMessage, creatorId })
          });
          const result = await response.json();
          if (response.ok && result.status === 'success' && result.data.paymentLink) {
            window.location.href = result.data.paymentLink;
          } else {
            if (isDevEnv) console.error('Tip failed:', result.message || 'No payment link');
            alert(result.message || 'Failed to initialize tip payment');
          }
        } catch (error) {
          if (isDevEnv) console.error('Error processing tip:', error.message);
          alert('Error processing tip.');
        } finally {
          submitButton.textContent = originalText;
          submitButton.disabled = false;
          document.getElementById('tipModal').classList.add('hidden');
          this.reset();
        }
      });

      document.getElementById('closeTipModal').addEventListener('click', () => {
        document.getElementById('tipModal').classList.add('hidden');
      });

      document.getElementById('tipModal').addEventListener('click', (e) => {
        if (e.target === document.getElementById('tipModal')) {
          document.getElementById('tipModal').classList.add('hidden');
        }
      });
    }

    // Admin Delete Post
    const adminDeletePostButton = document.getElementById('adminDeletePostButton');
    if (adminDeletePostButton) {
      adminDeletePostButton.addEventListener('click', () => {
        const postId = adminDeletePostButton.dataset.postId;
        const adminDeletePostModal = document.getElementById('adminDeletePostModal');
        const adminDeletePostForm = document.getElementById('adminDeletePostForm');
        adminDeletePostForm.dataset.postId = postId;
        adminDeletePostModal.classList.remove('hidden');
        document.getElementById('postActionModal').classList.add('hidden');
      });

      const adminDeletePostForm = document.getElementById('adminDeletePostForm');
      if (adminDeletePostForm) {
        adminDeletePostForm.addEventListener('submit', async function(e) {
          e.preventDefault();
          const postId = this.dataset.postId;
          const reason = document.getElementById('adminDeleteReason').value.trim();
          const submitButton = this.querySelector('.admin-delete-submit-button');
          const originalText = submitButton.textContent;

          if (!reason) {
            alert('Please provide a reason for deletion.');
            return;
          }

          submitButton.textContent = 'Deleting...';
          submitButton.disabled = true;

          try {
            const response = await fetch(`/profile/admin-delete-post/${postId}`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ reason })
            });
            const result = await response.json();
            if (response.ok) {
              alert('Post deleted successfully.');
              window.location.href = '/profile';
            } else {
              alert(result.message || 'Failed to delete post.');
            }
          } catch (error) {
            if (isDevEnv) console.error('Error deleting post:', error.message);
            alert('Error deleting post.');
          } finally {
            submitButton.textContent = originalText;
            submitButton.disabled = false;
            document.getElementById('adminDeletePostModal').classList.add('hidden');
            this.reset();
          }
        });

        document.getElementById('closeAdminDeletePostModal').addEventListener('click', () => {
          document.getElementById('adminDeletePostModal').classList.add('hidden');
        });

        document.getElementById('adminDeletePostModal').addEventListener('click', (e) => {
          if (e.target === document.getElementById('adminDeletePostModal')) {
            document.getElementById('adminDeletePostModal').classList.add('hidden');
          }
        });
      }
    }

    // Full-screen image functionality
    const fullscreenOverlay = document.createElement('div');
    fullscreenOverlay.classList.add('fullscreen-overlay');
    document.body.appendChild(fullscreenOverlay);
    const fullscreenImg = document.createElement('img');
    fullscreenOverlay.appendChild(fullscreenImg);
    const closeButton = document.createElement('button');
    closeButton.classList.add('close-fullscreen');
    closeButton.innerHTML = '×';
    fullscreenOverlay.appendChild(closeButton);

    document.querySelectorAll('.fullscreenable').forEach(img => {
      img.addEventListener('click', function() {
        const src = this.dataset.fullscreenSrc;
        fullscreenImg.src = src;
        fullscreenOverlay.classList.add('active');
      });
    });

    fullscreenOverlay.addEventListener('click', function(e) {
      if (e.target === fullscreenOverlay) {
        fullscreenOverlay.classList.remove('active');
      }
    });

    closeButton.addEventListener('click', function() {
      fullscreenOverlay.classList.remove('active');
    });

    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && fullscreenOverlay.classList.contains('active')) {
        fullscreenOverlay.classList.remove('active');
      }
    });

    // Carousel Navigation
    document.querySelectorAll('.media-carousel-container').forEach(container => {
      const postId = container.querySelector('.media-carousel').id.replace('carousel-', '');
      const items = container.querySelectorAll('.carousel-item');
      const prevButton = container.querySelector('.carousel-prev');
      const nextButton = container.querySelector('.carousel-next');
      const dots = container.querySelectorAll('.carousel-dot');
      let currentIndex = 0;

      function updateCarousel() {
        items.forEach((item, index) => {
          item.classList.toggle('active', index === currentIndex);
        });
        dots.forEach((dot, index) => {
          dot.classList.toggle('active', index === currentIndex);
        });
        if (prevButton && nextButton) {
          prevButton.disabled = currentIndex === 0;
          nextButton.disabled = currentIndex === items.length - 1;
        }
      }

      if (prevButton) {
        prevButton.addEventListener('click', () => {
          if (currentIndex > 0) {
            currentIndex--;
            updateCarousel();
          }
        });
      }

      if (nextButton) {
        nextButton.addEventListener('click', () => {
          if (currentIndex < items.length - 1) {
            currentIndex++;
            updateCarousel();
          }
        });
      }

      dots.forEach(dot => {
        dot.addEventListener('click', () => {
          currentIndex = parseInt(dot.dataset.index);
          updateCarousel();
        });
      });

      updateCarousel();
    });

    // Initialize Post Action Modal
    initializePostActionModal();
  });
</script>