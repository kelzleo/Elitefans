<div class="profile-container"
data-is-creator-viewing="<%= currentUser && currentUser._id.toString() === user._id.toString() %>"
data-is-subscribed="<%= isSubscribed %>"
data-current-user="<%= currentUser ? 'true' : 'false' %>"
data-env="<%= env %>"
data-username="<%= user.username %>">
    <div class="profile-header">
    <div class="cover-photo-container">
      <% if (user.coverPhoto) { %>
        <img class="cover-photo" src="<%= user.coverPhoto %>" alt="Cover Photo">
      <% } else { %>
        <img class="cover-photo" src="https://storage.googleapis.com/my-public-profile-pictures/coverPhotos/cover%20E.png" alt="Default Cover Photo">
      <% } %>
  <div class="cover-stats">
    <div class="stat-item">
      <i class="fa fa-image"></i>
      <div class="stat-count"><%= user.imagesCount || 0 %></div>
      <div class="stat-label">Photos</div>
    </div>
    <div class="stat-item">
      <i class="fa fa-video"></i>
      <div class="stat-count"><%= user.videosCount || 0 %></div>
      <div class="stat-label">Videos</div>
    </div>
    <div class="stat-item">
      <i class="fa fa-heart"></i>
      <div class="stat-count"><%= user.totalLikes || 0 %></div>
      <div class="stat-label">Likes</div>
    </div>
    <% if (user.role === 'creator') { %>
      <div class="stat-item">
        <i class="fa fa-users"></i>
        <div class="stat-count"><%= user.subscriberCount || 0 %></div>
        <div class="stat-label">Subscribers</div>
      </div>
    <% } %>
  </div></div>

   <!-- Profile Actions (Chat, Tip, Share Icons) -->
<div class="profile-actions">
  <% if (currentUser && currentUser._id.toString() === user._id.toString()) { %>
    <!-- Creator/User View: Broadcast, Share -->
    <% if (user.role === 'creator') { %>
      <a href="/broadcast" class="action-button broadcast-icon" title="Start Broadcast">
        <i class="fa fa-video"></i>
      </a>
    <% } %>
    <button class="action-button share-icon" title="Share Profile" data-username="<%= user.username %>">
      <i class="fa fa-share-alt"></i>
    </button>
  <% } else if (currentUser && isSubscribed && user.role === 'creator') { %>
    <!-- Visitor View (Subscribed): Chat, Tip, Share -->
    <a href="/chat?creatorId=<%= user._id %>" class="action-button chat-icon" title="Chat with <%= user.username %>">
      <i class="fa fa-comment"></i>
    </a>
    <button class="action-button tip-icon tip-profile-button" data-creator-id="<%= user._id %>" title="Tip <%= user.username %>">
      <i class="fa fa-gift"></i>
    </button>
    <button class="action-button share-icon" title="Share Profile" data-username="<%= user.username %>">
      <i class="fa fa-share-alt"></i>
    </button>
  <% } else { %>
    <!-- Visitor View (Not Subscribed): Share -->
    <button class="action-button share-icon" title="Share Profile" data-username="<%= user.username %>">
      <i class="fa fa-share-alt"></i>
    </button>
  <% } %>
</div>
    <div class="profile-details">
     

      <img class="profile-picture" src="<%= user.profilePicture ? user.profilePicture : 'https://storage.googleapis.com/my-public-profile-pictures/profilePictures/profile%20E.png' %>" alt="Profile Picture">
  <div class="profile-names">
    <h1 class="profile-name">
      <%= user.profileName %>
      <% if (user.role === 'creator') { %>
        <span class="verified-badge"><i class="fa fa-check-circle"></i></span>
      <% } %>
    </h1>
    <p class="username">@<%= user.username %></p>
    <% if (user.isOnline) { %>
      <p class="online-status">Available now</p>
    <% } else { %>
      <p class="last-seen-status">Last seen <%= formatRelativeTime(user.lastSeen) %></p>
    <% } %>
  </div>

  <% if (user.bio) { %>
    <div class="profile-bio">
      <p class="bio"><%= user.bio %></p>
    </div>
  <% } %>  <% if (user.role === 'creator') { %>
    <div class="subscription-section">
      <%# --- Toggle Buttons --- %>
      <% if (currentUser && currentUser._id.toString() !== user._id.toString()) { %>
        <%# Logged-in Visitor View %>
<% if (isSubscribed) { %>
  <div class="subscription-actions">
    <% if (isFreeSubscribed) { %>
      <form action="/profile/unsubscribe/<%= user._id %>" method="POST" style="display: inline;">
        <button type="submit" class="unsubscribe-btn">Unsubscribe</button>
      </form>
    <% } else { %>
      <button class="subscribed-btn" disabled>Subscribed (Paid)</button>
    <% } %>
    <% if (bundles && bundles.length > 0) { %>
      <button class="view-bundles-button" id="toggleBundlesBtn">View Options</button>
    <% } %>
  </div>
<% } else { %>
  <%# Not Subscribed Visitor %>
  <% if (bundles && bundles.length > 0) { %>
    <button class="subscribe-now-button" id="toggleBundlesBtn">SUBSCRIBE NOW</button>
  <% } else { %>
    <p class="no-bundles-message">No subscription options currently available.</p>
  <% } %>
<% } %>
      <% } else if (currentUser && currentUser._id.toString() === user._id.toString() && user.role === 'creator') { %>
        <%# Creator's Own View %>
        <% if (bundles && bundles.length > 0) { %>
          <button class="manage-bundles-button" id="toggleBundlesBtn">
            Manage Bundles (<%= bundles.length %>)
          </button>
        <% } %>
        <% } else { %>
          <%# Non-Logged-In Visitor View %>
          <% if (user.role === 'creator' && (user.freeSubscriptionEnabled || (bundles && bundles.length > 0))) { %>
            <button class="subscribe-now-button" id="toggleBundlesBtn">
              SUBSCRIBE NOW
            </button>
          <% } else { %>
            <p class="no-bundles-message">No subscription options currently available.</p>
          <% } %>
      <% } %>

  <%# --- Bundle Dropdown --- %>
  <% if (bundles && bundles.length > 0) { %>
    <div class="subscription-dropdown hidden" id="subscriptionDropdown">
      <ul class="bundle-list">
        <% if (user.freeSubscriptionEnabled && currentUser && currentUser._id.toString() !== user._id.toString() && !isSubscribed) { %>
          <li class="bundle-item">
            <form action="/profile/subscribe-free" method="POST" class="subscribe-free-bundle-form">
              <input type="hidden" name="creatorId" value="<%= user._id %>">
              <input type="hidden" name="creatorUsername" value="<%= user.username %>">
              <button type="submit" class="bundle-subscribe-button free-subscribe-button">
                <span class="bundle-duration">Free Subscription</span>
                <span class="bundle-price">₦0</span>
              </button>
            </form>
          </li>
        <% } %>
        <% bundles.forEach(bundle => { %>
          <li class="bundle-item">
            <% if (currentUser && currentUser._id.toString() !== user._id.toString() && !isSubscribed) { %>
              <form action="/profile/subscribe" method="POST" class="subscribe-bundle-form">
                <input type="hidden" name="creatorId" value="<%= user._id %>">
                <input type="hidden" name="bundleId" value="<%= bundle._id %>">
                <input type="hidden" name="creatorUsername" value="<%= user.username %>">
                <button type="submit" class="bundle-subscribe-button">
                  <span class="bundle-duration"><%= bundle.duration || 'Free' %></span>
                  <span class="bundle-price <%= bundle.discountPercentage && bundle.discountPercentage > 0 && bundle.originalPrice ? 'discount' : '' %>">
                    <% if (bundle.discountPercentage && bundle.discountPercentage > 0 && bundle.originalPrice) { %>
                      ₦<%= (bundle.price / 1000).toFixed(1) %>k at <%= bundle.discountPercentage %>% discount
                    <% } else { %>
                      ₦<%= bundle.price %>
                    <% } %>
                  </span>
                </button>
              </form>
            <% } else { %>
              <div class="bundle-info-block">
                <span class="bundle-duration"><%= bundle.duration || 'Free' %></span>
                <span class="bundle-price <%= bundle.discountPercentage && bundle.discountPercentage > 0 && bundle.originalPrice ? 'discount' : '' %>">
                  <% if (bundle.discountPercentage && bundle.discountPercentage > 0 && bundle.originalPrice) { %>
                    ₦<%= (bundle.price / 1000).toFixed(1) %>k at <%= bundle.discountPercentage %>% discount
                  <% } else { %>
                    ₦<%= bundle.price %>
                  <% } %>
                </span>
              </div>
              <% if (currentUser && currentUser._id.toString() === user._id.toString() && !bundle.isFree) { %>
                <form action="/profile/delete-bundle/<%= bundle._id %>" method="POST" onsubmit="return confirm('Are you sure you want to delete this bundle?');" class="delete-bundle-form">
                  <button type="submit" class="delete-bundle-button">Delete</button>
                </form>
                <button class="edit-bundle-button" 
                        data-bundle-id="<%= bundle._id %>"
                        data-price="<%= bundle.originalPrice || bundle.price %>"
                        data-description="<%= bundle.description %>"
                        data-discount-percentage="<%= bundle.discountPercentage || 0 %>">
                  Edit
                </button>
              <% } %>
            <% } %>
          </li>
        <% }) %>
      </ul>
    </div>
  <% } %>
</div>

  <% } %></div>

  </div>
<% if (currentUser && currentUser._id.toString() === user._id.toString()) { %>
    <div class="creator-actions">
      <div class="edit-profile-container">
        <a href="/profile/edit" class="edit-profile-btn">Edit Profile</a>
      </div>  <% if (user.role === 'creator') { %>
    <div class="create-bundle-form">
      <h4>Create Subscription Bundle</h4>
      <p>Limit: 4 bundles. Currently: <%= bundles ? bundles.length : 0 %></p>
      <% if (user.freeSubscriptionEnabled) { %>
        <div class="no-bundle-creation-message">
          Bundle creation is disabled while free subscription mode is enabled.
        </div>
      <% } else if (!bundles || bundles.length < 4) { %>
        <form action="/profile/create-bundle" method="POST" id="createBundleForm" class="create-bundle-form-inner">
          <div class="form-group">
            <label for="bundlePrice">Bundle Price (NGN):</label>
            <input type="number" name="price" id="bundlePrice" min="1" step="1" required class="form-input" placeholder="e.g., 1000">
          </div>
          <div class="form-group">
            <label for="bundleDiscount">Discount Percentage (optional):</label>
            <input type="number" name="discountPercentage" id="bundleDiscount" min="0" max="100" value="0" class="form-input" placeholder="e.g., 20 for 20%">
          </div>
          <div class="form-group">
            <label for="bundleDuration">Bundle Duration:</label>
            <select name="duration" id="bundleDuration" required class="form-select">
              <option value="" disabled selected>-- Select Duration --</option>
              <option value="1 day">1 Day</option>
              <option value="1 month">1 Month</option>
              <option value="3 months">3 Months</option>
              <option value="6 months">6 Months</option>
              <option value="1 year">1 Year</option>
            </select>
          </div>
          <div class="form-group">
            <label for="bundleDescription">Bundle Description:</label>
            <textarea name="description" id="bundleDescription" required class="form-textarea" placeholder="e.g., Access all my content for 1 month"></textarea>
          </div>
          <button type="submit" class="form-button">Create Bundle</button>
        </form>
      <% } else { %>
        <p>You have reached the maximum limit of 4 bundles.</p>
      <% } %>
    </div>

 <!-- Add toggle free subscription here -->

<div class="toggle-free-subscription">
  <form action="/profile/toggle-free-subscription" method="POST" class="toggle-free-subscription-form">
    <button type="submit" class="toggle-free-subscription-btn">
      <%= user.freeSubscriptionEnabled ? 'Disable Free Subscription' : 'Enable Free Subscription' %>
    </button>
  </form>
</div>

  <% } %></div>
 


  
  <% } %>  
  <% if (currentUser && currentUser._id.toString() === user._id.toString() && user.role === 'creator') { %>
    <div class="upload-content-form">
      <h3>Create a New Post</h3>
      <form action="/profile/uploadContent" method="POST" enctype="multipart/form-data" id="uploadContentForm">
        <div class="form-group">
          <label for="writeUp">Post Content (optional):</label>
          <textarea name="writeUp" id="writeUp" class="form-textarea" placeholder="Write your post or caption..." rows="5"></textarea>
          <div id="profile-creator-suggestions" class="profile-creator-suggestions hidden"></div>
        </div>
        <div class="form-group">
          <label for="contentImages">Upload Images (up to 10, optional):</label>
          <input type="file" name="contentImages" id="contentImages" accept="image/*" multiple class="form-input" style="display: none;">
          <button type="button" id="addImagesButton" class="form-button add-more-button">Add Photos</button>
          <p class="file-limit-message">Maximum 10 images/videos combined.</p>
        </div>
        <div class="form-group">
          <label for="contentVideos">Upload Videos (up to 10, optional):</label>
          <input type="file" name="contentVideos" id="contentVideos" accept="video/*" multiple class="form-input" style="display: none;">
          <button type="button" id="addVideosButton" class="form-button add-more-button">Add Videos</button>
          <p class="file-limit-message">Maximum 10 images/videos combined.</p>
        </div>
        <div class="form-group">
          <label for="category">Category (optional):</label>
          <select name="category" id="category" class="form-input">
            <option value="">No Category (All)</option>
            <% (user.postCategories || []).forEach(category => { %>
              <option value="<%= category %>"><%= category %></option>
            <% }) %>
          </select>
        </div>
        <div class="form-group">
          <label for="specialCheckbox" class="checkbox-label">
            <input type="checkbox" name="special" value="true" id="specialCheckbox"> Mark as Special Content (Pay-per-view)
          </label>
        </div>
        <div class="form-group hidden" id="unlockPriceContainer">
          <label for="unlockPrice">Unlock Price (NGN, minimum 100):</label>
          <input type="number" name="unlockPrice" id="unlockPrice" min="100" step="1" class="form-input" placeholder="e.g., 500">
        </div>
        <div class="form-group">
          <div id="mediaPreview" class="media-preview"></div>
        </div>
        <button type="submit" class="form-button">Post</button>
      </form>
    </div>
  <% } %>
  <% if (currentUser && currentUser.role === 'admin') { %>
    <a class="admin-dashboard-link" href="/admin">Admin Dashboard</a>
  <% } %> 
 
  <!-- Tabbed Content -->
  <div class="profile-tabs">
    <button class="tab-button active" data-tab="posts">Posts <span class="tab-count"><%= posts.length %></span></button>
    <button class="tab-button" data-tab="media">Media <span class="tab-count"><%= (user.imagesCount || 0) + (user.videosCount || 0) %></span></button>
  </div>  
  <!-- Posts Tab -->
<!-- Posts Tab -->
<div class="tab-content <%= activeTab === 'posts' ? '' : 'hidden' %>" id="posts-tab">
   <!-- Sort Button for Posts Tab -->
   <div class="sort-container" style="text-align: right; margin-bottom: 10px;">
    <button class="sort-button" title="Sort Posts">
      <i class="fas fa-sort"></i>
    </button>
  </div>

  <!-- Flash Messages -->
  <% if (flashMessages && flashMessages.success_msg) { %>
    <div class="alert alert-success"><%= flashMessages.success_msg %></div>
  <% } %>
  <% if (flashMessages && flashMessages.error_msg) { %>
    <div class="alert alert-error"><%= flashMessages.error_msg %></div>
  <% } %>

  <% if (currentUser && currentUser._id.toString() === user._id.toString()) { %>
    <!-- Category Management Form (Creator Only) -->
    <div class="category-management">
      <h4>Manage Post Categories</h4>
      <form id="manage-categories-form">
        <select name="action">
          <option value="add">Add Category</option>
          <option value="edit">Edit Category</option>
          <option value="delete">Delete Category</option>
        </select>
        <input type="text" name="category" placeholder="Category name" id="category-input">
        <input type="text" name="newCategory" placeholder="New category name (for edit)" id="new-category-input" style="display: none;">
        <button type="submit">Submit</button>
      </form>
    </div>
  <% } %>

  <!-- Posts Subtabs -->
  <div class="posts-subtabs">
    <button class="subtab-button <%= activeSubtab === 'all' ? 'active' : '' %>" data-subtab="all">All</button>
    <% (user.postCategories || []).forEach(category => { %>
      <button class="subtab-button <%= activeSubtab === category ? 'active' : '' %>" data-subtab="<%= category %>"><%= category %></button>
    <% }) %>
  </div>

  <% if (currentUser && currentUser._id.toString() === user._id.toString()) { %>
    <!-- Creator View -->
    <div class="posts-container">
      <div class="posts-list">
        <% if (posts && posts.length > 0) { %>
          <% posts.forEach(post => { %>
            <div class="post-card" id="post-<%= post._id %>" data-category="<%= post.category || 'none' %>">
              <div class="profile-post-header">
                <div class="profile-creator-info">
                  <a href="/profile/<%= user.username %>">
                    <img src="<%= user.profilePicture || '/images/default-profile.png' %>" alt="<%= user.username %>'s profile picture" class="creator-profile-pic">
                    <div class="profile-name-container">
                      <span class="profile-creator-name">
                        <%= user.profileName || user.username %>
                        <% if (user.role === 'creator') { %>
                          <span class="verified-badge"><i class="fa fa-check-circle"></i></span>
                        <% } %>
                      </span>
                      <span class="profile-username">@<%= user.username %></span>
                    </div>
                  </a>
                </div>
                <div class="post-menu">
                  <button class="post-menu-button" data-post-id="<%= post._id %>" aria-label="Post options">
                    <i class="fa-solid fa-ellipsis"></i>
                  </button>
                </div>
              </div>
              <div class="post-content">
                <% console.log('Rendering post:', { id: post._id, type: post.type, contentUrl: post.contentUrl, writeUp: post.renderedWriteUp, category: post.category }); %>
                <% if (post.type === 'text') { %>
                  <p class="post-text"><%- post.renderedWriteUp %></p>
                <% } else { %>
                  <!-- Multiple Media Display -->
                  <% 
                    const mediaItems = post.mediaItems && post.mediaItems.length > 0 ? 
                      post.mediaItems : 
                      (post.contentUrl ? [{ type: post.type, url: post.contentUrl, contentType: post.contentType }] : []);
                  %>
                  <% if (mediaItems.length > 0) { %>
                    <div class="media-carousel-container">
                      <div class="media-carousel">
                        <% mediaItems.forEach((media, index) => { %>
                          <div class="carousel-item <%= index === 0 ? 'active' : '' %>">
                            <% if (media.type === 'image') { %>
                              <img
                                src="<%= media.url %>"
                                alt="Post Image"
                                class="post-image <%= media.showLocked ? 'blurred' : '' %>"
                                data-fullscreen-src="<%= media.url %>"
                              />
                            <% } else if (media.type === 'video') { %>
                              <video
                                class="post-video fullscreenable <%= typeof media.showLocked !== 'undefined' && media.showLocked ? 'blurred' : '' %>"
                                controlsList="nodownload noremoteplayback"
                                data-fullscreen-src="<%= media.url %>"
                                disablePictureInPicture
                              >
                                <source src="<%= media.url %>" type="video/mp4" />
                                Your browser does not support the video tag.
                              </video>
                            <% } %>
                          </div>
                        <% }); %>
                      </div>
                      <% if (mediaItems.length > 1) { %>
                        <div class="carousel-nav">
                          <button class="carousel-prev"><i class="fa-solid fa-chevron-left"></i></button>
                          <div class="carousel-indicators">
                            <% mediaItems.forEach((_, index) => { %>
                              <span class="carousel-dot <%= index === 0 ? 'active' : '' %>" data-index="<%= index %>"></span>
                            <% }); %>
                          </div>
                          <button class="carousel-next"><i class="fa-solid fa-chevron-right"></i></button>
                        </div>
                      <% } %>
                    </div>
                  <% } %>
                  <% if (post.writeUp) { %>
                    <p class="post-writeUp"><%- post.renderedWriteUp %></p>
                  <% } %>
                <% } %>
              </div>
              <% if (post.special) { %>
                <p class="special-indicator">Special Content - Unlock Price: ₦<%= post.unlockPrice %></p>
              <% } %>
              <span class="post-timestamp">
                <%= post.createdAt ? formatRelativeTime(post.createdAt) : 'Unknown time' %>
              </span>
              <div class="post-actions">
                <button class="like-button" data-post-id="<%= post._id %>">
                  <i class="fa-solid fa-heart <%= post.likes.includes(currentUser._id) ? 'liked' : '' %>"></i>
                  <span class="like-count"><%= post.likes ? post.likes.length : 0 %></span>
                </button>
                <button class="comment-icon" data-post-id="<%= post._id %>">
                  <i class="fa-solid fa-comment"></i>
                  <span class="comment-count"><%= post.comments ? post.comments.length : 0 %></span>
                </button>
                <button class="tip-button" data-post-id="<%= post._id %>" data-creator-id="<%= user._id %>">
                  <i class="fa-solid fa-gift"></i>
                  Tip (<span class="tip-count"><%= post.totalTips || 0 %></span>)
                </button>
                <button class="bookmark-button" data-post-id="<%= post._id %>">
                  <i class="fa-solid fa-bookmark <%= currentUser.bookmarks && currentUser.bookmarks.includes(post._id.toString()) ? 'bookmarked' : '' %>"></i>
                </button>
              </div>
              <div class="comments">
                <% if (post.comments && post.comments.length > 0) { %>
                  <% post.comments.slice(0, 2).forEach(comment => { %>
                    <div class="comment">
                      <strong><%= comment.user ? comment.user.username : 'Deleted User' %>:</strong> <%= comment.text %>
                    </div>
                  <% }); %>
                  <% if (post.comments.length > 2) { %>
                    <a href="#" class="view-all-comments">View all <%= post.comments.length %> comments</a>
                  <% } %>
                <% } %>
              </div>
              <div class="comment-form-container hidden">
                <form class="comment-form" data-post-id="<%= post._id %>">
                  <input type="text" name="comment" placeholder="Write a comment...">
                  <button type="submit">Post</button>
                </form>
              </div>
              <form action="/profile/delete-post/<%= post._id %>" method="POST" onsubmit="return confirm('Are you sure you want to delete this post?');" class="delete-post-form">
                <button type="submit" class="delete-post-btn">Delete Post</button>
              </form>
            </div>
          <% }); %>
        <% } else { %>
          <p class="no-posts-message">You have not uploaded any posts yet.</p>
        <% } %>
      </div>
    </div>
  <% } else { %>
    <!-- Visitor View -->
    <% if (isSubscribed) { %>
      <div class="posts-container">
        <div class="posts-list">
          <% if (posts && posts.length > 0) { %>
            <% posts.forEach(post => { %>
              <div class="post-card" id="post-<%= post._id %>" data-category="<%= post.category || 'none' %>">
                <% 
                  const isAdminView = typeof adminView !== 'undefined' ? adminView : false;
                  const hasPurchased = currentUser && Array.isArray(currentUser.purchasedContent) && 
                    currentUser.purchasedContent.some(p => p.contentId.toString() === post._id.toString());
                  const showLocked = post.special && !isAdminView && !hasPurchased;
                  const mediaItems = post.mediaItems && post.mediaItems.length > 0 ? 
                    post.mediaItems : 
                    (post.contentUrl ? [{ type: post.type, url: post.contentUrl, contentType: post.contentType }] : []);
                %>
                <div class="profile-post-header">
                  <div class="profile-creator-info">
                    <a href="/profile/<%= user.username %>">
                      <img src="<%= user.profilePicture || '/images/default-profile.png' %>" alt="<%= user.username %>'s profile picture" class="creator-profile-pic">
                      <div class="profile-name-container">
                        <span class="profile-creator-name">
                          <%= user.profileName || user.username %>
                          <% if (user.role === 'creator') { %>
                            <span class="verified-badge"><i class="fa fa-check-circle"></i></span>
                          <% } %>
                        </span>
                        <span class="profile-username">@<%= user.username %></span>
                      </div>
                    </a>
                  </div>
                  <div class="post-menu">
                    <button class="post-menu-button" data-post-id="<%= post._id %>" aria-label="Post options">
                      <i class="fa-solid fa-ellipsis"></i>
                    </button>
                  </div>
                </div>
                <div class="post-content">
                  <% console.log('Rendering post:', { id: post._id, type: post.type, contentUrl: post.contentUrl, writeUp: post.renderedWriteUp, category: post.category }); %>
                  <% if (post.type === 'text') { %>
                    <p class="post-text"><%- post.renderedWriteUp %></p>
                  <% } else { %>
                    <!-- Multiple Media Display -->
                    <% if (mediaItems.length > 0) { %>
                      <div class="media-carousel-container <%= showLocked ? 'locked' : '' %>">
                        <div class="media-carousel">
                          <% mediaItems.forEach((media, index) => { %>
                            <div class="carousel-item <%= index === 0 ? 'active' : '' %>">
                              <% if (media.type === 'image') { %>
                                <img src="<%= media.url %>"
                                     alt="Post Image"
                                     class="post-image fullscreenable <%= showLocked ? 'blurred' : '' %>"
                                     data-fullscreen-src="<%= media.url %>"
                                     draggable="false"
                                     oncontextmenu="return false;">
                              <% } else if (media.type === 'video') { %>
                                <video
                                class="post-video fullscreenable <%= showLocked ? 'blurred' : '' %>"
                                controlsList="nodownload noremoteplayback"
                                data-fullscreen-src="<%= media.url %>"
                                disablePictureInPicture
                                draggable="false"
                                oncontextmenu="return false;"
                                poster="<%= media.posterUrl %>">
                                <source src="<%= media.url %>" type="<%= media.contentType || 'video/mp4' %>">
                                Your browser does not support the video tag.
                              </video>
                              <% } %>
                            </div>
                          <% }); %>
                        </div>
                        <% if (mediaItems.length > 1) { %>
                          <div class="carousel-nav">
                            <button class="carousel-prev"><i class="fa-solid fa-chevron-left"></i></button>
                            <div class="carousel-indicators">
                              <% mediaItems.forEach((_, index) => { %>
                                <span class="carousel-dot <%= index === 0 ? 'active' : '' %>" data-index="<%= index %>"></span>
                              <% }); %>
                            </div>
                            <button class="carousel-next"><i class="fa-solid fa-chevron-right"></i></button>
                          </div>
                        <% } %>
                      </div>
                    <% } %>
                    <% if (post.writeUp) { %>
                      <p class="post-writeUp"><%= showLocked ? post.renderedWriteUp.substring(0, 100) + (post.writeUp.length > 100 ? '...' : '') : post.renderedWriteUp %></p>
                    <% } %>
                  <% } %>
                </div>
                <% if (showLocked) { %>
                  <div class="unlock-info">
                    <i class="fa fa-lock"></i>
                    <span>Unlock for ₦<%= post.unlockPrice %></span>
                    <% if (!isAdminView) { %>
                      <button class="unlock-button" data-content-id="<%= post._id %>" data-creator-id="<%= user._id %>">Unlock Post</button>
                    <% } %>
                  </div>
                <% } %>
                <span class="post-timestamp">
                  <%= post.createdAt ? formatRelativeTime(post.createdAt) : 'Unknown time' %>
                </span>
                <div class="post-actions">
                  <button class="like-button" data-post-id="<%= post._id %>">
                    <i class="fa-solid fa-heart <%= post.likes.includes(currentUser._id) ? 'liked' : '' %>"></i>
                    <span class="like-count"><%= post.likes ? post.likes.length : 0 %></span>
                  </button>
                  <button class="comment-icon" data-post-id="<%= post._id %>">
                    <i class="fa-solid fa-comment"></i>
                    <span class="comment-count"><%= post.comments ? post.comments.length : 0 %></span>
                  </button>
                  <button class="tip-button" data-post-id="<%= post._id %>" data-creator-id="<%= user._id %>">
                    <i class="fa-solid fa-gift"></i>
                    Tip (<span class="tip-count"><%= post.totalTips || 0 %></span>)
                  </button>
                  <button class="bookmark-button" data-post-id="<%= post._id %>">
                    <i class="fa-solid fa-bookmark <%= currentUser.bookmarks && currentUser.bookmarks.includes(post._id.toString()) ? 'bookmarked' : '' %>"></i>
                  </button>
                </div>
                <div class="comments">
                  <% if (post.comments && post.comments.length > 0) { %>
                    <% post.comments.slice(0, 2).forEach(comment => { %>
                      <div class="comment">
                        <strong><%= comment.user ? comment.user.username : 'Deleted User' %>:</strong> <%= comment.text %>
                      </div>
                    <% }); %>
                    <% if (post.comments.length > 2) { %>
                      <a href="#" class="view-all-comments">View all <%= post.comments.length %> comments</a>
                    <% } %>
                  <% } %>
                </div>
                <div class="comment-form-container hidden">
                  <form class="comment-form" data-post-id="<%= post._id %>">
                    <input type="text" name="comment" placeholder="Write a comment...">
                    <button type="submit">Post</button>
                  </form>
                </div>
                <% if (currentUser && currentUser.role === 'admin' && adminView) { %>
                  <form action="/profile/admin-delete-post/<%= post._id %>" method="POST" onsubmit="return confirm('Are you sure you want to delete this post?');" class="delete-post-form">
                    <label for="reason-<%= post._id %>">Reason for deletion:</label>
                    <input type="text" name="reason" id="reason-<%= post._id %>" required class="form-input">
                    <button type="submit" class="delete-post-btn">Delete Post</button>
                  </form>
                <% } %>
              </div>
            <% }); %>
          <% } else { %>
            <p class="no-posts-message">This creator hasn't posted anything yet.</p>
          <% } %>
        </div>
      </div>
    <% } else { %>
      <p class="subscribe-prompt">Subscribe to see posts from <%= user.username %>.</p>
    <% } %>
  <% } %>
</div>
<!-- Media Tab -->
<div class="tab-content hidden" id="media-tab">
  <div class="media-subtabs">
    <button class="subtab-button active" data-subtab="all">All <span class="tab-count"><%= (user.imagesCount || 0) + (user.videosCount || 0) %></span></button>
    <button class="subtab-button" data-subtab="pics">Pics <span class="tab-count"><%= user.imagesCount || 0 %></span></button>
    <button class="subtab-button" data-subtab="videos">Videos <span class="tab-count"><%= user.videosCount || 0 %></span></button>
    <button class="view-toggle-button" title="Toggle Compact View"><i class="fa fa-th"></i></button>
  </div>

  <!-- All Media -->
  <div class="media-view active" id="media-all">
    <% if (isSubscribed || (currentUser && currentUser._id.toString() === user._id.toString())) { %>
      <% 
        // Filter posts with media (exclude text-only)
        const mediaPosts = posts.filter(post => post.type !== 'text' && (post.mediaItems.length > 0 || post.contentUrl));
      %>
      <% if (mediaPosts.length > 0) { %>
        <div class="media-content posts-list">
          <% mediaPosts.forEach(post => { %>
            <% 
              const isAdminView = typeof adminView !== 'undefined' ? adminView : false;
              const hasPurchased = currentUser && Array.isArray(currentUser.purchasedContent) && 
                currentUser.purchasedContent.some(p => p.contentId.toString() === post._id.toString());
              const showLocked = post.special && !isAdminView && !hasPurchased;
              // Build media array from mediaItems or contentUrl
              const mediaItems = post.mediaItems && post.mediaItems.length > 0 ? 
                post.mediaItems : 
                (post.contentUrl ? [{ type: post.type, url: post.contentUrl, contentType: post.contentType }] : []);
            %>
            <!-- Normal View: One media-item with carousel -->
            <div class="media-item normal-view" id="media-post-<%= post._id %>">
              <div class="profile-post-header normal-view-only">
                <div class="profile-creator-info">
                  <a href="/profile/<%= user.username %>">
                    <img src="<%= user.profilePicture || '/images/default-profile.png' %>" alt="<%= user.username %>'s profile picture" class="creator-profile-pic">
                    <div class="profile-name-container">
                      <span class="profile-creator-name">
                        <%= user.profileName || user.username %>
                        <% if (user.role === 'creator') { %>
                          <span class="verified-badge"><i class="fa fa-check-circle"></i></span>
                        <% } %>
                      </span>
                      <span class="profile-username">@<%= user.username %></span>
                    </div>
                  </a>
                </div>
                <div class="post-menu">
                  <button class="post-menu-button" data-post-id="<%= post._id %>" aria-label="Post options">
                    <i class="fa-solid fa-ellipsis"></i>
                  </button>
                </div>
              </div>
              <% if (mediaItems.length > 0) { %>
                <div class="media-carousel-container <%= showLocked ? 'locked' : '' %>">
                  <div class="media-carousel">
                    <% mediaItems.forEach((media, index) => { %>
                      <div class="carousel-item <%= index === 0 ? 'active' : '' %>">
                        <% if (media.type === 'image') { %>
                          <img src="<%= media.url %>" 
                               alt="Post Image" 
                               class="post-image fullscreenable <%= showLocked ? 'blurred' : '' %>"
                               data-fullscreen-src="<%= media.url %>" 
                               draggable="false" 
                               oncontextmenu="return false;">
                        <% } else if (media.type === 'video') { %>
                          <video
                                class="post-video fullscreenable <%= showLocked ? 'blurred' : '' %>"
                                controlsList="nodownload noremoteplayback"
                                data-fullscreen-src="<%= media.url %>"
                                disablePictureInPicture
                                draggable="false"
                                oncontextmenu="return false;"
                                poster="<%= media.posterUrl %>">
                                <source src="<%= media.url %>" type="<%= media.contentType || 'video/mp4' %>">
                                Your browser does not support the video tag.
                              </video>
                        <% } %>
                      </div>
                    <% }); %>
                  </div>
                  <% if (mediaItems.length > 1) { %>
                    <div class="carousel-nav">
                      <button class="carousel-prev"><i class="fa-solid fa-chevron-left"></i></button>
                      <div class="carousel-indicators">
                        <% mediaItems.forEach((_, index) => { %>
                          <span class="carousel-dot <%= index === 0 ? 'active' : '' %>" data-index="<%= index %>"></span>
                        <% }); %>
                      </div>
                      <button class="carousel-next"><i class="fa-solid fa-chevron-right"></i></button>
                    </div>
                  <% } %>
                </div>
              <% } %>
              <% if (showLocked) { %>
                <div class="unlock-info">
                  <i class="fa fa-lock"></i>
                  <span>Unlock for ₦<%= post.unlockPrice %></span>
                  <% if (!isAdminView) { %>
                    <button class="unlock-button" data-content-id="<%= post._id %>" data-creator-id="<%= user._id %>">Unlock</button>
                  <% } %>
                </div>
              <% } %>
              <div class="normal-view-content">
                <% if (!showLocked && post.writeUp) { %>
                  <p class="post-writeUp"><%- post.renderedWriteUp %></p>
                <% } %>
                <% if (post.special) { %>
                  <p class="special-indicator">Special Content - Unlock Price: ₦<%= post.unlockPrice %></p>
                <% } %>
                <span class="post-timestamp">
                  <%= post.createdAt ? formatRelativeTime(post.createdAt) : 'Unknown time' %>
                </span>
                <div class="post-actions">
                  <button class="like-button" data-post-id="<%= post._id %>">
                    <i class="fa-solid fa-heart <%= post.likes.includes(currentUser._id) ? 'liked' : '' %>"></i>
                    <span class="like-count"><%= post.likes ? post.likes.length : 0 %></span>
                  </button>
                  <button class="comment-icon" data-post-id="<%= post._id %>">
                    <i class="fa-solid fa-comment"></i>
                    <span class="comment-count"><%= post.comments ? post.comments.length : 0 %></span>
                  </button>
                  <button class="tip-button" data-post-id="<%= post._id %>" data-creator-id="<%= user._id %>">
                    <i class="fa-solid fa-gift"></i>
                    Tip (<span class="tip-count"><%= post.totalTips || 0 %></span>)
                  </button>
                  <button class="bookmark-button" data-post-id="<%= post._id %>">
                    <i class="fa-solid fa-bookmark <%= currentUser.bookmarks && currentUser.bookmarks.includes(post._id.toString()) ? 'bookmarked' : '' %>"></i>
                  </button>
                </div>
                <div class="comments">
                  <% if (post.comments && post.comments.length > 0) { %>
                    <% post.comments.slice(0, 2).forEach(comment => { %>
                      <div class="comment">
                        <strong><%= comment.user ? comment.user.username : 'Deleted User' %>:</strong> <%= comment.text %>
                      </div>
                    <% }); %>
                    <% if (post.comments.length > 2) { %>
                      <a href="#" class="view-all-comments">View all <%= post.comments.length %> comments</a>
                    <% } %>
                  <% } %>
                </div>
                <div class="comment-form-container hidden">
                  <form class="comment-form" data-post-id="<%= post._id %>">
                    <input type="text" name="comment" placeholder="Write a comment...">
                    <button type="submit">Post</button>
                  </form>
                </div>
                <% if (currentUser && currentUser._id.toString() === user._id.toString()) { %>
                  <form action="/profile/delete-post/<%= post._id %>" method="POST" onsubmit="return confirm('Are you sure you want to delete this post?');" class="delete-post-form">
                    <button type="submit" class="delete-post-btn">Delete Post</button>
                  </form>
                <% } %>
                <% if (currentUser && currentUser.role === 'admin' && adminView) { %>
                  <form action="/profile/admin-delete-post/<%= post._id %>" method="POST" onsubmit="return confirm('Are you sure you want to delete this post?');" class="delete-post-form">
                    <label for="reason-<%= post._id %>">Reason for deletion:</label>
                    <input type="text" name="reason" id="reason-<%= post._id %>" required class="form-input">
                    <button type="submit" class="delete-post-btn">Delete Post</button>
                  </form>
                <% } %>
              </div>
            </div>
            <!-- Compact View: One media-item per media item -->
            <% if (showLocked) { %>
              <div class="media-item compact-view locked" id="media-post-<%= post._id %>-locked">
                <% if (mediaItems.length > 0) { %>
                  <% mediaItems.forEach((media, index) => { %>
                    <div class="preview-media">
                      <% if (media.type === 'image') { %>
                        <img src="<%= media.url %>" alt="Preview Image" class="post-image blurred">
                      <% } else if (media.type === 'video') { %>
                        <video class="post-video blurred" disablePictureInPicture>
                          poster="<%= media.posterUrl %>"
                          <source src="<%= media.url %>" type="<%= media.contentType || 'video/mp4' %>">
                          Your browser does not support the video tag.
                        </video>
                      <% } %>
                    </div>
                  <% }); %>
                <% } %>
              </div>
            <% } else if (mediaItems.length > 0) { %>
              <% mediaItems.forEach((media, index) => { %>
                <div class="media-item compact-view" id="media-post-<%= post._id %>-item-<%= index %>">
                  <% if (media.type === 'image') { %>
                    <img src="<%= media.url %>" 
                         alt="Post Image" 
                         class="post-image fullscreenable" 
                         data-fullscreen-src="<%= media.url %>" 
                         draggable="false" 
                         oncontextmenu="return false;">
                  <% } else if (media.type === 'video') { %>
                    <video controls 
                           class="post-video" 
                           controlsList="nodownload" 
                           disablePictureInPicture 
                           oncontextmenu="return false;" 
                           draggable="false">
                      <source src="<%= media.url %>" type="<%= media.contentType || 'video/mp4' %>">
                      Your browser does not support the video tag.
                    </video>
                  <% } %>
                </div>
              <% }); %>
            <% } %>
          <% }); %>
        </div>
      <% } else { %>
        <p class="no-media-message">No media available yet.</p>
      <% } %>
    <% } else { %>
      <p class="subscribe-prompt">Subscribe to see media from <%= user.username %>.</p>
    <% } %>
  </div>

  <!-- Pictures -->
  <div class="media-view" id="media-pics">
    <% if (isSubscribed || (currentUser && currentUser._id.toString() === user._id.toString())) { %>
      <% 
        // Filter posts with at least one image
        const imagePosts = posts.filter(post => 
          post.type !== 'text' && 
          (post.mediaItems.some(media => media.type === 'image') || (post.contentUrl && post.type === 'image'))
        );
      %>
      <% if (imagePosts.length > 0) { %>
        <div class="media-content posts-list">
          <% imagePosts.forEach(post => { %>
            <% 
              const isAdminView = typeof adminView !== 'undefined' ? adminView : false;
              const hasPurchased = currentUser && Array.isArray(currentUser.purchasedContent) && 
                currentUser.purchasedContent.some(p => p.contentId.toString() === post._id.toString());
              const showLocked = post.special && !isAdminView && !hasPurchased;
              // Build media array, filter for images only
              const mediaItems = (post.mediaItems && post.mediaItems.length > 0 ? 
                post.mediaItems.filter(media => media.type === 'image') : 
                (post.contentUrl && post.type === 'image' ? [{ type: 'image', url: post.contentUrl, contentType: post.contentType }] : [])
              );
            %>
            <!-- Normal View -->
            <div class="media-item normal-view" id="media-post-<%= post._id %>">
              <div class="profile-post-header normal-view-only">
                <div class="profile-creator-info">
                  <a href="/profile/<%= user.username %>">
                    <img src="<%= user.profilePicture || '/images/default-profile.png' %>" alt="<%= user.username %>'s profile picture" class="creator-profile-pic">
                    <div class="profile-name-container">
                      <span class="profile-creator-name">
                        <%= user.profileName || user.username %>
                        <% if (user.role === 'creator') { %>
                          <span class="verified-badge"><i class="fa fa-check-circle"></i></span>
                        <% } %>
                      </span>
                      <span class="profile-username">@<%= user.username %></span>
                    </div>
                  </a>
                </div>
                <div class="post-menu">
                  <button class="post-menu-button" data-post-id="<%= post._id %>" aria-label="Post options">
                    <i class="fa-solid fa-ellipsis"></i>
                  </button>
                </div>
              </div>
              <% if (mediaItems.length > 0) { %>
                <div class="media-carousel-container <%= showLocked ? 'locked' : '' %>">
                  <div class="media-carousel">
                    <% mediaItems.forEach((media, index) => { %>
                      <div class="carousel-item <%= index === 0 ? 'active' : '' %>">
                        <img src="<%= media.url %>" 
                             alt="Post Image" 
                             class="post-image fullscreenable <%= showLocked ? 'blurred' : '' %>"
                             data-fullscreen-src="<%= media.url %>" 
                             draggable="false" 
                             oncontextmenu="return false;">
                      </div>
                    <% }); %>
                  </div>
                  <% if (mediaItems.length > 1) { %>
                    <div class="carousel-nav">
                      <button class="carousel-prev"><i class="fa-solid fa-chevron-left"></i></button>
                      <div class="carousel-indicators">
                        <% mediaItems.forEach((_, index) => { %>
                          <span class="carousel-dot <%= index === 0 ? 'active' : '' %>" data-index="<%= index %>"></span>
                        <% }); %>
                      </div>
                      <button class="carousel-next"><i class="fa-solid fa-chevron-right"></i></button>
                    </div>
                  <% } %>
                </div>
              <% } %>
              <% if (showLocked) { %>
                <div class="unlock-info">
                  <i class="fa fa-lock"></i>
                  <span>Unlock for ₦<%= post.unlockPrice %></span>
                  <% if (!isAdminView) { %>
                    <button class="unlock-button" data-content-id="<%= post._id %>" data-creator-id="<%= user._id %>">Unlock</button>
                  <% } %>
                </div>
              <% } %>
              <div class="normal-view-content">
                <% if (!showLocked && post.writeUp) { %>
                  <p class="post-writeUp"><%- post.renderedWriteUp %></p>
                <% } %>
                <% if (post.special) { %>
                  <p class="special-indicator">Special Content - Unlock Price: ₦<%= post.unlockPrice %></p>
                <% } %>
                <span class="post-timestamp">
                  <%= post.createdAt ? formatRelativeTime(post.createdAt) : 'Unknown time' %>
                </span>
                <div class="post-actions">
                  <button class="like-button" data-post-id="<%= post._id %>">
                    <i class="fa-solid fa-heart <%= post.likes.includes(currentUser._id) ? 'liked' : '' %>"></i>
                    <span class="like-count"><%= post.likes ? post.likes.length : 0 %></span>
                  </button>
                  <button class="comment-icon" data-post-id="<%= post._id %>">
                    <i class="fa-solid fa-comment"></i>
                    <span class="comment-count"><%= post.comments ? post.comments.length : 0 %></span>
                  </button>
                  <button class="tip-button" data-post-id="<%= post._id %>" data-creator-id="<%= user._id %>">
                    <i class="fa-solid fa-gift"></i>
                    Tip (<span class="tip-count"><%= post.totalTips || 0 %></span>)
                  </button>
                  <button class="bookmark-button" data-post-id="<%= post._id %>">
                    <i class="fa-solid fa-bookmark <%= currentUser.bookmarks && currentUser.bookmarks.includes(post._id.toString()) ? 'bookmarked' : '' %>"></i>
                  </button>
                </div>
                <div class="comments">
                  <% if (post.comments && post.comments.length > 0) { %>
                    <% post.comments.slice(0, 2).forEach(comment => { %>
                      <div class="comment">
                        <strong><%= comment.user ? comment.user.username : 'Deleted User' %>:</strong> <%= comment.text %>
                      </div>
                    <% }); %>
                    <% if (post.comments.length > 2) { %>
                      <a href="#" class="view-all-comments">View all <%= post.comments.length %> comments</a>
                    <% } %>
                  <% } %>
                </div>
                <div class="comment-form-container hidden">
                  <form class="comment-form" data-post-id="<%= post._id %>">
                    <input type="text" name="comment" placeholder="Write a comment...">
                    <button type="submit">Post</button>
                  </form>
                </div>
                <% if (currentUser && currentUser._id.toString() === user._id.toString()) { %>
                  <form action="/profile/delete-post/<%= post._id %>" method="POST" onsubmit="return confirm('Are you sure you want to delete this post?');" class="delete-post-form">
                    <button type="submit" class="delete-post-btn">Delete Post</button>
                  </form>
                <% } %>
                <% if (currentUser && currentUser.role === 'admin' && adminView) { %>
                  <form action="/profile/admin-delete-post/<%= post._id %>" method="POST" onsubmit="return confirm('Are you sure you want to delete this post?');" class="delete-post-form">
                    <label for="reason-<%= post._id %>">Reason for deletion:</label>
                    <input type="text" name="reason" id="reason-<%= post._id %>" required class="form-input">
                    <button type="submit" class="delete-post-btn">Delete Post</button>
                  </form>
                <% } %>
              </div>
            </div>
            <!-- Compact View -->
            <% if (showLocked) { %>
              <div class="media-item compact-view locked" id="media-post-<%= post._id %>-locked">
                <% if (mediaItems.length > 0) { %>
                  <% mediaItems.forEach((media, index) => { %>
                    <div class="preview-media">
                      <img src="<%= media.url %>" alt="Preview Image" class="post-image blurred">
                    </div>
                  <% }); %>
                <% } %>
              </div>
            <% } else if (mediaItems.length > 0) { %>
              <% mediaItems.forEach((media, index) => { %>
                <div class="media-item compact-view" id="media-post-<%= post._id %>-item-<%= index %>">
                  <img src="<%= media.url %>" 
                       alt="Post Image" 
                       class="post-image fullscreenable" 
                       data-fullscreen-src="<%= media.url %>" 
                       draggable="false" 
                       oncontextmenu="return false;">
                </div>
              <% }); %>
            <% } %>
          <% }); %>
        </div>
      <% } else { %>
        <p class="no-media-message">No pictures available yet.</p>
      <% } %>
    <% } else { %>
      <p class="subscribe-prompt">Subscribe to see pictures from <%= user.username %>.</p>
    <% } %>
  </div>

  <!-- Videos -->
  <div class="media-view" id="media-videos">
    <% if (isSubscribed || (currentUser && currentUser._id.toString() === user._id.toString())) { %>
      <% 
        // Filter posts with at least one video
        const videoPosts = posts.filter(post => 
          post.type !== 'text' && 
          (post.mediaItems.some(media => media.type === 'video') || (post.contentUrl && post.type === 'video'))
        );
      %>
      <% if (videoPosts.length > 0) { %>
        <div class="media-content posts-list">
          <% videoPosts.forEach(post => { %>
            <% 
              const isAdminView = typeof adminView !== 'undefined' ? adminView : false;
              const hasPurchased = currentUser && Array.isArray(currentUser.purchasedContent) && 
                currentUser.purchasedContent.some(p => p.contentId.toString() === post._id.toString());
              const showLocked = post.special && !isAdminView && !hasPurchased;
              // Build media array, filter for videos only
              const mediaItems = (post.mediaItems && post.mediaItems.length > 0 ? 
                post.mediaItems.filter(media => media.type === 'video') : 
                (post.contentUrl && post.type === 'video' ? [{ type: 'video', url: post.contentUrl, contentType: post.contentType }] : [])
              );
            %>
            <!-- Normal View -->
            <div class="media-item normal-view" id="media-post-<%= post._id %>">
              <div class="profile-post-header normal-view-only">
                <div class="profile-creator-info">
                  <a href="/profile/<%= user.username %>">
                    <img src="<%= user.profilePicture || '/images/default-profile.png' %>" alt="<%= user.username %>'s profile picture" class="creator-profile-pic">
                    <div class="profile-name-container">
                      <span class="profile-creator-name">
                        <%= user.profileName || user.username %>
                        <% if (user.role === 'creator') { %>
                          <span class="verified-badge"><i class="fa fa-check-circle"></i></span>
                        <% } %>
                      </span>
                      <span class="profile-username">@<%= user.username %></span>
                    </div>
                  </a>
                </div>
                <div class="post-menu">
                  <button class="post-menu-button" data-post-id="<%= post._id %>" aria-label="Post options">
                    <i class="fa-solid fa-ellipsis"></i>
                  </button>
                </div>
              </div>
              <% if (mediaItems.length > 0) { %>
                <div class="media-carousel-container <%= showLocked ? 'locked' : '' %>">
                  <div class="media-carousel">
                    <% mediaItems.forEach((media, index) => { %>
                      <div class="carousel-item <%= index === 0 ? 'active' : '' %>">
                        <video
                                class="post-video fullscreenable <%= showLocked ? 'blurred' : '' %>"
                                controlsList="nodownload noremoteplayback"
                                data-fullscreen-src="<%= media.url %>"
                                disablePictureInPicture
                                draggable="false"
                                oncontextmenu="return false;"
                                poster="<%= media.posterUrl %>">
                                <source src="<%= media.url %>" type="<%= media.contentType || 'video/mp4' %>">
                                Your browser does not support the video tag.
                              </video>
                      </div>
                    <% }); %>
                  </div>
                  <% if (mediaItems.length > 1) { %>
                    <div class="carousel-nav">
                      <button class="carousel-prev"><i class="fa-solid fa-chevron-left"></i></button>
                      <div class="carousel-indicators">
                        <% mediaItems.forEach((_, index) => { %>
                          <span class="carousel-dot <%= index === 0 ? 'active' : '' %>" data-index="<%= index %>"></span>
                        <% }); %>
                      </div>
                      <button class="carousel-next"><i class="fa-solid fa-chevron-right"></i></button>
                    </div>
                  <% } %>
                </div>
              <% } %>
              <% if (showLocked) { %>
                <div class="unlock-info">
                  <i class="fa fa-lock"></i>
                  <span>Unlock for ₦<%= post.unlockPrice %></span>
                  <% if (!isAdminView) { %>
                    <button class="unlock-button" data-content-id="<%= post._id %>" data-creator-id="<%= user._id %>">Unlock</button>
                  <% } %>
                </div>
              <% } %>
              <div class="normal-view-content">
                <% if (!showLocked && post.writeUp) { %>
                  <p class="post-writeUp"><%- post.renderedWriteUp %></p>
                <% } %>
                <% if (post.special) { %>
                  <p class="special-indicator">Special Content - Unlock Price: ₦<%= post.unlockPrice %></p>
                <% } %>
                <span class="post-timestamp">
                  <%= post.createdAt ? formatRelativeTime(post.createdAt) : 'Unknown time' %>
                </span>
                <div class="post-actions">
                  <button class="like-button" data-post-id="<%= post._id %>">
                    <i class="fa-solid fa-heart <%= post.likes.includes(currentUser._id) ? 'liked' : '' %>"></i>
                    <span class="like-count"><%= post.likes ? post.likes.length : 0 %></span>
                  </button>
                  <button class="comment-icon" data-post-id="<%= post._id %>">
                    <i class="fa-solid fa-comment"></i>
                    <span class="comment-count"><%= post.comments ? post.comments.length : 0 %></span>
                  </button>
                  <button class="tip-button" data-post-id="<%= post._id %>" data-creator-id="<%= user._id %>">
                    <i class="fa-solid fa-gift"></i>
                    Tip (<span class="tip-count"><%= post.totalTips || 0 %></span>)
                  </button>
                  <button class="bookmark-button" data-post-id="<%= post._id %>">
                    <i class="fa-solid fa-bookmark <%= currentUser.bookmarks && currentUser.bookmarks.includes(post._id.toString()) ? 'bookmarked' : '' %>"></i>
                  </button>
                </div>
                <div class="comments">
                  <% if (post.comments && post.comments.length > 0) { %>
                    <% post.comments.slice(0, 2).forEach(comment => { %>
                      <div class="comment">
                        <strong><%= comment.user ? comment.user.username : 'Deleted User' %>:</strong> <%= comment.text %>
                      </div>
                    <% }); %>
                    <% if (post.comments.length > 2) { %>
                      <a href="#" class="view-all-comments">View all <%= post.comments.length %> comments</a>
                    <% } %>
                  <% } %>
                </div>
                <div class="comment-form-container hidden">
                  <form class="comment-form" data-post-id="<%= post._id %>">
                    <input type="text" name="comment" placeholder="Write a comment...">
                    <button type="submit">Post</button>
                  </form>
                </div>
                <% if (currentUser && currentUser._id.toString() === user._id.toString()) { %>
                  <form action="/profile/delete-post/<%= post._id %>" method="POST" onsubmit="return confirm('Are you sure you want to delete this post?');" class="delete-post-form">
                    <button type="submit" class="delete-post-btn">Delete Post</button>
                  </form>
                <% } %>
                <% if (currentUser && currentUser.role === 'admin' && adminView) { %>
                  <form action="/profile/admin-delete-post/<%= post._id %>" method="POST" onsubmit="return confirm('Are you sure you want to delete this post?');" class="delete-post-form">
                    <label for="reason-<%= post._id %>">Reason for deletion:</label>
                    <input type="text" name="reason" id="reason-<%= post._id %>" required class="form-input">
                    <button type="submit" class="delete-post-btn">Delete Post</button>
                  </form>
                <% } %>
              </div>
            </div>
            <!-- Compact View -->
            <% if (showLocked) { %>
              <div class="media-item compact-view locked" id="media-post-<%= post._id %>-locked">
                <% if (mediaItems.length > 0) { %>
                  <% mediaItems.forEach((media, index) => { %>
                    <div class="preview-media">
                      <video
                                class="post-video fullscreenable <%= showLocked ? 'blurred' : '' %>"
                                controlsList="nodownload noremoteplayback"
                                data-fullscreen-src="<%= media.url %>"
                                disablePictureInPicture
                                draggable="false"
                                oncontextmenu="return false;"
                                poster="<%= media.posterUrl %>">
                                <source src="<%= media.url %>" type="<%= media.contentType || 'video/mp4' %>">
                                Your browser does not support the video tag.
                              </video>
                    </div>
                  <% }); %>
                <% } %>
              </div>
            <% } else if (mediaItems.length > 0) { %>
              <% mediaItems.forEach((media, index) => { %>
                <div class="media-item compact-view" id="media-post-<%= post._id %>-item-<%= index %>">
                  <video
                  class="post-video fullscreenable <%= showLocked ? 'blurred' : '' %>"
                  controlsList="nodownload noremoteplayback"
                  data-fullscreen-src="<%= media.url %>"
                  disablePictureInPicture
                  draggable="false"
                  oncontextmenu="return false;"
                  poster="<%= media.posterUrl %>">
                  <source src="<%= media.url %>" type="<%= media.contentType || 'video/mp4' %>">
                  Your browser does not support the video tag.
                </video>
                </div>
              <% }); %>
            <% } %>
          <% }); %>
        </div>
      <% } else { %>
        <p class="no-media-message">No videos available yet.</p>
      <% } %>
    <% } else { %>
      <p class="subscribe-prompt">Subscribe to see videos from <%= user.username %>.</p>
    <% } %>
  </div>
</div>
  <!-- Creator Actions -->


  <!-- Tip Modal for Creator-Level Tip -->
<div id="tipModal" class="tip-modal hidden">
  <div class="tip-modal-content">
    <span id="closeTipModal" class="close-tip-modal">×</span>
    <h3>Send A Tip to <%= user.username %></h3>
    <form id="tipForm">
      <label for="tipAmount">Tip Amount (NGN)</label>
      <input type="number" id="tipAmount" name="tipAmount" min="0" required placeholder="Enter tip amount in NGN">
      <label for="tipMessage">Message (optional)</label>
      <textarea id="tipMessage" name="tipMessage" placeholder="Write a kind message..."></textarea>
      <button type="submit" class="send-tip-button">Send Tip</button>
    </form>
  </div>
</div>
<!-- Share Modal -->
<div id="shareModal" class="share-modal hidden">
  <div class="share-modal-content">
    <span id="closeShareModal" class="close-share-modal">×</span>
    <h3>Share <%= user.username %>'s Profile</h3>
    <div class="share-options">
      <button id="copyLinkButton" class="share-option-button" data-link="">
        <i class="fa fa-copy"></i> Copy Link
      </button>
      <a href="#" id="shareTwitter" class="share-option-button" target="_blank">
        <i class="fa fa-twitter"></i> Share on Twitter/X
      </a>
      <a href="#" id="shareWhatsApp" class="share-option-button" target="_blank">
        <i class="fa fa-whatsapp"></i> Share on WhatsApp
      </a>
      <a href="#" id="shareTelegram" class="share-option-button" target="_blank">
        <i class="fa fa-telegram"></i> Share on Telegram
      </a>
      <a href="#" id="shareFacebook" class="share-option-button" target="_blank">
        <i class="fa fa-facebook"></i> Share on Facebook
      </a>
      <button id="shareNativeButton" class="share-option-button hidden">
        <i class="fa fa-share"></i> Share via...
      </button>
    </div>
  </div>
</div>
<!-- Edit Bundle Modal -->
<div id="editBundleModal" class="edit-bundle-modal hidden" role="dialog" aria-labelledby="editBundleModalTitle" aria-hidden="true">
  <div class="edit-bundle-modal-content">
    <span id="closeEditBundleModal" class="close-edit-bundle-modal" role="button" aria-label="Close">×</span>
    <h3 id="editBundleModalTitle">Edit Subscription Bundle</h3>
    <form id="editBundleForm" action="/profile/edit-bundle/" method="POST">
      <div style="margin-bottom: 10px;">
        <label for="editBundlePrice">Bundle Price (NGN):</label><br>
        <input type="number" name="price" id="editBundlePrice" min="1" step="1" required class="form-input">
      </div>
      <div style="margin-bottom: 10px;">
        <label for="editBundleDiscount">Discount Percentage (optional):</label><br>
        <input type="number" name="discountPercentage" id="editBundleDiscount" min="0" max="100" placeholder="e.g., 10 for 10%" class="form-input">
      </div>
      <div style="margin-bottom: 10px;">
        <label for="editBundleDescription">Bundle Description:</label><br>
        <textarea name="description" id="editBundleDescription" required placeholder="e.g., Access all my content" class="form-textarea"></textarea>
      </div>
      <button type="submit" class="form-button">Update Bundle</button>
    </form>
  </div>
</div>
<!-- Post Action Modal -->
<div id="postActionModal" class="post-action-modal hidden">
  <div class="post-action-modal-content">
    <span id="closePostActionModal" class="close-post-action-modal">×</span>
    <ul class="post-action-options">
      <li>
        <button id="sharePostButton" class="post-action-button" data-post-id="">Share Post</button>
      </li>
      <li>
        <button id="reportPostButton" class="post-action-button" data-post-id="">Report Post</button>
      </li>
    </ul>
  </div>
</div>

<!-- Post Share Modal -->
<div id="postShareModal" class="post-share-modal hidden">
  <div class="post-share-modal-content">
    <span id="closePostShareModal" class="close-post-share-modal">×</span>
    <h3>Share Post</h3>
    <div class="post-share-options">
      <button id="copyPostLinkButton" class="post-share-option-button" data-link="">
        <i class="fa fa-copy"></i> Copy Link
      </button>
      <a href="#" id="sharePostTwitter" class="post-share-option-button" target="_blank">
        <i class="fa fa-twitter"></i> Share on Twitter/X
      </a>
      <a href="#" id="sharePostWhatsApp" class="post-share-option-button" target="_blank">
        <i class="fa fa-whatsapp"></i> Share on WhatsApp
      </a>
      <a href="#" id="sharePostTelegram" class="post-share-option-button" target="_blank">
        <i class="fa fa-telegram"></i> Share on Telegram
      </a>
      <a href="#" id="sharePostFacebook" class="post-share-option-button" target="_blank">
        <i class="fa fa-facebook"></i> Share on Facebook
      </a>
      <button id="sharePostNativeButton" class="post-share-option-button hidden">
        <i class="fa fa-share"></i> Share via...
      </button>
    </div>
  </div>
</div>

<!-- Report Post Modal -->
<div id="reportPostModal" class="report-post-modal hidden">
  <div class="report-post-modal-content">
    <span id="closeReportPostModal" class="close-report-post-modal">×</span>
    <h3>Report Post</h3>
    <form id="reportPostForm">
      <label for="reportReason">Reason for Report:</label>
      <select id="reportReason" name="reason" required class="form-select">
        <option value="" disabled selected>Select a reason</option>
        <option value="Violates Elitefans Terms of Service">Violates Elitefans Terms of Service</option>
        <option value="Contains Copyrighted Material (DMCA)">Contains Copyrighted Material (DMCA)</option>
        <option value="Child Sexual Abuse Material (CSAM)">Child Sexual Abuse Material (CSAM)</option>
        <option value="Report Spam">Report Spam</option>
        <option value="Report Abuse">Report Abuse</option>
      </select>
      <label for="reportDetails">Additional Details (optional):</label>
      <textarea id="reportDetails" name="details" placeholder="Provide more details..." class="form-textarea"></textarea>
      <button type="submit" class="report-submit-button">Submit Report</button>
    </form>
  </div>
</div>
<!-- Lightbox HTML with custom controls -->
<div id="lightbox" class="hidden">
  <div id="lb-backdrop"></div>
  <div id="lb-content">
    <button id="lb-close" aria-label="Close fullscreen">×</button>
    <img id="lb-img" class="lb-media" alt="">
    <video id="lb-vid" class="lb-media" controlsList="nodownload noremoteplayback" disablePictureInPicture></video>
    
    <!-- Custom video controls -->
    <div class="custom-controls" id="custom-controls">
      <button class="control-btn" id="play-pause">▶</button>
      <div class="progress-container" id="progress-container">
        <div class="progress-bar" id="progress-bar"></div>
      </div>
      <button class="control-btn" id="mute-unmute">🔊</button>
    </div>
  </div>
</div>
  

   <!-- Sort Modal -->
   <div class="sort-modal" style="display: none;">
    <div class="sort-modal-content">
      <h3>Sort Posts</h3>
      <form id="sort-form">
        <div class="sort-option">
          <label>
            <input type="radio" name="sortBy" value="createdAt" checked>
            Latest Posts
          </label>
        </div>
        <div class="sort-option">
          <label>
            <input type="radio" name="sortBy" value="totalTips">
            Highest Tips
          </label>
        </div>
        <div class="sort-option">
          <label>
            <input type="radio" name="sortBy" value="likes">
            Highest Likes
          </label>
        </div>
        <div class="sort-order">
          <label>
            <input type="radio" name="order" value="desc" checked>
            Descending
          </label>
          <label>
            <input type="radio" name="order" value="asc">
            Ascending
          </label>
        </div>
        <div class="sort-buttons">
          <button type="submit" class="apply-sort">Apply</button>
          <button type="button" class="cancel-sort">Cancel</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  // Helper function to safely get data attribute boolean
  function getDataBoolean(element, attributeName) {
    return element && element.dataset[attributeName] === 'true';
  }
 
  document.addEventListener('DOMContentLoaded', function() {
    const profileContainer = document.querySelector('.profile-container');
    const isDevEnv = profileContainer && profileContainer.dataset.env === 'development'; // Check environment
    const isCreatorViewingOwnProfile = getDataBoolean(profileContainer, 'isCreatorViewing');
    const isVisitorSubscribed = getDataBoolean(profileContainer, 'isSubscribed');
    const isLoggedIn = getDataBoolean(profileContainer, 'currentUser');
    // Select all required elements
  const lightbox = document.getElementById('lightbox');
  const lbBackdrop = document.getElementById('lb-backdrop');
  const lbContent = document.getElementById('lb-content');
  const lbClose = document.getElementById('lb-close');
  const lbImg = document.getElementById('lb-img');
  const lbVid = document.getElementById('lb-vid');
  const customControls = document.getElementById('custom-controls');
  const playPauseBtn = document.getElementById('play-pause');
  const progressContainer = document.getElementById('progress-container');
  const progressBar = document.getElementById('progress-bar');
  const muteUnmuteBtn = document.getElementById('mute-unmute');
  

  // Check if all required elements exist
  if (!lightbox || !lbBackdrop || !lbContent || !lbClose || !lbImg || !lbVid || !customControls || !playPauseBtn || !progressContainer || !progressBar || !muteUnmuteBtn) {
    if (isDevEnv) {
      console.error('One or more lightbox elements are missing:', {
        lightbox, lbBackdrop, lbContent, lbClose, lbImg, lbVid, customControls, playPauseBtn, progressContainer, progressBar, muteUnmuteBtn
      });
    }
    return;
  }

  // Prevent right-click context menu on the entire lightbox
  lightbox.addEventListener('contextmenu', e => {
    e.preventDefault();
    return false;
  });

  // Prevent double-click to avoid triggering native fullscreen
  lightbox.addEventListener('dblclick', e => {
    e.preventDefault();
    e.stopPropagation();
  });

  // Open lightbox function
  function openLightbox(src, isVideo, time = 0) {
    if (isDevEnv) console.log('Opening lightbox:', { src, isVideo, time });

    if (isVideo) {
      lbImg.style.display = 'none';
      lbVid.src = src;
      lbVid.currentTime = time;
      lbVid.style.display = 'block';
      customControls.style.display = 'flex';

      // Remove native controls and add security attributes
      lbVid.removeAttribute('controls');
      lbVid.setAttribute('controlsList', 'nodownload noremoteplayback');
      lbVid.setAttribute('disablePictureInPicture', '');
      lbVid.setAttribute('oncontextmenu', 'return false;');

      // Initialize video state
      updatePlayPauseButton();
      setupVideoListeners();

      // Attempt auto-play
      lbVid.play().catch(e => {
        if (isDevEnv) console.log('Autoplay prevented:', e);
        updatePlayPauseButton();
      });
    } else {
      lbVid.pause();
      lbVid.removeAttribute('src');
      lbVid.style.display = 'none';
      customControls.style.display = 'none';
      lbImg.src = src;
      lbImg.style.display = 'block';
    }

    lightbox.classList.remove('hidden');
    document.body.style.overflow = 'hidden';

    // Prevent native fullscreen
    document.addEventListener('fullscreenchange', preventNativeFullscreen);
  }

  // Setup video event listeners
  function setupVideoListeners() {
    lbVid.addEventListener('timeupdate', updateProgressBar);
    lbVid.addEventListener('play', updatePlayPauseButton);
    lbVid.addEventListener('pause', updatePlayPauseButton);
    lbVid.addEventListener('volumechange', updateMuteButton);
  }

  // Update progress bar
  function updateProgressBar() {
    const percentage = (lbVid.currentTime / lbVid.duration) * 100;
    progressBar.style.width = `${percentage}%`;
  }

  // Update play/pause button text
  function updatePlayPauseButton() {
    playPauseBtn.textContent = lbVid.paused ? '▶' : '⏸';
  }

  // Update mute/unmute button text
  function updateMuteButton() {
    muteUnmuteBtn.textContent = lbVid.muted ? '🔇' : '🔊';
  }

  // Play/Pause button click handler
  playPauseBtn.addEventListener('click', () => {
    if (lbVid.paused) {
      lbVid.play();
    } else {
      lbVid.pause();
    }
    updatePlayPauseButton();
  });

  // Progress bar click handler
  progressContainer.addEventListener('click', (e) => {
    const rect = progressContainer.getBoundingClientRect();
    const pos = (e.clientX - rect.left) / rect.width;
    lbVid.currentTime = pos * lbVid.duration;
  });

  // Mute/Unmute button click handler
  muteUnmuteBtn.addEventListener('click', () => {
    lbVid.muted = !lbVid.muted;
    updateMuteButton();
  });

  // Prevent native fullscreen mode
  function preventNativeFullscreen() {
    if (document.fullscreenElement) {
      document.exitFullscreen();
      if (isDevEnv) console.log('Blocked native fullscreen attempt');
    }
  }

  // Attach click handlers to fullscreenable media
  document.querySelectorAll('.fullscreenable').forEach(el => {
    el.style.cursor = 'zoom-in';
    el.addEventListener('click', e => {
      e.preventDefault();
      e.stopPropagation();
      const src = el.dataset.fullscreenSrc || el.src || el.currentSrc;
      if (!src) {
        if (isDevEnv) console.warn('No src found for fullscreenable element:', el);
        return;
      }
      const isVideo = el.tagName.toLowerCase() === 'video';
      const time = isVideo ? el.currentTime : 0;
      if (isDevEnv) console.log('Fullscreenable clicked:', { src, isVideo, time });
      openLightbox(src, isVideo, time);
    });

    // Prevent double-click and context menu on media
    el.addEventListener('dblclick', e => {
      e.preventDefault();
      e.stopPropagation();
    });
    el.addEventListener('contextmenu', e => {
      e.preventDefault();
      return false;
    });
  });

  // Close lightbox function
  function close() {
    lightbox.classList.add('hidden');
    lbVid.pause();
    lbVid.removeAttribute('src');
    lbImg.removeAttribute('src');
    document.body.style.overflow = '';
    document.removeEventListener('fullscreenchange', preventNativeFullscreen);

    // Clean up video event listeners
    lbVid.removeEventListener('timeupdate', updateProgressBar);
    lbVid.removeEventListener('play', updatePlayPauseButton);
    lbVid.removeEventListener('pause', updatePlayPauseButton);
    lbVid.removeEventListener('volumechange', updateMuteButton);

    // Reset drag state
    lbContent.style.transform = 'translateY(0)';
    lbContent.style.transition = '';
    lightbox.style.background = '';
  }

  // Close event handlers
  lbClose.addEventListener('click', close);
  lbBackdrop.addEventListener('click', close);
  document.addEventListener('keydown', e => {
    if (e.key === 'Escape') close();
  });

  // Prevent keyboard shortcuts in lightbox
  lightbox.addEventListener('keydown', e => {
    if (e.ctrlKey || e.metaKey) {
      e.preventDefault();
      return false;
    }
  });

  // Drag-to-close functionality for mobile
  let touchStartY = 0;
  let touchCurrentY = 0;
  let isDragging = false;
  const dragThreshold = window.innerHeight * 0.3; // Close if dragged 30% of screen height

  lbContent.addEventListener('touchstart', e => {
    // Only allow dragging if not interacting with custom controls
    if (e.target.closest('#custom-controls') || e.target.closest('#lb-close')) return;
    touchStartY = e.touches[0].clientY;
    isDragging = true;
    lbContent.style.transition = 'none'; // Disable transitions during drag
    if (isDevEnv) console.log('Touch start:', { touchStartY });
  });

  lbContent.addEventListener('touchmove', e => {
    if (!isDragging) return;
    touchCurrentY = e.touches[0].clientY;
    const deltaY = touchCurrentY - touchStartY;

    // Only allow downward drag
    if (deltaY > 0) {
      lbContent.style.transform = `translateY(${deltaY}px)`;
      // Fade backdrop opacity based on drag distance
      const opacity = 1 - Math.min(deltaY / dragThreshold, 1);
      lightbox.style.background = `rgba(0, 0, 0, ${opacity * 0.9})`;
      if (isDevEnv) console.log('Touch move:', { deltaY, opacity });
    }
  });

  lbContent.addEventListener('touchend', e => {
    if (!isDragging) return;
    isDragging = false;
    const deltaY = touchCurrentY - touchStartY;

    if (deltaY > dragThreshold) {
      // Animate close
      lbContent.style.transition = 'transform 0.3s ease, opacity 0.3s ease';
      lbContent.style.transform = `translateY(${window.innerHeight}px)`;
      lightbox.style.background = 'rgba(0, 0, 0, 0)';
      setTimeout(close, 300); // Close after animation
      if (isDevEnv) console.log('Drag-to-close triggered:', { deltaY });
    } else {
      // Animate back to original position
      lbContent.style.transition = 'transform 0.3s ease';
      lbContent.style.transform = 'translateY(0)';
      lightbox.style.background = 'rgba(0, 0, 0, 0.9)';
      if (isDevEnv) console.log('Drag cancelled:', { deltaY });
    }
  });

  // Debug: Log initialization
  if (isDevEnv) console.log('Lightbox script initialized')
   // --- Free Subscription Form ---
document.querySelectorAll('.subscribe-free-bundle-form').forEach(form => {
  form.addEventListener('submit', async function(e) {
    e.preventDefault();
    if (!isLoggedIn) {
      try {
        const redirectResponse = await fetch('/store-redirect', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ redirectTo: `/profile/<%= user.username %>` })
        });
        if (!redirectResponse.ok && isDevEnv) {
          console.error('Failed to store redirect:', redirectResponse.status);
        }
      } catch (error) {
        if (isDevEnv) console.error('Error storing redirect:', error.message);
      }
      window.location.href = `/?creator=<%= encodeURIComponent(user.username) %>`;
      return;
    }

    const submitButton = form.querySelector('button[type="submit"]');
    const originalHtml = submitButton.innerHTML;
    submitButton.innerHTML = 'Processing...';
    submitButton.disabled = true;

    try {
      const formData = new FormData(form);
      const data = {
        creatorId: formData.get('creatorId'),
        creatorUsername: formData.get('creatorUsername')
      };
      const response = await fetch('/profile/subscribe-free', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });
      const result = await response.json();
      if (response.ok && result.status === 'success') {
        alert(result.message || 'Subscribed successfully.');
        window.location.href = result.redirect || `/profile/<%= user.username %>`;
      } else {
        if (isDevEnv) console.error('Free subscription error:', result);
        alert(result.message || 'Error subscribing. Please try again.');
        submitButton.innerHTML = originalHtml;
        submitButton.disabled = false;
      }
    } catch (err) {
      if (isDevEnv) console.error('Error subscribing to free bundle:', err.message);
      alert('Error subscribing. Please try again.');
      submitButton.innerHTML = originalHtml;
      submitButton.disabled = false;
    }
  });
});

    // --- Subscription Dropdown Toggle ---
    const toggleBtn = document.getElementById('toggleBundlesBtn');
    const dropdown = document.getElementById('subscriptionDropdown');

    if (toggleBtn && dropdown) {
      dropdown.classList.add('hidden');
      toggleBtn.addEventListener('click', async (e) => {
        e.stopPropagation();
        if (!isLoggedIn) {
          try {
            const redirectResponse = await fetch('/store-redirect', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ redirectTo: `/profile/<%= user.username %>` })
            });
            if (!redirectResponse.ok && isDevEnv) {
              console.error('Failed to store redirect:', redirectResponse.status);
            }
          } catch (error) {
            if (isDevEnv) console.error('Error storing redirect:', error.message);
          }
          window.location.href = `/?creator=<%= encodeURIComponent(user.username) %>`;
          return;
        }
        dropdown.classList.toggle('hidden');
        toggleBtn.classList.toggle('active', !dropdown.classList.contains('hidden'));
      });
      document.addEventListener('click', (e) => {
        if (!dropdown.contains(e.target) && !toggleBtn.contains(e.target)) {
          dropdown.classList.add('hidden');
          if (toggleBtn) toggleBtn.classList.remove('active');
        }
      });
    } else if (isDevEnv) {
      console.warn('Missing toggleBundlesBtn or subscriptionDropdown');
    }

    // --- Toggle Free Subscription Confirmation ---
document.querySelector('.toggle-free-subscription-form')?.addEventListener('submit', (e) => {
  const isEnabling = e.target.querySelector('button').textContent.includes('Enable');
  if (isEnabling && !confirm('Enabling free mode will delete all paid bundles. Continue?')) {
    e.preventDefault();
  }
});
document.querySelectorAll('form[action^="/profile/unsubscribe/"]').forEach(form => {
  form.addEventListener('submit', async function(e) {
    e.preventDefault();
    const submitButton = form.querySelector('button[type="submit"]');
    const originalText = submitButton.textContent;
    submitButton.textContent = 'Unsubscribing...';
    submitButton.disabled = true;

    try {
      const response = await fetch(form.action, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
      });
      const result = await response.json();
      if (response.ok && result.status === 'success') {
        alert(result.message || 'Unsubscribed successfully.');
        window.location.reload();
      } else {
        alert(result.message || 'Error unsubscribing. Please try again.');
        submitButton.textContent = originalText;
        submitButton.disabled = false;
      }
    } catch (err) {
      console.error('Error unsubscribing:', err.message);
      alert('Error unsubscribing. Please try again.');
      submitButton.textContent = originalText;
      submitButton.disabled = false;
    }
  });
});
// --- Edit Bundle Form ---
// --- Edit Bundle Modal and Form ---
const editBundleModal = document.getElementById('editBundleModal');
const editBundleForm = document.getElementById('editBundleForm');
const closeEditBundleModal = document.getElementById('closeEditBundleModal');
const editBundlePrice = document.getElementById('editBundlePrice');
const editBundleDiscount = document.getElementById('editBundleDiscount');
const editBundleDescription = document.getElementById('editBundleDescription');

if (editBundleModal && editBundleForm && closeEditBundleModal && editBundlePrice && editBundleDiscount && editBundleDescription) {
  // Handle "Edit" button clicks
  document.querySelectorAll('.edit-bundle-button').forEach(button => {
    button.addEventListener('click', (e) => {
      e.preventDefault();
      const bundleId = button.dataset.bundleId;
      const price = button.dataset.price;
      const description = button.dataset.description;
      const discountPercentage = button.dataset.discountPercentage;

      if (!bundleId) {
        if (isDevEnv) console.error('Bundle ID not found on edit button');
        alert('Error: Bundle ID missing.');
        return;
      }

      // Populate form fields
      editBundleForm.action = `/profile/edit-bundle/${bundleId}`;
      editBundlePrice.value = price;
      editBundleDiscount.value = discountPercentage || 0;
      editBundleDescription.value = description;

      if (isDevEnv) {
        console.log('Populating edit form:', {
          bundleId,
          price,
          discountPercentage,
          description
        });
      }

      // Show the modal
      editBundleModal.classList.remove('hidden');
    });
  });

  // Close modal on close button click
  closeEditBundleModal.addEventListener('click', () => {
    editBundleModal.classList.add('hidden');
    editBundleForm.reset();
  });

  // Close modal when clicking outside the modal content
  editBundleModal.addEventListener('click', (e) => {
    if (e.target === editBundleModal) {
      editBundleModal.classList.add('hidden');
      editBundleForm.reset();
    }
  });

  // Handle form submission
  editBundleForm.addEventListener('submit', async (e) => {
    e.preventDefault();

    const rawPrice = editBundlePrice.value.trim();
    const price = Number(rawPrice);
    const discount = editBundleDiscount.value ? Number(editBundleDiscount.value) : 0;
    const description = editBundleDescription.value.trim();

    if (isDevEnv) {
      console.log('Form inputs:', {
        rawPrice,
        convertedPrice: price,
        discount,
        description
      });
    }

    if (!rawPrice || isNaN(price) || price <= 0) {
      alert('Please enter a valid price greater than 0.');
      if (isDevEnv) console.warn('Invalid price input:', rawPrice);
      return;
    }

    if (discount < 0 || discount > 100) {
      alert('Discount percentage must be between 0 and 100.');
      if (isDevEnv) console.warn('Invalid discount input:', editBundleDiscount.value);
      return;
    }

    if (!description) {
      alert('Please enter a bundle description.');
      if (isDevEnv) console.warn('Empty description input');
      return;
    }

    const data = {
      price,
      description,
      discountPercentage: discount
    };

    if (isDevEnv) {
      console.log('Data sent to server:', data);
    }

    const submitButton = editBundleForm.querySelector('.form-button');
    const originalText = submitButton.textContent;
    submitButton.textContent = 'Updating...';
    submitButton.disabled = true;

    const bundleId = editBundleForm.action.split('/').pop();
    const actionUrl = `/profile/edit-bundle/${bundleId}`;
    if (isDevEnv) console.log('Submitting to URL:', actionUrl);

    try {
      const response = await fetch(actionUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });

      // Check if response is JSON
      const contentType = response.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        if (isDevEnv) console.error('Unexpected non-JSON response:', response.status, response.statusText);
        throw new Error('Unexpected response from server');
      }

      const result = await response.json();
      if (isDevEnv) console.log('Server response:', result);

      if (response.ok && result.status === 'success') {
        alert(result.message || 'Bundle updated successfully.');
        window.location.reload();
      } else {
        if (isDevEnv) console.error('Bundle update error:', result);
        alert(result.message || 'Error updating bundle. Please try again.');
        submitButton.textContent = originalText;
        submitButton.disabled = false;
      }
    } catch (err) {
      if (isDevEnv) console.error('Fetch error updating bundle:', err.message);
      alert('Error updating bundle. Please try again.');
      submitButton.textContent = originalText;
      submitButton.disabled = false;
    } finally {
      editBundleModal.classList.add('hidden');
      editBundleForm.reset();
    }
  });
} else if (isDevEnv) {
  console.warn('Edit bundle modal or form elements not found:', {
    editBundleModal: !!editBundleModal,
    editBundleForm: !!editBundleForm,
    closeEditBundleModal: !!closeEditBundleModal,
    editBundlePrice: !!editBundlePrice,
    editBundleDiscount: !!editBundleDiscount,
    editBundleDescription: !!editBundleDescription
  });
}
// --- Create Bundle Form AJAX ---
const createBundleForm = document.getElementById('createBundleForm');
if (createBundleForm) {
  createBundleForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const priceInput = document.getElementById('bundlePrice');
    const discountInput = document.getElementById('bundleDiscount');
    const durationInput = document.getElementById('bundleDuration');
    const descriptionInput = document.getElementById('bundleDescription');

    const price = Number(priceInput.value.trim());
    const discount = Number(discountInput.value) || 0;
    const duration = durationInput.value;
    const description = descriptionInput.value.trim();

    const submitButton = createBundleForm.querySelector('.form-button');
    const originalText = submitButton.textContent;

    if (isDevEnv) {
      console.log('Create form inputs:', { price, discount, duration, description });
    }

    if (isNaN(price) || price <= 0) {
      alert('Please enter a valid price greater than 0.');
      if (isDevEnv) console.warn('Invalid price:', price);
      return;
    }
    if (discount < 0 || discount > 100) {
      alert('Discount percentage must be between 0 and 100.');
      if (isDevEnv) console.warn('Invalid discount:', discount);
      return;
    }
    if (!duration || !['1 day', '1 month', '3 months', '6 months', '1 year'].includes(duration)) {
      alert('Please select a valid duration.');
      if (isDevEnv) console.warn('Invalid duration:', duration);
      return;
    }
    if (!description) {
      alert('Please enter a bundle description.');
      if (isDevEnv) console.warn('Empty description');
      return;
    }

    const data = {
      price,
      discountPercentage: discount,
      duration,
      description,
    };

    if (isDevEnv) {
      console.log('Data sent to server:', data);
    }

    submitButton.textContent = 'Creating...';
    submitButton.disabled = true;

    try {
      const response = await fetch('/profile/create-bundle', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });

      // Check if response is JSON
      const contentType = response.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        if (isDevEnv) console.error('Unexpected non-JSON response:', response.status, response.statusText);
        throw new Error('Unexpected response from server');
      }

      const result = await response.json();
      if (isDevEnv) console.log('Server response:', result);

      if (response.ok && result.status === 'success') {
        alert(result.message || 'Bundle created successfully.');
        window.location.href = result.redirect || '/profile';
      } else {
        if (isDevEnv) console.error('Bundle creation error:', result);
        alert(result.message || 'Error creating bundle. Please try again.');
        submitButton.textContent = originalText;
        submitButton.disabled = false;
      }
    } catch (err) {
      if (isDevEnv) console.error('Error creating bundle:', err.message);
      alert('Error creating bundle. Please try again.');
      submitButton.textContent = originalText;
      submitButton.disabled = false;
    }
  });
}
    // --- Toggle Unlock Price based on Special Checkbox ---
    if (isCreatorViewingOwnProfile) {
      const specialCheckbox = document.getElementById('specialCheckbox');
      const unlockPriceContainer = document.getElementById('unlockPriceContainer');
      const unlockPriceInput = document.getElementById('unlockPrice');

      if (specialCheckbox && unlockPriceContainer && unlockPriceInput) {
        const togglePriceVisibility = () => {
          if (specialCheckbox.checked) {
            unlockPriceContainer.classList.remove('hidden');
            unlockPriceInput.required = true;
          } else {
            unlockPriceContainer.classList.add('hidden');
            unlockPriceInput.required = false;
          }
        };
        togglePriceVisibility();
        specialCheckbox.addEventListener('change', togglePriceVisibility);
      }
    }

    // --- Unlock Special Content ---
    document.querySelectorAll('.unlock-button').forEach(button => {
      button.addEventListener('click', async function(e) {
        e.preventDefault();
        e.stopPropagation();
        const contentId = this.dataset.contentId;
        const creatorId = this.dataset.creatorId;
        const originalText = this.textContent;
        this.textContent = 'Processing...';
        this.disabled = true;
        try {
          const response = await fetch('/profile/unlock-special-content', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ contentId, creatorId })
          });
          const result = await response.json();
          if (response.ok && result.status === 'success' && result.data.paymentLink) {
            this.textContent = 'Redirecting...';
            window.location.href = result.data.paymentLink;
          } else {
            alert(result.message || 'Failed to initialize payment.');
            this.textContent = originalText;
            this.disabled = false;
          }
        } catch (error) {
          if (isDevEnv) console.error('Error unlocking content:', error.message);
          alert('Error unlocking.');
          this.textContent = originalText;
          this.disabled = false;
        }
      });
    });

    // --- Like Button ---
    document.querySelectorAll('.like-button').forEach(button => {
      button.addEventListener('click', async function() {
        const postId = this.dataset.postId;
        const likeIcon = this.querySelector('i');
        const likeCountSpan = this.querySelector('.like-count');
        try {
          const res = await fetch('/profile/posts/' + postId + '/like', { method: 'POST' });
          const data = await res.json();
          if (res.ok) {
            likeCountSpan.textContent = data.likes;
            likeIcon.classList.toggle('liked', data.userLiked);
          } else {
            alert(data.message || 'Could not like post.');
          }
        } catch (error) {
          if (isDevEnv) console.error('Error liking post:', error.message);
          alert('Error liking post.');
        }
      });
    });

    // --- Comment Icon Toggle ---
    document.querySelectorAll('.comment-icon').forEach(button => {
      button.addEventListener('click', function() {
        const parentElement = this.closest('.post-card') || this.closest('.media-item');
        if (!parentElement) {
          if (isDevEnv) console.warn('Parent element not found for comment icon');
          return;
        }
        const commentContainer = parentElement.querySelector('.comment-form-container');
        if (!commentContainer) {
          if (isDevEnv) console.warn('Comment form container not found');
          return;
        }
        const isHidden = commentContainer.classList.contains('hidden');
        commentContainer.classList.toggle('hidden');
        if (isHidden) {
          const input = commentContainer.querySelector('input[name="comment"]');
          if (input) input.focus();
        }
      });
    });

    // --- Comment Form Submit ---
    document.querySelectorAll('.comment-form').forEach(form => {
      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        const postId = this.dataset.postId;
        const commentInput = this.querySelector('input[name="comment"]');
        const commentText = commentInput.value.trim();
        const submitButton = this.querySelector('button[type="submit"]');
        if (!commentText) return;
        const originalButtonText = submitButton.textContent;
        submitButton.textContent = 'Posting...';
        submitButton.disabled = true;
        try {
          const res = await fetch('/profile/posts/' + postId + '/comment', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ text: commentText })
          });
          if (res.ok) {
            const data = await res.json();
            const parentElement = this.closest('.post-card') || this.closest('.media-item');
            const commentsDiv = parentElement.querySelector('.comments');
            const newCommentDiv = document.createElement('div');
            newCommentDiv.classList.add('comment');
            const username = data.comment && data.comment.user ? data.comment.user.username : 'You';
            newCommentDiv.innerHTML = `<strong>${username}:</strong> ${data.comment.text}`;
            const viewAllLink = commentsDiv.querySelector('.view-all-comments');
            if (viewAllLink) {
              commentsDiv.insertBefore(newCommentDiv, viewAllLink);
            } else {
              commentsDiv.appendChild(newCommentDiv);
            }
            const commentCountSpan = parentElement.querySelector('.comment-count');
            if (commentCountSpan && data.commentCount !== undefined) commentCountSpan.textContent = data.commentCount;
            commentInput.value = '';
            this.closest('.comment-form-container').classList.add('hidden');
          } else {
            const data = await res.json();
            alert(data.message || 'Failed to post comment.');
          }
        } catch (error) {
          if (isDevEnv) console.error('Error posting comment:', error.message);
          alert('Error posting comment.');
        } finally {
          submitButton.textContent = originalButtonText;
          submitButton.disabled = false;
        }
      });
    });

    // --- Bookmark Button ---
    document.querySelectorAll('.bookmark-button').forEach(button => {
      button.addEventListener('click', async function() {
        const postId = this.dataset.postId;
        const bookmarkIcon = this.querySelector('i');
        try {
          const res = await fetch('/profile/posts/' + postId + '/bookmark', { method: 'POST' });
          const data = await res.json();
          if (res.ok) {
            bookmarkIcon.classList.toggle('bookmarked', data.isBookmarked);
          } else {
            alert(data.message || 'Could not bookmark post.');
          }
        } catch (error) {
          if (isDevEnv) console.error('Error bookmarking post:', error.message);
          alert('Error bookmarking post.');
        }
      });
    });

   // --- AJAX for Bundle Subscription ---
document.querySelectorAll('.subscribe-bundle-form').forEach(form => {
  form.addEventListener('submit', async function(e) {
    e.preventDefault();
    if (!isLoggedIn) {
      try {
        const redirectResponse = await fetch('/store-redirect', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ redirectTo: `/profile/<%= user.username %>` })
        });
        if (!redirectResponse.ok && isDevEnv) {
          console.error('Failed to store redirect:', redirectResponse.status);
        }
      } catch (error) {
        if (isDevEnv) console.error('Error storing redirect:', error.message);
      }
      window.location.href = `/?creator=<%= encodeURIComponent(user.username) %>`;
      return;
    }

    const submitButton = form.querySelector('button[type="submit"]');
    const originalHtml = submitButton.innerHTML;
    submitButton.innerHTML = 'Processing...';
    submitButton.disabled = true;

    try {
      const formData = new FormData(form);
      const data = {
        creatorId: formData.get('creatorId'),
        bundleId: formData.get('bundleId'),
        creatorUsername: formData.get('creatorUsername')
      };
      const response = await fetch('/profile/subscribe', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });
      const result = await response.json();
      if (response.ok && result.status === 'success') {
        if (result.data && result.data.paymentLink) {
          submitButton.innerHTML = 'Redirecting...';
          window.location.href = result.data.paymentLink;
        } else {
          alert(result.message || 'Subscribed successfully.');
          window.location.href = result.redirect || `/profile/<%= user.username %>`;
        }
      } else {
        if (isDevEnv) console.error('Bundle subscription error:', result);
        alert(result.message || 'Error subscribing. Please try again.');
        submitButton.innerHTML = originalHtml;
        submitButton.disabled = false;
      }
    } catch (err) {
      if (isDevEnv) console.error('Error subscribing to bundle:', err.message);
      alert('Error subscribing. Please try again.');
      submitButton.innerHTML = originalHtml;
      submitButton.disabled = false;
    }
  });
});
    // --- Tip Button (Post-specific) ---
    document.querySelectorAll('.tip-button').forEach(button => {
      button.addEventListener('click', async function() {
        const postId = this.dataset.postId;
        const creatorId = this.dataset.creatorId;
        let tipAmountNum = NaN;
        while (isNaN(tipAmountNum) || tipAmountNum <= 0) {
          const tipAmountStr = prompt("Enter tip amount in NGN (e.g., 500):");
          if (tipAmountStr === null) return;
          tipAmountNum = parseFloat(tipAmountStr);
          if (isNaN(tipAmountNum) || tipAmountNum <= 0) alert("Please enter a valid positive number.");
        }
        const originalHtml = this.innerHTML;
        this.innerHTML = 'Processing...';
        this.disabled = true;
        try {
          const response = await fetch('/profile/posts/' + postId + '/tip', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ tipAmount: tipAmountNum, creatorId: creatorId })
          });
          const result = await response.json();
          if (response.ok && result.status === 'success' && result.data.paymentLink) {
            this.innerHTML = 'Redirecting...';
            window.location.href = result.data.paymentLink;
          } else {
            alert(result.message || 'Failed to initialize tip payment.');
            this.innerHTML = originalHtml;
            this.disabled = false;
          }
        } catch (error) {
          if (isDevEnv) console.error('Error processing tip:', error.message);
          alert('Error processing tip.');
          this.innerHTML = originalHtml;
          this.disabled = false;
        }
      });
    });

    // --- Tip Modal ---
    if (isVisitorSubscribed && !isCreatorViewingOwnProfile) {
      const initializeTipModal = () => {
        const tipProfileButtons = document.querySelectorAll('.tip-profile-button');
        const tipModal = document.getElementById('tipModal');
        const closeTipModal = document.getElementById('closeTipModal');
        const tipForm = document.getElementById('tipForm');

        let currentCreatorId = null;

        if (!tipModal || tipProfileButtons.length === 0) {
          if (isDevEnv) console.warn('Tip modal or buttons not found');
          return;
        }

        tipProfileButtons.forEach(button => {
          button.addEventListener('click', function() {
            currentCreatorId = this.dataset.creatorId;
            tipModal.classList.add('active');
          });
        });

        closeTipModal.addEventListener('click', () => {
          tipModal.classList.remove('active');
          tipForm.reset();
        });

        tipModal.addEventListener('click', (e) => {
          if (e.target === tipModal) {
            tipModal.classList.remove('active');
            tipForm.reset();
          }
        });

        tipForm.addEventListener('submit', async function(e) {
          e.preventDefault();
          const tipAmount = parseFloat(document.getElementById('tipAmount').value);
          const tipMessage = document.getElementById('tipMessage').value.trim();
          const submitButton = tipForm.querySelector('.send-tip-button');
          const originalText = submitButton.textContent;

          if (!tipAmount || tipAmount <= 0) {
            alert('Please enter a valid tip amount greater than 0.');
            return;
          }

          submitButton.textContent = 'Processing...';
          submitButton.disabled = true;

          try {
            const response = await fetch(`/profile/tip-creator/${currentCreatorId}`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ tipAmount, tipMessage })
            });
            const result = await response.json();
            if (response.ok && result.status === 'success' && result.data.paymentLink) {
              submitButton.textContent = 'Redirecting...';
              window.location.href = result.data.paymentLink;
            } else {
              alert(result.message || 'Failed to initialize tip payment.');
              submitButton.textContent = originalText;
              submitButton.disabled = false;
            }
          } catch (err) {
            if (isDevEnv) console.error('Error processing profile tip:', err.message);
            alert('Error processing tip.');
            submitButton.textContent = originalText;
            submitButton.disabled = false;
          } finally {
            tipModal.classList.remove('active');
            tipForm.reset();
          }
        });
      };

      initializeTipModal();
    }

  // --- Tab Switching ---
const tabButtons = document.querySelectorAll('.tab-button');
const tabContents = document.querySelectorAll('.tab-content');
tabButtons.forEach(button => {
  button.addEventListener('click', () => {
    tabButtons.forEach(btn => btn.classList.remove('active'));
    tabContents.forEach(content => content.classList.add('hidden'));
    button.classList.add('active');
    document.getElementById(`${button.dataset.tab}-tab`).classList.remove('hidden');
  });
});

// --- Sub-Tab Switching ---
// Posts Subtabs
const postSubtabButtons = document.querySelectorAll('.posts-subtabs .subtab-button');
const postsContainer = document.querySelector('#posts-tab .posts-container');
const postsList = postsContainer ? postsContainer.querySelector('.posts-list') : null;
const posts = postsList ? postsList.querySelectorAll('.post-card') : [];
const noPostsMessage = postsList ? postsList.querySelector('.no-posts-message') : null;

// Function to filter posts based on subtab
function filterPosts(selectedSubtab) {
  const subtab = selectedSubtab.toLowerCase();
  let visiblePosts = 0;

  posts.forEach(post => {
    const postCategory = (post.getAttribute('data-category') || 'none').toLowerCase();
    if (subtab === 'all' || subtab === postCategory) {
      post.style.display = 'block';
      visiblePosts++;
    } else {
      post.style.display = 'none';
    }
  });

  if (noPostsMessage) {
    noPostsMessage.style.display = visiblePosts === 0 ? 'block' : 'none';
    noPostsMessage.textContent = subtab === 'all' ? 
      'This creator hasn\'t posted anything yet.' : 
      subtab === 'none' ? 
        'No uncategorized posts.' : 
        `No posts in the ${subtab.charAt(0).toUpperCase() + subtab.slice(1)} category.`;
  }
}

// Attach event listeners to subtab buttons
if (postsList && postSubtabButtons.length > 0) {
  postSubtabButtons.forEach(button => {
    button.addEventListener('click', () => {
      const subtab = button.getAttribute('data-subtab');

      // Update active subtab
      postSubtabButtons.forEach(btn => btn.classList.remove('active'));
      button.classList.add('active');

      // Filter posts
      filterPosts(subtab);
    });
  });

  // Apply initial filtering based on active subtab
  const activeSubtabButton = document.querySelector('.posts-subtabs .subtab-button.active');
  if (activeSubtabButton) {
    filterPosts(activeSubtabButton.getAttribute('data-subtab'));
  }
} else if (noPostsMessage) {
  noPostsMessage.style.display = 'block';
  noPostsMessage.textContent = 'This creator hasn\'t posted anything yet.';
}

// Media Subtabs
const mediaSubtabButtons = document.querySelectorAll('.media-subtabs .subtab-button');
const mediaViews = document.querySelectorAll('.media-view');
mediaSubtabButtons.forEach(button => {
  button.addEventListener('click', () => {
    mediaSubtabButtons.forEach(btn => btn.classList.remove('active'));
    mediaViews.forEach(view => view.classList.remove('active'));
    button.classList.add('active');
    const subtab = button.getAttribute('data-subtab');
    document.getElementById(`media-${subtab}`).classList.add('active');
  });
});

// --- Category Management Form ---
const manageCategoriesForm = document.getElementById('manage-categories-form');
if (manageCategoriesForm) {
  manageCategoriesForm.addEventListener('submit', async e => {
    e.preventDefault();
    const form = e.target;
    const action = form.querySelector('select[name="action"]').value;
    const category = form.querySelector('input[name="category"]').value;
    const newCategory = form.querySelector('input[name="newCategory"]').value;

    try {
      const response = await fetch('/profile/manage-categories', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action, category, newCategory }),
      });
      const result = await response.json();
      if (result.status === 'success') {
        alert(result.message);
        window.location.reload(); // Reload to update subtabs and views
      } else {
        alert(result.message);
      }
    } catch (err) {
      alert('Error managing category.');
    }
  });

  // Show/hide newCategory input based on action
  const actionSelect = manageCategoriesForm.querySelector('select[name="action"]');
  if (actionSelect) {
    actionSelect.addEventListener('change', e => {
      const newCategoryInput = document.getElementById('new-category-input');
      newCategoryInput.style.display = e.target.value === 'edit' ? 'block' : 'none';
    });
  }
}

    // --- Compact View Toggle ---
const viewToggle = document.querySelector('.view-toggle-button');
const mediaContents = document.querySelectorAll('.media-content');
if (viewToggle) {
  viewToggle.addEventListener('click', () => {
    const isCompact = mediaContents[0].classList.contains('posts-list');
    mediaContents.forEach(content => {
      if (isCompact) {
        content.classList.remove('posts-list');
        content.classList.add('media-list');
      } else {
        content.classList.remove('media-list');
        content.classList.add('posts-list');
      }
    });
    viewToggle.classList.toggle('active');
    const icon = viewToggle.querySelector('i');
    icon.classList.toggle('fa-th');
    icon.classList.toggle('fa-th-large');
    if (isDevEnv) {
      console.log(`Switched to ${isCompact ? 'compact' : 'normal'} view`);
    }
  });
}

    // Upload Form Validation
if (isCreatorViewingOwnProfile) {
  const uploadForm = document.getElementById('uploadContentForm');
  const specialCheckbox = document.getElementById('specialCheckbox');
  const unlockPriceContainer = document.getElementById('unlockPriceContainer');
  const unlockPriceInput = document.getElementById('unlockPrice');
  const imagesInput = document.getElementById('contentImages');
  const videosInput = document.getElementById('contentVideos');
  const addImagesButton = document.getElementById('addImagesButton');
  const addVideosButton = document.getElementById('addVideosButton');
  const mediaPreview = document.getElementById('mediaPreview');
  const categorySelect = document.getElementById('category'); // Added for category field

  // Store selected files
  let selectedImages = [];
  let selectedVideos = [];

  if (uploadForm && specialCheckbox && unlockPriceContainer && unlockPriceInput && imagesInput && videosInput && addImagesButton && addVideosButton && mediaPreview && categorySelect) {
    // Toggle unlock price visibility
    const togglePriceVisibility = () => {
      if (specialCheckbox.checked) {
        unlockPriceContainer.classList.remove('hidden');
        unlockPriceInput.required = true;
      } else {
        unlockPriceContainer.classList.add('hidden');
        unlockPriceInput.required = false;
        unlockPriceInput.value = '';
      }
    };
    specialCheckbox.addEventListener('change', togglePriceVisibility);
    togglePriceVisibility();

    // Trigger file input clicks
    addImagesButton.addEventListener('click', () => imagesInput.click());
    addVideosButton.addEventListener('click', () => videosInput.click());

    // Generate preview for selected files
    const updatePreview = () => {
      mediaPreview.innerHTML = ''; // Clear existing previews
      const totalFiles = selectedImages.length + selectedVideos.length;

      if (totalFiles === 0) {
        mediaPreview.classList.add('hidden');
        return;
      }
      mediaPreview.classList.remove('hidden');

      // Display images
      selectedImages.forEach((file, index) => {
        const previewItem = document.createElement('div');
        previewItem.className = 'preview-item';
        const img = document.createElement('img');
        img.src = URL.createObjectURL(file);
        img.alt = file.name;
        const removeButton = document.createElement('button');
        removeButton.className = 'remove-media-button';
        removeButton.innerHTML = '×';
        removeButton.addEventListener('click', () => {
          selectedImages.splice(index, 1);
          updatePreview();
        });
        const nameSpan = document.createElement('span');
        nameSpan.className = 'preview-name';
        nameSpan.textContent = file.name;
        previewItem.appendChild(img);
        previewItem.appendChild(removeButton);
        previewItem.appendChild(nameSpan);
        mediaPreview.appendChild(previewItem);
      });

      // Display videos (thumbnail or fallback icon)
      selectedVideos.forEach((file, index) => {
        const previewItem = document.createElement('div');
        previewItem.className = 'preview-item';
        const video = document.createElement('video');
        video.src = URL.createObjectURL(file);
        video.muted = true; // Required for autoplay in some browsers
        video.addEventListener('loadedmetadata', () => {
          video.currentTime = 1; // Show a frame at 1 second
        });
        const removeButton = document.createElement('button');
        removeButton.className = 'remove-media-button';
        removeButton.innerHTML = '×';
        removeButton.addEventListener('click', () => {
          selectedVideos.splice(index, 1);
          updatePreview();
        });
        const nameSpan = document.createElement('span');
        nameSpan.className = 'preview-name';
        nameSpan.textContent = file.name;
        previewItem.appendChild(video);
        previewItem.appendChild(removeButton);
        previewItem.appendChild(nameSpan);
        mediaPreview.appendChild(previewItem);
      });
    };

    // Handle image selection
    imagesInput.addEventListener('change', (e) => {
      const newFiles = Array.from(e.target.files);
      if (selectedImages.length + selectedVideos.length + newFiles.length > 10) {
        alert('You can upload a maximum of 10 media files (images or videos combined).');
        e.target.value = ''; // Clear input
        return;
      }
      selectedImages = [...selectedImages, ...newFiles];
      e.target.value = ''; // Clear input for next selection
      updatePreview();
    });

    // Handle video selection
    videosInput.addEventListener('change', (e) => {
      const newFiles = Array.from(e.target.files);
      if (selectedImages.length + selectedVideos.length + newFiles.length > 10) {
        alert('You can upload a maximum of 10 media files (images or videos combined).');
        e.target.value = ''; // Clear input
        return;
      }
      selectedVideos = [...selectedVideos, ...newFiles];
      e.target.value = ''; // Clear input for next selection
      updatePreview();
    });

    // Form submission: Append files to FormData
    uploadForm.addEventListener('submit', (e) => {
      e.preventDefault(); // Prevent default submission

      const writeUp = document.getElementById('writeUp').value.trim();
      const isSpecial = specialCheckbox.checked;
      const unlockPrice = parseFloat(unlockPriceInput.value);
      const category = categorySelect.value; // Get selected category
      const totalFiles = selectedImages.length + selectedVideos.length;

      // Validation
      if (totalFiles === 0 && !writeUp) {
        alert('Please provide text or upload at least one image or video to create a post.');
        return;
      }
      if (totalFiles > 10) {
        alert('You can upload a maximum of 10 media files (images or videos combined).');
        return;
      }
      if (isSpecial && (!unlockPrice || unlockPrice < 100)) {
        alert('Please provide a valid unlock price (minimum 100 NGN) for special content.');
        return;
      }

      // Create FormData and append fields
      const formData = new FormData();
      formData.append('writeUp', writeUp);
      formData.append('special', isSpecial);
      if (isSpecial) {
        formData.append('unlockPrice', unlockPrice);
      }
      formData.append('category', category || ''); // Append category (empty string if none selected)
      selectedImages.forEach((file) => {
        formData.append('contentImages', file);
      });
      selectedVideos.forEach((file) => {
        formData.append('contentVideos', file);
      });

      // Submit FormData via fetch
      fetch(uploadForm.action, {
        method: 'POST',
        body: formData
      })
        .then((response) => {
          if (response.redirected) {
            window.location.href = response.url;
          } else {
            return response.json().then((data) => {
              if (data.status === 'success') {
                alert('Post created successfully!');
                window.location.reload(); // Reload to update posts
              } else {
                alert(data.message || 'Error uploading content.');
              }
            });
          }
        })
        .catch((error) => {
          console.error('Form submission error:', error);
          alert('Error uploading content.');
        });
    });
  } else if (isDevEnv) {
    console.warn('Upload form elements not found:', {
      uploadForm: !!uploadForm,
      specialCheckbox: !!specialCheckbox,
      unlockPriceContainer: !!unlockPriceContainer,
      unlockPriceInput: !!unlockPriceInput,
      imagesInput: !!imagesInput,
      videosInput: !!videosInput,
      addImagesButton: !!addImagesButton,
      addVideosButton: !!addVideosButton,
      mediaPreview: !!mediaPreview,
      categorySelect: !!categorySelect // Added for category
    });
  }
}

    // --- Share Profile Modal ---
    const initializeShareModal = () => {
      const shareButtons = document.querySelectorAll('.share-icon');
      const shareModal = document.getElementById('shareModal');
      const closeShareModal = document.getElementById('closeShareModal');
      const copyLinkButton = document.getElementById('copyLinkButton');
      const shareTwitter = document.getElementById('shareTwitter');
      const shareWhatsApp = document.getElementById('shareWhatsApp');
      const shareTelegram = document.getElementById('shareTelegram');
      const shareFacebook = document.getElementById('shareFacebook');
      const shareNativeButton = document.getElementById('shareNativeButton');

      let currentUsername = null;

      if (!shareModal || shareButtons.length === 0) {
        if (isDevEnv) console.warn('Share modal or buttons not found');
        return;
      }

      const getProfileLink = (username) => {
        return `${window.location.origin}/profile/${username}`;
      };

      const updateShareLinks = (username) => {
        const profileLink = getProfileLink(username);
        const encodedLink = encodeURIComponent(profileLink);
        const shareText = encodeURIComponent(`Check out ${username}'s profile!`);

        copyLinkButton.dataset.link = profileLink;
        shareTwitter.href = `https://twitter.com/intent/tweet?url=${encodedLink}&text=${shareText}`;
        shareWhatsApp.href = `https://api.whatsapp.com/send?text=${shareText}%20${encodedLink}`;
        shareTelegram.href = `https://t.me/share/url?url=${encodedLink}&text=${shareText}`;
        shareFacebook.href = `https://www.facebook.com/sharer/sharer.php?u=${encodedLink}`;
      };

      shareButtons.forEach(button => {
        button.addEventListener('click', function() {
          currentUsername = this.dataset.username;
          updateShareLinks(currentUsername);
          shareModal.classList.add('active');

          if (navigator.share) {
            shareNativeButton.classList.remove('hidden');
          } else {
            shareNativeButton.classList.add('hidden');
          }
        });
      });

      closeShareModal.addEventListener('click', () => {
        shareModal.classList.remove('active');
      });

      shareModal.addEventListener('click', (e) => {
        if (e.target === shareModal) {
          shareModal.classList.remove('active');
        }
      });

      copyLinkButton.addEventListener('click', async function() {
        const link = this.dataset.link;
        try {
          await navigator.clipboard.writeText(link);
          this.textContent = 'Link Copied!';
          this.disabled = true;
          setTimeout(() => {
            this.textContent = 'Copy Link';
            this.disabled = false;
          }, 2000);
        } catch (err) {
          if (isDevEnv) console.error('Error copying link:', err.message);
          alert('Failed to copy link.');
        }
      });

      shareNativeButton.addEventListener('click', async () => {
        try {
          await navigator.share({
            title: `${currentUsername}'s Profile`,
            text: `Check out ${currentUsername}'s profile!`,
            url: getProfileLink(currentUsername),
          });
          shareModal.classList.remove('active');
        } catch (err) {
          if (isDevEnv) console.error('Error sharing profile:', err.message);
          alert('Error sharing profile.');
        }
      });
    };

    initializeShareModal();

 // --- Post Action Modal ---
const initializePostActionModal = () => {
  const container = document.querySelector('.profile-container') || document.querySelector('.home-container');
  const isDevEnv = container && container.dataset.env === 'development';
  const username = container ? container.dataset.username : null;

  const postMenuButtons = document.querySelectorAll('.post-menu-button');
  const postActionModal = document.getElementById('postActionModal');
  const closePostActionModal = document.getElementById('closePostActionModal');
  const sharePostButton = document.getElementById('sharePostButton');
  const reportPostButton = document.getElementById('reportPostButton');
  const postShareModal = document.getElementById('postShareModal');
  const closePostShareModal = document.getElementById('closePostShareModal');
  const copyPostLinkButton = document.getElementById('copyPostLinkButton');
  const sharePostTwitter = document.getElementById('sharePostTwitter');
  const sharePostWhatsApp = document.getElementById('sharePostWhatsApp');
  const sharePostTelegram = document.getElementById('sharePostTelegram');
  const sharePostFacebook = document.getElementById('sharePostFacebook');
  const sharePostNativeButton = document.getElementById('sharePostNativeButton');
  const reportPostModal = document.getElementById('reportPostModal');
  const closeReportPostModal = document.getElementById('closeReportPostModal');
  const reportForm = document.getElementById('reportPostForm');

  if (!postActionModal || postMenuButtons.length === 0) {
    if (isDevEnv) console.warn('Post action modal or menu buttons not found');
    return;
  }

  if (!reportPostModal || !reportForm || !closeReportPostModal) {
    if (isDevEnv) console.warn('Report modal, form, or close button not found');
    return;
  }

  postMenuButtons.forEach(button => {
    button.addEventListener('click', (e) => {
      e.preventDefault();
      const postId = button.dataset.postId;
      if (!postId) {
        if (isDevEnv) console.warn('Post ID not found on menu button');
        return;
      }
      sharePostButton.dataset.postId = postId;
      reportPostButton.dataset.postId = postId;
      postActionModal.classList.remove('hidden');
      if (isDevEnv) console.log(`Opening post action modal for post ID: ${postId}`);
    });
  });

  closePostActionModal.addEventListener('click', () => {
    postActionModal.classList.add('hidden');
  });

  postActionModal.addEventListener('click', (e) => {
    if (e.target === postActionModal) {
      postActionModal.classList.add('hidden');
    }
  });

  // Share Post Button
  sharePostButton.addEventListener('click', () => {
    const postId = sharePostButton.dataset.postId;
    const effectiveUsername = username || document.querySelector('.share-icon')?.dataset.username || 'unknown';
    const postLink = `${window.location.origin}/profile/${encodeURIComponent(effectiveUsername)}/post/${postId}`;
    const encodedLink = encodeURIComponent(postLink);
    const shareText = encodeURIComponent(`Check out this post by @${effectiveUsername}!`);

    copyPostLinkButton.dataset.link = postLink;
    sharePostTwitter.href = `https://twitter.com/intent/tweet?url=${encodedLink}&text=${shareText}`;
    sharePostWhatsApp.href = `https://api.whatsapp.com/send?text=${shareText}%20${encodedLink}`;
    sharePostTelegram.href = `https://t.me/share/url?url=${encodedLink}&text=${shareText}`;
    sharePostFacebook.href = `https://www.facebook.com/sharer/sharer.php?u=${encodedLink}`;
    sharePostNativeButton.dataset.link = postLink;

    if (navigator.share) {
      sharePostNativeButton.classList.remove('hidden');
    } else {
      sharePostNativeButton.classList.add('hidden');
    }

    postShareModal.classList.remove('hidden');
    postActionModal.classList.add('hidden');
    if (isDevEnv) console.log(`Opening share modal for post ID: ${postId}, link: ${postLink}`);
  });

  // Copy Link
  copyPostLinkButton.addEventListener('click', async () => {
    const link = copyPostLinkButton.dataset.link;
    try {
      await navigator.clipboard.writeText(link);
      copyPostLinkButton.textContent = 'Link Copied!';
      copyPostLinkButton.disabled = true;
      setTimeout(() => {
        copyPostLinkButton.textContent = 'Copy Link';
        copyPostLinkButton.disabled = false;
      }, 2000);
      if (isDevEnv) console.log(`Copied post link: ${link}`);
    } catch (err) {
      if (isDevEnv) console.error('Error copying post link:', err.message);
      alert('Failed to copy link.');
    }
  });

  // Native Share
  sharePostNativeButton.addEventListener('click', async () => {
    const link = sharePostNativeButton.dataset.link;
    const effectiveUsername = username || document.querySelector('.share-icon')?.dataset.username || 'unknown';
    try {
      await navigator.share({
        title: `Post by @${effectiveUsername}`,
        text: `Check out this post by @${effectiveUsername}!`,
        url: link
      });
      postShareModal.classList.add('hidden');
      if (isDevEnv) console.log(`Shared post via native share: ${link}`);
    } catch (err) {
      if (isDevEnv) console.error('Error sharing post:', err.message);
      alert('Error sharing post.');
    }
  });

  // Close Share Modal
  closePostShareModal.addEventListener('click', () => {
    postShareModal.classList.add('hidden');
  });

  postShareModal.addEventListener('click', (e) => {
    if (e.target === postShareModal) {
      postShareModal.classList.add('hidden');
    }
  });

  // Report Post Button
  reportPostButton.addEventListener('click', () => {
    const postId = reportPostButton.dataset.postId;
    reportForm.dataset.postId = postId;
    reportPostModal.classList.remove('hidden');
    postActionModal.classList.add('hidden');
    if (isDevEnv) console.log(`Opening report modal for post ID: ${postId}`);
  });

  // Close Report Modal
  closeReportPostModal.addEventListener('click', () => {
    reportPostModal.classList.add('hidden');
    reportForm.reset();
  });

  reportPostModal.addEventListener('click', (e) => {
    if (e.target === reportPostModal) {
      reportPostModal.classList.add('hidden');
      reportForm.reset();
    }
  });

  // Handle Report Form Submission
  reportForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const postId = reportForm.dataset.postId;
    const reason = reportForm.querySelector('#reportReason').value;
    const details = reportForm.querySelector('#reportDetails').value.trim();
    const submitButton = reportForm.querySelector('.report-submit-button');
    const originalText = submitButton.textContent;

    if (!postId || !reason) {
      if (isDevEnv) console.warn('Missing postId or reason:', { postId, reason });
      alert('Please select a reason for reporting.');
      return;
    }

    submitButton.textContent = 'Submitting...';
    submitButton.disabled = true;

    try {
      const response = await fetch('/profile/report-post', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ postId, reason, details })
      });

      const result = await response.json();
      if (response.ok && result.status === 'success') {
        alert(result.message || 'Report submitted successfully.');
        reportPostModal.classList.add('hidden');
        reportForm.reset();
      } else {
        if (isDevEnv) console.error('Report submission error:', result);
        alert(result.message || 'Error submitting report.');
      }
    } catch (err) {
      if (isDevEnv) console.error('Error submitting report:', err.message);
      alert('Error submitting report.');
    } finally {
      submitButton.textContent = originalText;
      submitButton.disabled = false;
    }
  });
};

// Call the function once to initialize the post action modal
initializePostActionModal();
// Call the function once to initialize the post action modal
initializePostActionModal();
    // --- Carousel Navigation for Posts and Media Tabs ---
function initializeCarousels() {
  document.querySelectorAll('.media-carousel-container').forEach(container => {
    const carousel = container.querySelector('.media-carousel');
    const items = container.querySelectorAll('.carousel-item');
    const prevButton = container.querySelector('.carousel-prev');
    const nextButton = container.querySelector('.carousel-next');
    const dots = container.querySelectorAll('.carousel-dot');
    let currentIndex = 0;

    if (!carousel || items.length === 0) return;

    function updateCarousel() {
      items.forEach((item, index) => {
        item.classList.toggle('active', index === currentIndex);
      });
      if (dots.length > 0) {
        dots.forEach((dot, index) => {
          dot.classList.toggle('active', index === currentIndex);
        });
      }
    }

    if (prevButton) {
      prevButton.addEventListener('click', () => {
        currentIndex = (currentIndex - 1 + items.length) % items.length;
        updateCarousel();
      });
    }

    if (nextButton) {
      nextButton.addEventListener('click', () => {
        currentIndex = (currentIndex + 1) % items.length;
        updateCarousel();
      });
    }

    if (dots.length > 0) {
      dots.forEach((dot, index) => {
        dot.addEventListener('click', () => {
          currentIndex = index;
          updateCarousel();
        });
      });
    }

    updateCarousel();
  });
}

// Initialize carousels on page load
initializeCarousels();
const sortButton = document.querySelector('.sort-button');
  const sortModal = document.querySelector('.sort-modal');
  const sortForm = document.querySelector('#sort-form');
  const cancelSortButton = document.querySelector('.cancel-sort');

  // Show modal when sort button is clicked
  if (sortButton) {
    sortButton.addEventListener('click', () => {
      sortModal.style.display = 'flex';
    });
  }

  // Hide modal when cancel is clicked
  if (cancelSortButton) {
    cancelSortButton.addEventListener('click', () => {
      sortModal.style.display = 'none';
    });
  }

  // Handle form submission
  if (sortForm) {
    sortForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const sortBy = sortForm.querySelector('input[name="sortBy"]:checked').value;
      const order = sortForm.querySelector('input[name="order"]:checked').value;

      // Update URL with query parameters
      const url = new URL(window.location.href);
      url.searchParams.set('sortBy', sortBy);
      url.searchParams.set('order', order);
      window.location.href = url.toString();
    });
  }

  // Close modal when clicking outside
  sortModal.addEventListener('click', (e) => {
    if (e.target === sortModal) {
      sortModal.style.display = 'none';
    }
  });
  const writeUpTextarea = document.getElementById('writeUp');
  const suggestionsContainer = document.getElementById('profile-creator-suggestions');

  // Position the suggestions pop-up below the textarea
  function positionSuggestions() {
    const rect = writeUpTextarea.getBoundingClientRect();
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    suggestionsContainer.style.top = `${rect.bottom + scrollTop + 5}px`;
    suggestionsContainer.style.left = `${rect.left}px`;
    suggestionsContainer.style.width = `${rect.width}px`;
  }

  // Fetch creator suggestions from the backend
  async function fetchSuggestions(query) {
    try {
      const response = await fetch(`/profile/creator-suggestions?q=${encodeURIComponent(query)}`);
      if (!response.ok) throw new Error('Network error');
      return await response.json();
    } catch (error) {
      console.error('Error fetching suggestions:', error);
      return [];
    }
  }

  // Display suggestions in the pop-up
  function displaySuggestions(suggestions) {
    suggestionsContainer.innerHTML = '';
    if (suggestions.length === 0) {
      suggestionsContainer.classList.add('hidden');
      return;
    }

    suggestions.forEach((creator) => {
      const suggestionItem = document.createElement('div');
      suggestionItem.className = 'profile-suggestion-item';
      suggestionItem.innerHTML = `
        <img src="${creator.profilePicture}" alt="${creator.username}" class="profile-suggestion-profile-pic">
        <span class="profile-suggestion-name">${creator.profileName || creator.username}</span>
      `;
      suggestionItem.addEventListener('click', () => {
        // Insert the tagged username into the textarea
        const cursorPos = writeUpTextarea.selectionStart;
        const textBefore = writeUpTextarea.value.substring(0, cursorPos);
        const textAfter = writeUpTextarea.value.substring(cursorPos);
        const lastAt = textBefore.lastIndexOf('@');
        const newText = `${textBefore.substring(0, lastAt)}@${creator.username} ${textAfter}`;
        writeUpTextarea.value = newText;

        // Hide suggestions
        suggestionsContainer.classList.add('hidden');
      });
      suggestionsContainer.appendChild(suggestionItem);
    });

    suggestionsContainer.classList.remove('hidden');
  }

  // Handle input in the textarea
  writeUpTextarea.addEventListener('input', async () => {
    const text = writeUpTextarea.value;
    const cursorPos = writeUpTextarea.selectionStart;
    const textBeforeCursor = text.substring(0, cursorPos);

    // Check if typing a tag (e.g., @username)
    const lastAt = textBeforeCursor.lastIndexOf('@');
    if (lastAt !== -1 && cursorPos > lastAt) {
      const query = textBeforeCursor.substring(lastAt + 1);
      if (query.match(/^[a-zA-Z0-9_]*$/)) { // Only allow valid username characters
        positionSuggestions();
        const suggestions = await fetchSuggestions(query);
        displaySuggestions(suggestions);
      } else {
        suggestionsContainer.classList.add('hidden');
      }
    } else {
      suggestionsContainer.classList.add('hidden');
    }
  });

  // Hide suggestions when clicking outside
  document.addEventListener('click', (e) => {
    if (!writeUpTextarea.contains(e.target) && !suggestionsContainer.contains(e.target)) {
      suggestionsContainer.classList.add('hidden');
    }
  });

  });
  
</script>